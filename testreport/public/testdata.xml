<testplan xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="TestSpec" type="structured" AlmSyncUri_Base="SPECDOC-B8CEE3B7-6868-4436-9BBD-E287ACD14FEF" AlmSyncUri_Spec="TestSpec" AlmSyncUri_Spec_Revision="3.875.798" version="5.01.00" approveDate="" approvePerson="" endDate="" endDateGraphite="" object="If_AsrIfCry" startDate="" startDateGraphite="">
  <testspecifications>
    <testspecification></testspecification>
    <testspecification></testspecification>
  </testspecifications>
  <testgroup name="Test environment">
    <description><![CDATA[
All tests are executed on a PC target using the Microsoft Visual C++ Compiler.
Coverage is analyzed using BullsEye.
The tests are implemented in C using the BTE framework. ]]></description>
  </testgroup>
  <testgroup name="Test configurations">
    <description><![CDATA[
Refer to https://vglobpessvn1.vg.vector.int/svn/CANbedded/If/If_AsrIfCry/trunk/_doc/20_Design/ConfigurationDerivation.xlsx?p=414743 
]]></description>
  </testgroup>
  <testgroup name="Test of component requirements">
    <testgroup name="Services">
      <testgroup name="Generic">
        <testcase almplusGUID="TCASE-9056A42B-917C-4762-AC9F-DCE91373B5E5" id="TCASE-1082213" extId="" name="Init available" ExecPlan="x">
          <description><![CDATA[*Init available*

Assert that the module Init-Function is available.

Precondition:
- Dev Error Detect is enabled.

Test Steps:
# Prepare: CryIf must not be initialized
# Assert that Module is not initialized
# Call CryIf_Init
# Assert that CryIf_Init was called.
# Assert that Module is initialized
]]></description>
          <testrun date="2020-08-25 15:42:03" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="ok" time="0" caller="" callee=""> Module is not initialized: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Module is not initialized </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Call CryIf_Init </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Assert that CryIf_Init was called </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_Init) asserted. </Element>
              <Element type="TestStep 6" time="0" caller="" callee=""> Assert that Module is initialized </Element>
              <Element type="ok" time="0" caller="" callee=""> Module is initialized: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:19" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="ok" time="0" caller="" callee=""> Module is not initialized: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Module is not initialized </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Call CryIf_Init </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Assert that CryIf_Init was called </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_Init) asserted. </Element>
              <Element type="TestStep 6" time="0" caller="" callee=""> Assert that Module is initialized </Element>
              <Element type="ok" time="0" caller="" callee=""> Module is initialized: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:36" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="ok" time="0" caller="" callee=""> Module is not initialized: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Module is not initialized </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Call CryIf_Init </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Assert that CryIf_Init was called </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_Init) asserted. </Element>
              <Element type="TestStep 6" time="0" caller="" callee=""> Assert that Module is initialized </Element>
              <Element type="ok" time="0" caller="" callee=""> Module is initialized: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:53" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-D07D56CC-CCE1-4682-A4CA-A8D8C5B31970" id="TCASE-1082476" extId="" name="Version Info" ExecPlan="">
          <description><![CDATA[*Version Info*
Assert that the VersionInfo-Function is available and receives the version info from the module.

Precondition:
- Api is enabled

Test Steps:
# Call CryIf_GetVersionInfo
# Assert that right version information is returned]]></description>
          <testrun date="2020-08-25 15:42:03" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Api is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_GetVersionInfo </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_GetVersionInfo - (EventListElement 0) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that right version information is returned </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_GetVersionInfo) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:19" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Api is enabled </Element>
              <NA_Text>Switch CRYIF_VERSION_INFO_API is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
          <testrun date="2020-08-25 15:42:36" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Api is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_GetVersionInfo </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_GetVersionInfo - (EventListElement 0) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that right version information is returned </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_GetVersionInfo) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:53" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Api is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_GetVersionInfo </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_GetVersionInfo - (EventListElement 0) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that right version information is returned </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_GetVersionInfo) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
        </testcase>
      </testgroup>
      <testgroup name="Job Handling">
        <testcase almplusGUID="TCASE-D624EFEA-BEBD-450E-8A9D-1BB213AD70ED" id="TCASE-1082542" extId="" name="ProcessJob is dispatched to the Crypto Driver" ExecPlan="x">
          <description><![CDATA[*ProcessJob is dispatched to the Crypto Driver*

Asserts that the CryIf dispatches the ProcessJob to the corresponding Crypto Driver,
Therefore, the objectId must be translated correctly.


Test Steps:
# Prepare: Generate hash job
# Call CryIf_ProcessJob with objectId and pointer to the job
# Assert that CryIf_ProcessJob returned E_OK
# Assert that Crypto_ProcessJob was called with translated objectId.
# Assert that cryIfKeyId was correctly translated]]></description>
          <testrun date="2020-08-25 15:42:03" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Generate hash job </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_ProcessJob with objectId and pointer to the job </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_ProcessJob - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_ProcessJob (objectId=0x0, src =LibCv, Job=0x9C2D70) (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that CryIf_ProcessJob returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_ProcessJob) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that Crypto_ProcessJob was called with translated objectId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_ProcessJob) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Assert that cryIfKeyId was correctly translated </Element>
              <Element type="ok" time="0" caller="" callee=""> cryptoKeyId is as expected.: current value: 25 (0x19) == expected value 25 (0x19) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:19" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Generate hash job </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_ProcessJob with objectId and pointer to the job </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_ProcessJob - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_ProcessJob (objectId=0x0, src =LibCv, Job=0x8A2D50) (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that CryIf_ProcessJob returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_ProcessJob) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that Crypto_ProcessJob was called with translated objectId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_ProcessJob) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Assert that cryIfKeyId was correctly translated </Element>
              <Element type="ok" time="0" caller="" callee=""> cryptoKeyId is as expected.: current value: 25 (0x19) == expected value 25 (0x19) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:36" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Generate hash job </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_ProcessJob with objectId and pointer to the job </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_ProcessJob - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_ProcessJob (objectId=0x0, src =LibCv, Job=0xD32D70) (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that CryIf_ProcessJob returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_ProcessJob) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that Crypto_ProcessJob was called with translated objectId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_ProcessJob) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Assert that cryIfKeyId was correctly translated </Element>
              <Element type="ok" time="0" caller="" callee=""> cryptoKeyId is as expected.: current value: 25 (0x19) == expected value 25 (0x19) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:53" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Generate hash job </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_ProcessJob with objectId and pointer to the job </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_ProcessJob - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_ProcessJob (objectId=0x0, src =LibCv, Job=0xF91C50) (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that CryIf_ProcessJob returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_ProcessJob) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that Crypto_ProcessJob was called with translated objectId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_ProcessJob) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Assert that cryIfKeyId was correctly translated </Element>
              <Element type="ok" time="0" caller="" callee=""> cryptoKeyId is as expected.: current value: 25 (0x19) == expected value 25 (0x19) </Element>
            </log>
            <result>ok</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-8E445B97-035F-4D85-80B1-978FB6566022" id="TCASE-1250059" extId="" name="ProcessJob is dispatched to the Crypto Driver" ExecPlan="">
          <description><![CDATA[*ProcessJob is dispatched to the Crypto Driver*

Asserts that the CryIf dispatches the ProcessJob to the corresponding Crypto Driver,
Therefore, the objectId must be translated correctly.


Test Steps:
# Prepare: Generate jobRandomSeed job
# Call CryIf_ProcessJob with objectId and pointer to the job
# Assert that CryIf_ProcessJob returned E_OK
# Assert that Crypto_ProcessJob was called with translated objectId.
# Assert that cryIfKeyId was correctly translated]]></description>
          <testrun parameter="config=.\Embedded\TestData_Storage\TestConfig1 " />
          <testrun parameter="config=.\Embedded\TestData_Storage\TestConfig2 " />
          <testrun parameter="config=.\Embedded\TestData_Storage\TestConfig3 " />
        </testcase>
        <testcase almplusGUID="TCASE-F4A4E14C-B169-43BA-A311-FF0547EAE883" id="TCASE-1248397" extId="" name="ProcessJob is dispatched to the Crypto Driver" ExecPlan="x">
          <description><![CDATA[*ProcessJob is dispatched to the Crypto Driver*

Asserts that the CryIf dispatches the ProcessJob to the corresponding Crypto Driver,
Therefore, the objectId must be translated correctly.


Test Steps:
# Prepare: Generate jobKeyDerive job
# Call CryIf_ProcessJob with objectId and pointer to the job
# Assert that CryIf_ProcessJob returned E_OK
# Assert that Crypto_ProcessJob was called with translated objectId.
# Assert that cryIfKeyId was correctly translated]]></description>
          <testrun parameter="config=.\Embedded\TestData_Storage\TestConfig1 " />
          <testrun parameter="config=.\Embedded\TestData_Storage\TestConfig2 " />
          <testrun parameter="config=.\Embedded\TestData_Storage\TestConfig3 " />
        </testcase>
        <testcase almplusGUID="TCASE-D3AFC8EC-DBC4-4E5D-9386-03628F6CC4D8" id="TCASE-1082484" extId="" name="CancelJob is dispatched to the Crypto Driver" ExecPlan="x">
          <description><![CDATA[*CancelJob is dispatched to the Crypto Driver*

Asserts that the CryIf dispatches the CancelJob to the corresponding Crypto Driver,
Therefore, the objectId must be translated correctly.

Test Steps:
# Prepare: Generate hash job
# Call CryIf_CancelJob with objectId and pointer to the job
# Assert that CryIf_CancelJob returned E_OK
# Assert that Crypto_CancelJob was called with translated objectId.
# Assert that cryIfKeyId was correctly translated]]></description>
          <testrun parameter="config=.\Embedded\TestData_Storage\TestConfig1 " />
          <testrun parameter="config=.\Embedded\TestData_Storage\TestConfig2 " />
          <testrun parameter="config=.\Embedded\TestData_Storage\TestConfig3 " />
        </testcase>
        <testcase almplusGUID="TCASE-3C608D88-D21C-4D94-9BA1-6476CE7C09DF" id="TCASE-1250060" extId="" name="CancelJob is dispatched to the Crypto Driver" ExecPlan="x">
          <description><![CDATA[*CancelJob is dispatched to the Crypto Driver*

Asserts that the CryIf dispatches the CancelJob to the corresponding Crypto Driver,
Therefore, the objectId must be translated correctly.

Test Steps:
# Prepare: Generate jobRandomSeed job
# Call CryIf_CancelJob with objectId and pointer to the job
# Assert that CryIf_CancelJob returned E_OK
# Assert that Crypto_CancelJob was called with translated objectId.
# Assert that cryIfKeyId was correctly translated]]></description>
          <testrun parameter="config=.\Embedded\TestData_Storage\TestConfig1 " />
          <testrun parameter="config=.\Embedded\TestData_Storage\TestConfig2 " />
          <testrun parameter="config=.\Embedded\TestData_Storage\TestConfig3 " />
        </testcase>
        <testcase almplusGUID="TCASE-A4AEFB7A-724C-4E9B-A78D-C2B1AE03A4E6" id="TCASE-1250061" extId="" name="CancelJob is dispatched to the Crypto Driver" ExecPlan="x">
          <description><![CDATA[*CancelJob is dispatched to the Crypto Driver*

Asserts that the CryIf dispatches the CancelJob to the corresponding Crypto Driver,
Therefore, the objectId must be translated correctly.

Test Steps:
# Prepare: Generate jobKeyDerive job
# Call CryIf_CancelJob with objectId and pointer to the job
# Assert that CryIf_CancelJob returned E_OK
# Assert that Crypto_CancelJob was called with translated objectId.
# Assert that cryIfKeyId was correctly translated]]></description>
          <testrun parameter="config=.\Embedded\TestData_Storage\TestConfig1 " />
          <testrun parameter="config=.\Embedded\TestData_Storage\TestConfig2 " />
          <testrun parameter="config=.\Embedded\TestData_Storage\TestConfig3 " />
        </testcase>
        <testcase almplusGUID="TCASE-FDD896EF-2B3D-4058-BDDB-E8D74135C6AC" id="TCASE-1083279" extId="" name="CallbackNotification is dispatched to the Crypto Service Manager" ExecPlan="">
          <description><![CDATA[*CallbackNotification is dispatched to the Crypto Service Manager*

Check if the CryIf dispatches the notification to the Crypto Service Manager.

Test Steps:
# Call API with valid parameters
# Assert that Csm_CallbackNotification was called
# Check that request is forwarded to crypto service manager.]]></description>
          <testrun date="2021-04-30 11:22:16" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="3">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call API with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CallbackNotification - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="Csm">   Csm_CallbackNotification (job=0x6B6EED8, result=0x0) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that Csm_CallbackNotification was called </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CallbackNotification) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check that request is forwarded to crypto service manager </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Csm_CallbackNotification) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2021-04-30 11:22:16" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="3">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call API with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CallbackNotification - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="Csm">   Csm_CallbackNotification (job=0x6AFF5D4, result=0x0) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that Csm_CallbackNotification was called </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CallbackNotification) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check that request is forwarded to crypto service manager </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Csm_CallbackNotification) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2021-04-30 11:22:16" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="3">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call API with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CallbackNotification - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="Csm">   Csm_CallbackNotification (job=0x6FF45C, result=0x0) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that Csm_CallbackNotification was called </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CallbackNotification) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check that request is forwarded to crypto service manager </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Csm_CallbackNotification) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2021-04-30 11:22:16" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="3">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call API with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CallbackNotification - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="Csm">   Csm_CallbackNotification (job=0x4FF028, result=0x0) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that Csm_CallbackNotification was called </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CallbackNotification) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check that request is forwarded to crypto service manager </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Csm_CallbackNotification) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
        </testcase>
      </testgroup>
      <testgroup name="Key Handling">
        <testcase almplusGUID="TCASE-82F4DF2C-6710-47D5-A9CA-6674E3467606" id="TCASE-1073126" extId="" name="KeyElementSet is dispatched to the Crypto Driver" ExecPlan="x">
          <description><![CDATA[*KeyElementSet is dispatched to the Crypto Driver*

Asserts that the CryIf dispatches the KeyElementSet to the corresponding Crypto Driver,
Therefore, the cryIfKeyId must be translated correctly to cryptoKeyId.

Test Steps:
# Call CryIf_KeyElementSet with cryIfKeyId, keyElementId, keyPtr and keyLength
# Assert that CryIf_KeyElementSet returned E_OK
# Assert that Crypto_KeyElementSet was called with translated cryptoKeyId and correct source. Assert that all other parameters stay the same.]]></description>
          <testrun date="2021-04-30 08:08:12" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="2">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyElementSet with cryIfKeyId, keyElementId, keyPtr and keyLength </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementSet - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementSet (cryptoKeyId=0x3, keyElementId=0x1, keyPtr=0x9AFC04, keyLength=0xA, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyElementSet returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementSet) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyElementSet was called with translated cryptoKeyId and correct source Assert that all other parameters stay the same </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementSet) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>warn</result>
          </testrun>
          <testrun date="2021-04-30 08:08:12" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="2">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyElementSet with cryIfKeyId, keyElementId, keyPtr and keyLength </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementSet - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementSet (cryptoKeyId=0x3, keyElementId=0x1, keyPtr=0x88FC04, keyLength=0xA, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyElementSet returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementSet) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyElementSet was called with translated cryptoKeyId and correct source Assert that all other parameters stay the same </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementSet) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>warn</result>
          </testrun>
          <testrun date="2021-05-07 08:13:06" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="3">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyElementSet with cryIfKeyId, keyElementId, keyPtr and keyLength </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementSet - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementSet (cryptoKeyId=0x3, keyElementId=0x1, keyPtr=0xD1FC04, keyLength=0xA, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyElementSet returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementSet) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyElementSet was called with translated cryptoKeyId and correct source Assert that all other parameters stay the same </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementSet) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2021-05-07 08:13:04" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="3">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyElementSet with cryIfKeyId, keyElementId, keyPtr and keyLength </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementSet - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementSet (cryptoKeyId=0x3, keyElementId=0x1, keyPtr=0xF7EC04, keyLength=0xA, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyElementSet returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementSet) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyElementSet was called with translated cryptoKeyId and correct source Assert that all other parameters stay the same </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementSet) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>ok</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-379B356C-B732-4699-AFF2-DCC4F6DC5988" id="TCASE-1072358" extId="" name="KeyElementGet is dispatched to the Crypto Driver" ExecPlan="">
          <description><![CDATA[*KeyElementGet is dispatched to the Crypto Driver*

Asserts that the CryIf dispatches the KeyElementGet to the corresponding Crypto Driver,
Therefore, the cryIfKeyId must be translated correctly to cryptoKeyId.

Test Steps:

# Call CryIf_KeyElementGet with cryIfKeyId, keyElementId, resultPtr and resultLengthPtr
# Assert that CryIf_KeyElementGet returned E_OK
# Assert that Crypto_KeyElementGet was called with translated cryptoKeyId and correct source. Assert that all other parameters stay the same.]]></description>
          <testrun date="2021-04-30 08:08:12" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="2">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyElementGet with cryIfKeyId, keyElementId, resultPtr and resultLengthPtr </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementGet - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0xE, keyElementId=0x1, resultLength=0x10, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyElementGet returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementGet) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId and correct source Assert that all other parameters stay the same </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
            </log>
            <result>warn</result>
            <justification date="2021-04-30 08:08:24">
              <text>justifiedText</text>
            </justification>
          </testrun>
          <testrun date="2021-04-30 08:08:12" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="2">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyElementGet with cryIfKeyId, keyElementId, resultPtr and resultLengthPtr </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementGet - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0xE, keyElementId=0x1, resultLength=0x10, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyElementGet returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementGet) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId and correct source Assert that all other parameters stay the same </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
            </log>
            <result>warn</result>
            <justification date="2021-04-30 08:08:24">
              <text>justifiedText</text>
            </justification>
          </testrun>
          <testrun date="2021-04-30 08:08:12" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="2">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyElementGet with cryIfKeyId, keyElementId, resultPtr and resultLengthPtr </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementGet - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0xE, keyElementId=0x1, resultLength=0x10, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyElementGet returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementGet) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId and correct source Assert that all other parameters stay the same </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
            </log>
            <result>warn</result>
            <justification date="2021-04-30 08:08:24">
              <text>justifiedText</text>
            </justification>
          </testrun>
          <testrun date="2021-05-07 08:14:53" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="3">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyElementGet with cryIfKeyId, keyElementId, resultPtr and resultLengthPtr </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementGet - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0xE, keyElementId=0x1, resultLength=0x10, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyElementGet returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementGet) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId and correct source Assert that all other parameters stay the same </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
            </log>
            <result>ok</result>
            <justification date="2021-04-30 08:08:24">
              <text>justifiedText</text>
            </justification>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-AFE2CAA2-9129-4777-8B07-B387D0C02938" id="TCASE-1073111" extId="" name="KeyElementCopy - Same driver" ExecPlan="x">
          <description><![CDATA[*KeyElementCopy - Same driver*

Asserts that the CryIf dispatches the KeyElementCopy to the corresponding Crypto Driver. Therefore, the cryIfKeyId and the targetCryIfKeyId must point to the same crypto driver.

Test Steps: 
# Call CryIf_KeyElementCopy with keyIds (cryIfKeyId and targetCryIfKeyId) pointing to the same driver
# Assert that CryIf_KeyElementCopy returned E_OK
# Assert that Crypto_KeyElementCopy was called with translated cryptoKeyId and correct source. Assert that all other parameters stay the same. ]]></description>
          <testrun date="2021-04-30 08:08:12" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="2">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyElementCopy with keyIds (cryIfKeyId and targetCryIfKeyId) pointing to the same driver </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopy - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementCopy (cryptoKeyId=0x3, keyElementId=0x1, targetCryptoKeyId=0x2, targetKeyElementId=0x2, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopy returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopy) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyElementCopy was called with translated cryptoKeyId and correct source Assert that all other parameters stay the same </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementCopy) asserted. </Element>
            </log>
            <result>warn</result>
            <justification date="2021-04-30 08:08:24">
              <text>justifiedText</text>
            </justification>
          </testrun>
          <testrun date="2021-04-30 08:08:12" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="2">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyElementCopy with keyIds (cryIfKeyId and targetCryIfKeyId) pointing to the same driver </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopy - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementCopy (cryptoKeyId=0x3, keyElementId=0x1, targetCryptoKeyId=0x2, targetKeyElementId=0x2, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopy returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopy) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyElementCopy was called with translated cryptoKeyId and correct source Assert that all other parameters stay the same </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementCopy) asserted. </Element>
            </log>
            <result>warn</result>
            <justification date="2021-04-30 08:08:24">
              <text>justifiedText</text>
            </justification>
          </testrun>
          <testrun date="2021-04-30 08:08:12" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="2">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyElementCopy with keyIds (cryIfKeyId and targetCryIfKeyId) pointing to the same driver </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopy - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementCopy (cryptoKeyId=0x3, keyElementId=0x1, targetCryptoKeyId=0x2, targetKeyElementId=0x2, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopy returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopy) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyElementCopy was called with translated cryptoKeyId and correct source Assert that all other parameters stay the same </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementCopy) asserted. </Element>
            </log>
            <result>warn</result>
            <justification date="2021-04-30 08:08:24">
              <text>justifiedText</text>
            </justification>
          </testrun>
          <testrun date="2021-05-07 08:14:53" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="3">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyElementCopy with keyIds (cryIfKeyId and targetCryIfKeyId) pointing to the same driver </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopy - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementCopy (cryptoKeyId=0x3, keyElementId=0x1, targetCryptoKeyId=0x2, targetKeyElementId=0x2, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopy returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopy) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyElementCopy was called with translated cryptoKeyId and correct source Assert that all other parameters stay the same </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementCopy) asserted. </Element>
            </log>
            <result>ok</result>
            <justification date="2021-04-30 08:08:24">
              <text>justifiedText</text>
            </justification>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-F85A891C-32C0-4FB3-9155-1DBB45A54231" id="TCASE-1075853" extId="" name="KeyElementCopy - Different driver" ExecPlan="">
          <description><![CDATA[*KeyElementCopy - Different driver*

Asserts that the CryIf dispatches the KeyElementCopy to the corresponding Crypto Drivers. Therefore, the cryIfKeyId and the targetCryIfKeyId must point to different Crypto Drivers.

Test Steps:
# Prepare: Manipulate Crypto_KeyElementGet to return data values
# Call CryIf_KeyElementCopy with keyIds (cryIfKeyId and targetCryIfKeyId) pointing to different drivers
# Assert that CryIf_KeyElementCopy returned E_OK
# Assert that Crypto_KeyElementGet was called with translated cryptoKeyId, keyElementId, length and correctly source
# Assert that Crypto_KeyElementSet was called with translated targetCryptoKeyId and correct source. Assert that all other parameters stay the same.
]]></description>
          <testrun date="2021-04-30 08:08:28" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="2">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementGet to return data values </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementCopy with keyIds (cryIfKeyId and targetCryIfKeyId) pointing to different drivers </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopy - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x3, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 1) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementSet (cryptoKeyId=0x0, keyElementId=0x2, keyPtr=0x6B6EDCC, keyLength=0xA, src=LibCv) (EventListElement 2) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopy returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopy) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId, keyElementId, length and correctly source </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementSet was called with translated targetCryptoKeyId and correct source Assert that all other parameters stay the same </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementSet) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>fail</result>
          </testrun>
          <testrun date="2021-05-07 08:13:33" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="3">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementGet to return data values </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementCopy with keyIds (cryIfKeyId and targetCryIfKeyId) pointing to different drivers </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopy - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x3, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 1) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementSet (cryptoKeyId=0x0, keyElementId=0x2, keyPtr=0x6AFF4C8, keyLength=0xA, src=LibCv) (EventListElement 2) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopy returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopy) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId, keyElementId, length and correctly source </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementSet was called with translated targetCryptoKeyId and correct source Assert that all other parameters stay the same </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementSet) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2021-05-07 08:13:33" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="3">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementGet to return data values </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementCopy with keyIds (cryIfKeyId and targetCryIfKeyId) pointing to different drivers </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopy - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x3, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 1) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementSet (cryptoKeyId=0x0, keyElementId=0x2, keyPtr=0x6FF350, keyLength=0xA, src=LibCv) (EventListElement 2) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopy returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopy) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId, keyElementId, length and correctly source </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementSet was called with translated targetCryptoKeyId and correct source Assert that all other parameters stay the same </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementSet) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2021-05-07 08:13:33" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="3">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementGet to return data values </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementCopy with keyIds (cryIfKeyId and targetCryIfKeyId) pointing to different drivers </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopy - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x3, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 1) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementSet (cryptoKeyId=0x0, keyElementId=0x2, keyPtr=0x4FEF1C, keyLength=0xA, src=LibCv) (EventListElement 2) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopy returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopy) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId, keyElementId, length and correctly source </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementSet was called with translated targetCryptoKeyId and correct source Assert that all other parameters stay the same </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementSet) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun parameter="config=.\Embedded\TestData_Storage\TestConfig1, day=Monday" date="2021-05-07 08:23:58" executor="jtchiazekenn" execCnt="1">
            <result>fail</result>
          </testrun>
          <testrun parameter="config=.\Embedded\TestData_Storage\TestConfig1, day=Friday" date="2021-05-07 08:24:10" executor="jtchiazekenn" execCnt="1">
            <result>ok</result>
          </testrun>
          <testrun parameter="config=.\Embedded\TestData_Storage\TestConfig1, day=Satruday" />
        </testcase>
        <testcase almplusGUID="TCASE-B37EC961-3F67-4514-A694-6B1362779654" id="TCASE-1080003" extId="" name="KeyCopy - Same driver" ExecPlan="x">
          <description><![CDATA[*KeyCopy - Same driver*

Asserts that the CryIf dispatches the KeyCopy to the corresponding Crypto Driver. Therefore, the cryIfKeyId and the targetCryIfKeyId must point to the same Crypto Driver.

Test Steps:
# Call CryIf_KeyCopy (cryIfKeyId and targetCryIfKeyId) pointing to the same driver
# Assert that CryIf_KeyCopy returned E_OK
# Assert that Crypto_KeyCopy was called with translated cryptoKeyId, targetCryptoKeyId and correct source]]></description>
          <testrun date="2021-04-30 08:08:28" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="2">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyCopy (cryIfKeyId and targetCryIfKeyId) pointing to the same driver </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyCopy - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyCopy (cryptoKeyId=0x3, targetCryptoKeyId=0x2, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyCopy returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyCopy) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyCopy was called with translated cryptoKeyId, targetCryptoKeyId and correct source </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyCopy) asserted. </Element>
            </log>
            <result>fail</result>
          </testrun>
          <testrun date="2021-04-30 08:08:28" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="2">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyCopy (cryIfKeyId and targetCryIfKeyId) pointing to the same driver </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyCopy - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyCopy (cryptoKeyId=0x3, targetCryptoKeyId=0x2, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyCopy returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyCopy) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyCopy was called with translated cryptoKeyId, targetCryptoKeyId and correct source </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyCopy) asserted. </Element>
            </log>
            <result>fail</result>
          </testrun>
          <testrun date="2021-05-07 08:13:33" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="3">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyCopy (cryIfKeyId and targetCryIfKeyId) pointing to the same driver </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyCopy - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyCopy (cryptoKeyId=0x3, targetCryptoKeyId=0x2, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyCopy returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyCopy) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyCopy was called with translated cryptoKeyId, targetCryptoKeyId and correct source </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyCopy) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2021-05-07 08:13:33" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="3">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyCopy (cryIfKeyId and targetCryIfKeyId) pointing to the same driver </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyCopy - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyCopy (cryptoKeyId=0x3, targetCryptoKeyId=0x2, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyCopy returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyCopy) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyCopy was called with translated cryptoKeyId, targetCryptoKeyId and correct source </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyCopy) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-305E912A-8F55-43C7-A0CB-F83FE651D396" id="TCASE-1080116" extId="" name="KeyCopy - Different driver" ExecPlan="">
          <description><![CDATA[*KeyCopy - Different driver*

Asserts that the CryIf dispatches the KeyCopy to the corresponding Crypto Drivers. Therefore, the cryIfKeyId and the targetCryIfKeyId must point to different Crypto Drivers.

Test Steps:

# Prepare: Manipulate Crypto_KeyElementGet and Crypto_KeyElementIdsGet to return data values
# Call CryIf_KeyCopy with keyIds (cryIfKeyId and targetCryIfKeyId) pointing to different drivers
# Assert that CryIf_KeyCopy returned E_OK
# Assert that Crypto_KeyElementIdsGet was called with translated cryptoKeyId, length and correct source
# Assert that Crypto_KeyElementIdsGet was called with translated targetcryptoKeyId, length and correct source
# Assert that Crypto_KeyElementGet was called with translated cryptoKeyId and correct source. Assert that all other parameters stay the same.
# Assert that Crypto_KeyElementSet was called with translated targetCryptoKeyId and correct source. Assert that all other parameters stay the same.
]]></description>
          <testrun date="2021-04-30 08:08:28" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="2">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementGet and Crypto_KeyElementIdsGet to return data values </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyCopy with keyIds (cryIfKeyId and targetCryIfKeyId) pointing to different drivers </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyCopy - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementIdsGet (cryptoKeyId=0x3, keyElementIds=0x6B6ED3C, keyElementIdsLengthPtr=0x1E, src=Wrapper) (EventListElement 1) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementIdsGet (cryptoKeyId=0x0, keyElementIds=0x6B6ECB0, keyElementIdsLengthPtr=0x1E, src=LibCv) (EventListElement 2) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x3, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 3) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementSet (cryptoKeyId=0x0, keyElementId=0x1, keyPtr=0x6B6EDC8, keyLength=0x1, src=LibCv) (EventListElement 4) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that CryIf_KeyCopy returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyCopy) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that Crypto_KeyElementIdsGet was called with translated cryptoKeyId, length and correct source </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementIdsGet) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementIdsGet was called with translated targetcryptoKeyId, length and correct source </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementIdsGet) asserted. </Element>
              <Element type="TestStep 6" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId and correct source Assert that all other parameters stay the same </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 3 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 7" time="0" caller="" callee=""> Assert that Crypto_KeyElementSet was called with translated targetCryptoKeyId and correct source Assert that all other parameters stay the same </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 4 (Crypto_KeyElementSet) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>fail</result>
            <justification date="2021-04-30 08:08:41">
              <text>justified bla bla</text>
            </justification>
          </testrun>
          <testrun parameter="config=.\Embedded\TestData_Storage\TestConfig2 " />
          <testrun date="2021-04-30 08:08:28" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="2">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementGet and Crypto_KeyElementIdsGet to return data values </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyCopy with keyIds (cryIfKeyId and targetCryIfKeyId) pointing to different drivers </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyCopy - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementIdsGet (cryptoKeyId=0x3, keyElementIds=0x6FF2C0, keyElementIdsLengthPtr=0x1E, src=Wrapper) (EventListElement 1) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementIdsGet (cryptoKeyId=0x0, keyElementIds=0x6FF234, keyElementIdsLengthPtr=0x1E, src=LibCv) (EventListElement 2) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x3, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 3) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementSet (cryptoKeyId=0x0, keyElementId=0x1, keyPtr=0x6FF34C, keyLength=0x1, src=LibCv) (EventListElement 4) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that CryIf_KeyCopy returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyCopy) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that Crypto_KeyElementIdsGet was called with translated cryptoKeyId, length and correct source </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementIdsGet) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementIdsGet was called with translated targetcryptoKeyId, length and correct source </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementIdsGet) asserted. </Element>
              <Element type="TestStep 6" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId and correct source Assert that all other parameters stay the same </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 3 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 7" time="0" caller="" callee=""> Assert that Crypto_KeyElementSet was called with translated targetCryptoKeyId and correct source Assert that all other parameters stay the same </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 4 (Crypto_KeyElementSet) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>fail</result>
            <justification date="2021-04-30 08:08:41">
              <text>justified bla bla</text>
            </justification>
          </testrun>
          <testrun date="2021-05-07 08:14:59" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="3">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementGet and Crypto_KeyElementIdsGet to return data values </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyCopy with keyIds (cryIfKeyId and targetCryIfKeyId) pointing to different drivers </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyCopy - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementIdsGet (cryptoKeyId=0x3, keyElementIds=0x4FEE8C, keyElementIdsLengthPtr=0x1E, src=Wrapper) (EventListElement 1) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementIdsGet (cryptoKeyId=0x0, keyElementIds=0x4FEE00, keyElementIdsLengthPtr=0x1E, src=LibCv) (EventListElement 2) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x3, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 3) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementSet (cryptoKeyId=0x0, keyElementId=0x1, keyPtr=0x4FEF18, keyLength=0x1, src=LibCv) (EventListElement 4) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that CryIf_KeyCopy returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyCopy) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that Crypto_KeyElementIdsGet was called with translated cryptoKeyId, length and correct source </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementIdsGet) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementIdsGet was called with translated targetcryptoKeyId, length and correct source </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementIdsGet) asserted. </Element>
              <Element type="TestStep 6" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId and correct source Assert that all other parameters stay the same </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 3 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 7" time="0" caller="" callee=""> Assert that Crypto_KeyElementSet was called with translated targetCryptoKeyId and correct source Assert that all other parameters stay the same </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 4 (Crypto_KeyElementSet) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>ok</result>
            <justification date="2021-04-30 08:08:41">
              <text>justified bla bla</text>
            </justification>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-67F7BA11-896C-4472-902E-8786B799E23D" id="TCASE-1080751" extId="" name="KeySetValid is dispatched to the Crypto Driver" ExecPlan="x">
          <description><![CDATA[*KeySetValid is dispatched to the Crypto Driver*

Asserts that the CryIf dispatches the KeySetValid to the corresponding Crypto Driver. Therefore, the cryIfKeyId must be translated correctly to cryptoKeyId.

Test Steps:

# Call CryIf_KeySetValid with cryIfKeyId
# Assert that CryIf_KeySetValid returned E_OK
# Assert that Crypto_KeySetValid was called with translated cryptoKeyId and correct source]]></description>
          <testrun date="2021-04-30 08:08:28" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="2">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeySetValid with cryIfKeyId </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyValidSet - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeySetValid (cryptoKeyId=0x3, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeySetValid returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyValidSet) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeySetValid was called with translated cryptoKeyId and correct source </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeySetValid) asserted. </Element>
            </log>
            <result>fail</result>
            <justification date="2021-04-30 08:08:41">
              <text>justified bla bla</text>
            </justification>
          </testrun>
          <testrun date="2021-04-30 08:08:28" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="2">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeySetValid with cryIfKeyId </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyValidSet - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeySetValid (cryptoKeyId=0x3, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeySetValid returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyValidSet) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeySetValid was called with translated cryptoKeyId and correct source </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeySetValid) asserted. </Element>
            </log>
            <result>fail</result>
            <justification date="2021-04-30 08:08:41">
              <text>justified bla bla</text>
            </justification>
          </testrun>
          <testrun date="2021-04-30 08:08:28" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="2">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeySetValid with cryIfKeyId </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyValidSet - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeySetValid (cryptoKeyId=0x3, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeySetValid returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyValidSet) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeySetValid was called with translated cryptoKeyId and correct source </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeySetValid) asserted. </Element>
            </log>
            <result>fail</result>
            <justification date="2021-04-30 08:08:41">
              <text>justified bla bla</text>
            </justification>
          </testrun>
          <testrun date="2021-05-07 08:14:59" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="3">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeySetValid with cryIfKeyId </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyValidSet - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeySetValid (cryptoKeyId=0x3, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeySetValid returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyValidSet) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeySetValid was called with translated cryptoKeyId and correct source </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeySetValid) asserted. </Element>
            </log>
            <result>ok</result>
            <justification date="2021-04-30 08:08:41">
              <text>justified bla bla</text>
            </justification>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-1FF9F23E-0113-47A6-AD90-C1127E84086E" id="TCASE-1080753" extId="" name="CertificateParse is dispatched to the Crypto Driver" ExecPlan="">
          <description><![CDATA[*CertificateParse is dispatched to the Crypto Driver*

Asserts that the CryIf dispatches the CertificateParse to the corresponding Crypto Driver. Therefore, the cryIfKeyId must be translated correctly to cryptoKeyId.

Test Steps:
# Call CryIf_CertificateParse with cryIfKeyId
# Assert that CryIf_CertificateParse returned E_OK
# Assert that Crypto_CertificateParse was called with translated cryptoKeyId and correct source]]></description>
          <testrun date="2021-04-30 08:08:59" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="2">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_CertificateParse with cryIfKeyId </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CertificateParse - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_CertificateParse (cryptoKeyId=0x3, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_CertificateParse returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CertificateParse) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_CertificateParse was called with translated cryptoKeyId and correct source </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_CertificateParse) asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
          <testrun date="2021-04-30 08:08:59" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="2">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_CertificateParse with cryIfKeyId </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CertificateParse - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_CertificateParse (cryptoKeyId=0x3, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_CertificateParse returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CertificateParse) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_CertificateParse was called with translated cryptoKeyId and correct source </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_CertificateParse) asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
          <testrun date="2021-04-30 08:08:59" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="2">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_CertificateParse with cryIfKeyId </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CertificateParse - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_CertificateParse (cryptoKeyId=0x3, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_CertificateParse returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CertificateParse) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_CertificateParse was called with translated cryptoKeyId and correct source </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_CertificateParse) asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
          <testrun date="2021-04-30 08:08:59" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="2">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_CertificateParse with cryIfKeyId </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CertificateParse - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_CertificateParse (cryptoKeyId=0x3, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_CertificateParse returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CertificateParse) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_CertificateParse was called with translated cryptoKeyId and correct source </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_CertificateParse) asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-E042BE71-4743-4E25-90A8-3EED9B99B5E4" id="TCASE-1080754" extId="" name="CertificateVerify is dispatched to the Crypto Driver" ExecPlan="x">
          <description><![CDATA[*CertificateVerify is dispatched to the Crypto Driver*

Asserts that the CryIf dispatches the CertificateVerify to the corresponding Crypto Driver. Therefore, the cryIfKeyId must be translated correctly to cryptoKeyId.

Test Steps:
# Call CryIf_CertificateVerify with cryIfKeyId, verifyCryIfKeyId and verifyPtr
# Assert that CryIf_CertificateVerify returned E_OK
# Assert that Crypto_CertificateVerify was called with translated cryptoKeyId and correct source. Assert that all other parameters stay the same.
]]></description>
          <testrun date="2021-04-30 08:08:59" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="2">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_CertificateVerify with cryIfKeyId, verifyCryIfKeyId and verifyPtr </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CertificateVerify - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_CertificateVerify (cryptoKeyId=0x3, verifyCryptoKeyId=0x2, verifyPtr=0x9BD708, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_CertificateVerify returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CertificateVerify) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_CertificateVerify was called with translated cryptoKeyId and correct source Assert that all other parameters stay the same </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_CertificateVerify) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> verifyPtr is as expected.: current value: 255 (0xFF) == expected value 255 (0xFF) </Element>
            </log>
            <result>N/A</result>
          </testrun>
          <testrun parameter="config=.\Embedded\TestData_Storage\TestConfig2 " />
          <testrun parameter="config=.\Embedded\TestData_Storage\TestConfig3 " />
          <testrun date="2021-04-30 08:08:59" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="2">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_CertificateVerify with cryIfKeyId, verifyCryIfKeyId and verifyPtr </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CertificateVerify - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_CertificateVerify (cryptoKeyId=0x3, verifyCryptoKeyId=0x2, verifyPtr=0xF8C708, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_CertificateVerify returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CertificateVerify) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_CertificateVerify was called with translated cryptoKeyId and correct source Assert that all other parameters stay the same </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_CertificateVerify) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> verifyPtr is as expected.: current value: 255 (0xFF) == expected value 255 (0xFF) </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-EDC338AB-3014-4B34-B97F-E064AC57D743" id="TCASE-1080868" extId="" name="KeyDerive is dispatched to the Crypto Driver" ExecPlan="x">
          <description><![CDATA[*KeyDerive is dispatched to the Crypto Driver*

Asserts that the CryIf dispatches the KeyDerive to the corresponding Crypto Driver. Therefore, the cryIfKeyId and targetCryIfKeyId must be translated correctly.

Test Steps:
# Call CryIf_KeyDerive with cryIfKeyId and targetCryIfKeyId
# Assert that CryIf_KeyDerive returned E_OK
# Assert that Crypto_KeyDerive was called with translated cryptoKeyId and targetCryptoKeyId and correct source]]></description>
          <testrun date="2021-04-30 08:08:59" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="2">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyDerive with cryIfKeyId and targetCryIfKeyId </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyDerive - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyDerive (cryptoKeyId=0x3, verifyCryptoKeyId=0x2, src=Wrapper ) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyDerive returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyDerive) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyDerive was called with translated cryptoKeyId and targetCryptoKeyId and correct source </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyDerive) asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
          <testrun date="2021-04-30 08:08:59" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="2">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyDerive with cryIfKeyId and targetCryIfKeyId </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyDerive - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyDerive (cryptoKeyId=0x3, verifyCryptoKeyId=0x2, src=Wrapper ) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyDerive returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyDerive) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyDerive was called with translated cryptoKeyId and targetCryptoKeyId and correct source </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyDerive) asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
          <testrun date="2021-04-30 08:08:59" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="2">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyDerive with cryIfKeyId and targetCryIfKeyId </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyDerive - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyDerive (cryptoKeyId=0x3, verifyCryptoKeyId=0x2, src=Wrapper ) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyDerive returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyDerive) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyDerive was called with translated cryptoKeyId and targetCryptoKeyId and correct source </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyDerive) asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
          <testrun date="2021-04-30 08:08:59" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="2">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyDerive with cryIfKeyId and targetCryIfKeyId </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyDerive - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyDerive (cryptoKeyId=0x3, verifyCryptoKeyId=0x2, src=Wrapper ) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyDerive returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyDerive) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyDerive was called with translated cryptoKeyId and targetCryptoKeyId and correct source </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyDerive) asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-A2249642-824C-48B6-9368-305E4F128CF0" id="TCASE-1081528" extId="" name="KeyGenerate is dispatched to the Crypto Driver" ExecPlan="x">
          <description><![CDATA[*KeyGenerate is dispatched to the Crypto Driver*

Asserts that the CryIf dispatches the KeyGenerate to the corresponding Crypto Driver. Therefore, the cryIfKeyId must be translated correctly to cryptoKeyId.

Test Steps:
# Call CryIf_KeyGenerate with cryIfKeyId
# Assert that CryIf_KeyGenerate returned E_OK
# Assert that Crypto_KeyGenerate was called with translated cryptoKeyId and correct source]]></description>
          <testrun date="2021-04-30 08:08:59" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="2">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyGenerate with cryIfKeyId </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyGenerate - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyDerive (cryptoKeyId=0x3, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyGenerate returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyGenerate) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyGenerate was called with translated cryptoKeyId and correct source </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyDerive) asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
          <testrun date="2021-04-30 08:08:59" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="2">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyGenerate with cryIfKeyId </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyGenerate - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyDerive (cryptoKeyId=0x3, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyGenerate returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyGenerate) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyGenerate was called with translated cryptoKeyId and correct source </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyDerive) asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
          <testrun date="2021-04-30 08:08:59" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="2">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyGenerate with cryIfKeyId </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyGenerate - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyDerive (cryptoKeyId=0x3, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyGenerate returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyGenerate) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyGenerate was called with translated cryptoKeyId and correct source </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyDerive) asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
          <testrun date="2021-04-30 08:08:59" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="2">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyGenerate with cryIfKeyId </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyGenerate - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyDerive (cryptoKeyId=0x3, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyGenerate returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyGenerate) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyGenerate was called with translated cryptoKeyId and correct source </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyDerive) asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-835D4E3A-CAEA-4FF3-81CB-72FE556DE5A0" id="TCASE-1081531" extId="" name="KeyExchangeCalcPubVal is dispatched to the Crypto Driver" ExecPlan="x">
          <description><![CDATA[*KeyExchangeCalcPubVal is dispatched to the Crypto Driver*

Asserts that the CryIf dispatches the KeyExchangeCalcPubVal to the corresponding Crypto Driver. Therefore, the cryIfKeyId must be translated correctly to cryptoKeyId.

Test Steps:
# Call CryIf_KeyExchangeCalcPubVal with cryIfKeyId, pointer to the buffer and the buffer length
# Assert that CryIf_KeyExchangeCalcPubVal returned E_OK
# Assert that Crypto_KeyExchangeCalcPubVal was called with translated cryptoKeyId and correct source. Assert that all other parameters stay the same.]]></description>
          <testrun date="2020-08-25 15:42:02" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyExchangeCalcPubVal with cryIfKeyId, pointer to the buffer and the buffer length </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyExchangeCalcPubVal - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyExchangeCalcPubVal (cryptoKeyId=0x3, publicValuePtr=0x9BD70C, src=Wrapper ,publicValueLengthPtr=0x2) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyExchangeCalcPubVal returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyExchangeCalcPubVal) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyExchangeCalcPubVal was called with translated cryptoKeyId and correct source Assert that all other parameters stay the same </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyExchangeCalcPubVal) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:19" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyExchangeCalcPubVal with cryIfKeyId, pointer to the buffer and the buffer length </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyExchangeCalcPubVal - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyExchangeCalcPubVal (cryptoKeyId=0x3, publicValuePtr=0x89D6EC, src=Wrapper ,publicValueLengthPtr=0x2) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyExchangeCalcPubVal returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyExchangeCalcPubVal) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyExchangeCalcPubVal was called with translated cryptoKeyId and correct source Assert that all other parameters stay the same </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyExchangeCalcPubVal) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:36" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyExchangeCalcPubVal with cryIfKeyId, pointer to the buffer and the buffer length </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyExchangeCalcPubVal - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyExchangeCalcPubVal (cryptoKeyId=0x3, publicValuePtr=0xD2D70C, src=Wrapper ,publicValueLengthPtr=0x2) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyExchangeCalcPubVal returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyExchangeCalcPubVal) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyExchangeCalcPubVal was called with translated cryptoKeyId and correct source Assert that all other parameters stay the same </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyExchangeCalcPubVal) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:53" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyExchangeCalcPubVal with cryIfKeyId, pointer to the buffer and the buffer length </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyExchangeCalcPubVal - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyExchangeCalcPubVal (cryptoKeyId=0x3, publicValuePtr=0xF8C70C, src=Wrapper ,publicValueLengthPtr=0x2) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyExchangeCalcPubVal returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyExchangeCalcPubVal) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyExchangeCalcPubVal was called with translated cryptoKeyId and correct source Assert that all other parameters stay the same </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyExchangeCalcPubVal) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>ok</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-C9635F7A-B1D3-45A3-9482-10AD67AE8366" id="TCASE-1082174" extId="" name="KeyExchangeCalcSecret is dispatched to the Crypto Driver" ExecPlan="x">
          <description><![CDATA[*KeyExchangeCalcSecret is dispatched to the Crypto Driver*

Asserts that the CryIf dispatches the KeyExchangeCalcSecret to the corresponding Crypto Driver. Therefore, the cryIfKeyId must be translated correctly to cryptoKeyId.

Test Steps:
# Call CryIf_KeyExchangeCalcSecret with cryIfKeyId, pointer to the buffer and the buffer length
# Assert that CryIf_KeyExchangeCalcSecret returned E_OK
# Assert that Crypto_KeyExchangeCalcSecret was called with translated cryptoKeyId, same buffer values, buffer length and correct source]]></description>
          <testrun date="2020-08-25 15:42:03" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyExchangeCalcSecret with cryIfKeyId, pointer to the buffer and the buffer length </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyExchangeCalcSecret - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyExchangeCalcPubVal (cryptoKeyId=0x3, partnerPublicValueLength=0x2, src=Wrapper, partnerPublicValuePtr=0x9AFC1C,) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyExchangeCalcSecret returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyExchangeCalcSecret) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyExchangeCalcSecret was called with translated cryptoKeyId, same buffer values, buffer length and correct source </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyExchangeCalcPubVal) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun parameter="config=.\Embedded\TestData_Storage\TestConfig2 " />
          <testrun date="2020-08-25 15:42:36" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyExchangeCalcSecret with cryIfKeyId, pointer to the buffer and the buffer length </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyExchangeCalcSecret - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyExchangeCalcPubVal (cryptoKeyId=0x3, partnerPublicValueLength=0x2, src=Wrapper, partnerPublicValuePtr=0xD1FC1C,) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyExchangeCalcSecret returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyExchangeCalcSecret) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyExchangeCalcSecret was called with translated cryptoKeyId, same buffer values, buffer length and correct source </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyExchangeCalcPubVal) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:53" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyExchangeCalcSecret with cryIfKeyId, pointer to the buffer and the buffer length </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyExchangeCalcSecret - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyExchangeCalcPubVal (cryptoKeyId=0x3, partnerPublicValueLength=0x2, src=Wrapper, partnerPublicValuePtr=0xF7EC1C,) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyExchangeCalcSecret returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyExchangeCalcSecret) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyExchangeCalcSecret was called with translated cryptoKeyId, same buffer values, buffer length and correct source </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyExchangeCalcPubVal) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>ok</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-5B784513-A2DD-41E0-B70A-9986AABA0629" id="TCASE-1082212" extId="" name="RandomSeed is dispatched to the Crypto Driver" ExecPlan="x">
          <description><![CDATA[*RandomSeed is dispatched to the Crypto Driver*

Asserts that the CryIf dispatches the RandomSeed to the corresponding Crypto Driver. Therefore, the cryIfKeyId must be translated correctly to cryptoKeyId.

Test Steps:
# Call CryIf_RandomSeed with cryIfKeyId, pointer to the buffer and the buffer length
# Assert that CryIf_RandomSeed returned E_OK
# Assert that Crypto_RandomSeed was called with translated cryptoKeyId. Assert that all other parameters stay the same.]]></description>
          <testrun date="2021-05-06 16:50:50" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="2">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_RandomSeed with cryIfKeyId, pointer to the buffer and the buffer length </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_RandomSeed - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyExchangeCalcPubVal (cryptoKeyId=0x3, seedPtr=0x9AFC1C, seedLength=0x2, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_RandomSeed returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_RandomSeed) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_RandomSeed was called with translated cryptoKeyId Assert that all other parameters stay the same </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyExchangeCalcPubVal) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>fail</result>
          </testrun>
          <testrun date="2021-05-06 16:50:50" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="2">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_RandomSeed with cryIfKeyId, pointer to the buffer and the buffer length </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_RandomSeed - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyExchangeCalcPubVal (cryptoKeyId=0x3, seedPtr=0x88FC1C, seedLength=0x2, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_RandomSeed returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_RandomSeed) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_RandomSeed was called with translated cryptoKeyId Assert that all other parameters stay the same </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyExchangeCalcPubVal) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>fail</result>
          </testrun>
          <testrun date="2021-05-07 08:13:33" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="3">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_RandomSeed with cryIfKeyId, pointer to the buffer and the buffer length </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_RandomSeed - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyExchangeCalcPubVal (cryptoKeyId=0x3, seedPtr=0xD1FC1C, seedLength=0x2, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_RandomSeed returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_RandomSeed) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_RandomSeed was called with translated cryptoKeyId Assert that all other parameters stay the same </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyExchangeCalcPubVal) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:53" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_RandomSeed with cryIfKeyId, pointer to the buffer and the buffer length </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_RandomSeed - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyExchangeCalcPubVal (cryptoKeyId=0x3, seedPtr=0xF7EC1C, seedLength=0x2, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_RandomSeed returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_RandomSeed) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_RandomSeed was called with translated cryptoKeyId Assert that all other parameters stay the same </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyExchangeCalcPubVal) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>ok</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-29BB0031-D863-47FF-AFA5-BDA7FF75D7F0" id="TCASE-1006867" extId="" name="KeyElementCopyPartial is dispatched to the Crypto Driver" ExecPlan="x">
          <description><![CDATA[*KeyElementCopyPartial is dispatched to the Crypto Driver*

Asserts that the CryIf dispatches the KeyElementCopyPartial to the corresponding Crypto Driver. Therefore, the cryIfKeyId and the targetCryIfKeyId must point to the same crypto driver and the crypto driver must be capable of the API Crypto_KeyElementCopyPartial.


Test Steps:
# Call CryIf_KeyElementCopyPartial with a keyId pointing to a crypto driver supporting KeyElementCopyPartial
# Assert that CryIf_KeyElementCopyPartial returned E_OK
# Assert that Crypto_KeyElementCopyPartial was called and both keyIds were converted correctly
]]></description>
          <testrun date="2020-08-25 15:42:02" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial with a keyId pointing to a crypto driver supporting KeyElementCopyPartial </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementCopyPartial (cryptoKeyId=0x0, keyElementId=0x1, keyElementSourceOffset=0x2, keyElementTargetOffset=0x2, keyElementCopyLength=0x1, targetCryptoKeyId=0x0, targetKeyElementId=0x1, src=LibCv) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopyPartial returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyElementCopyPartial was called and both keyIds were converted correctly </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementCopyPartial) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Target Crypto Key Id is as expected.: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="ok" time="0" caller="" callee=""> Target Key Element Id is as expected.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
              <Element type="ok" time="0" caller="" callee=""> Src is as expected.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:19" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial with a keyId pointing to a crypto driver supporting KeyElementCopyPartial </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementCopyPartial (cryptoKeyId=0x0, keyElementId=0x1, keyElementSourceOffset=0x2, keyElementTargetOffset=0x2, keyElementCopyLength=0x1, targetCryptoKeyId=0x0, targetKeyElementId=0x1, src=LibCv) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopyPartial returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyElementCopyPartial was called and both keyIds were converted correctly </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementCopyPartial) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Target Crypto Key Id is as expected.: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="ok" time="0" caller="" callee=""> Target Key Element Id is as expected.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
              <Element type="ok" time="0" caller="" callee=""> Src is as expected.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:35" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial with a keyId pointing to a crypto driver supporting KeyElementCopyPartial </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementCopyPartial (cryptoKeyId=0x0, keyElementId=0x1, keyElementSourceOffset=0x2, keyElementTargetOffset=0x2, keyElementCopyLength=0x1, targetCryptoKeyId=0x0, targetKeyElementId=0x1, src=LibCv) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopyPartial returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyElementCopyPartial was called and both keyIds were converted correctly </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementCopyPartial) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Target Crypto Key Id is as expected.: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="ok" time="0" caller="" callee=""> Target Key Element Id is as expected.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
              <Element type="ok" time="0" caller="" callee=""> Src is as expected.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:52" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial with a keyId pointing to a crypto driver supporting KeyElementCopyPartial </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementCopyPartial (cryptoKeyId=0x0, keyElementId=0x1, keyElementSourceOffset=0x2, keyElementTargetOffset=0x2, keyElementCopyLength=0x1, targetCryptoKeyId=0x0, targetKeyElementId=0x1, src=LibCv) (EventListElement 1) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopyPartial returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyElementCopyPartial was called and both keyIds were converted correctly </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementCopyPartial) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Target Crypto Key Id is as expected.: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="ok" time="0" caller="" callee=""> Target Key Element Id is as expected.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
              <Element type="ok" time="0" caller="" callee=""> Src is as expected.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>ok</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-68BC9645-DD5A-494A-A500-65EA47CD75D2" id="TCASE-1007895" extId="" name="KeyElementCopyPartial is handled locally if the driver does not support the API Crypto_KeyElementCopyPartial" ExecPlan="x">
          <description><![CDATA[*KeyElementCopyPartial is handled locally if the driver does not support the API Crypto_KeyElementCopyPartial*

Asserts that the CryIf itself implements the KeyElementCopyPartial functionality if the crypto driver is not capable of the Crypto_KeyElementCopyPartial API.


Test Steps:
# Call CryIf_KeyElementCopyPartial with a keyIds pointing to a crypto driver which does not support KeyElementCopyPartial
# Assert that CryIf_KeyElementCopyPartial returned E_OK
# Assert that Crypto_KeyElementGet was called with translated cryptoKeyId
# Assert that Crypto_KeyElementGet was called with translated targetCryptoKeyId
# Assert that Crypto_KeyElementSet was called with the correctly constructed partial key 
]]></description>
          <testrun date="2020-08-25 15:42:02" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial with a keyIds pointing to a crypto driver which does not support KeyElementCopyPartial </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 1) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 2) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementSet (cryptoKeyId=0x4, keyElementId=0x1, keyPtr=0x6B6EBE8, keyLength=0xA, src=Wrapper) (EventListElement 3) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopyPartial returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated targetCryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementSet was called with the correctly constructed partial key </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 3 (Crypto_KeyElementSet) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2021-05-06 16:51:03" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="2">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial with a keyIds pointing to a crypto driver which does not support KeyElementCopyPartial </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 1) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 2) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementSet (cryptoKeyId=0x4, keyElementId=0x1, keyPtr=0x6AFF2E4, keyLength=0xA, src=Wrapper) (EventListElement 3) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopyPartial returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated targetCryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementSet was called with the correctly constructed partial key </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 3 (Crypto_KeyElementSet) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>fail</result>
          </testrun>
          <testrun date="2020-08-25 15:42:35" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial with a keyIds pointing to a crypto driver which does not support KeyElementCopyPartial </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 1) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 2) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementSet (cryptoKeyId=0x4, keyElementId=0x1, keyPtr=0x6FF16C, keyLength=0xA, src=Wrapper) (EventListElement 3) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopyPartial returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated targetCryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementSet was called with the correctly constructed partial key </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 3 (Crypto_KeyElementSet) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:52" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial with a keyIds pointing to a crypto driver which does not support KeyElementCopyPartial </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 1) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 2) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementSet (cryptoKeyId=0x4, keyElementId=0x1, keyPtr=0x4FED38, keyLength=0xA, src=Wrapper) (EventListElement 3) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopyPartial returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated targetCryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementSet was called with the correctly constructed partial key </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 3 (Crypto_KeyElementSet) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>ok</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-C7991D65-CD2E-4451-ABF7-078D68CF8887" id="TCASE-1008081" extId="" name="KeyElementCopyPartial is handled locally if the cryIfKeyId and targetCryIfKeyId point to different crypto drivers." ExecPlan="x">
          <description><![CDATA[*KeyElementCopyPartial is handled locally if the cryIfKeyId and targetCryIfKeyId point to different crypto drivers.*

Asserts that the CryIf itself implements the KeyElementCopyPartial functionality if the crypto driver of keyId and targetKeyId are different.


Test Steps:
# Call CryIf_KeyElementCopyPartial with keyIds (cryIfKeyId and targetCryIfKeyId) pointing to different drivers
# Assert that CryIf_KeyElementCopyPartial returned E_OK
# Assert that Crypto_KeyElementGet was called with translated cryptoKeyId
# Assert that Crypto_KeyElementGet was called with translated targetCryptoKeyId
# Assert that Crypto_KeyElementSet was called with the correctly constructed partial key
]]></description>
          <testrun date="2020-08-25 15:42:02" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial with keyIds (cryIfKeyId and targetCryIfKeyId) pointing to different drivers </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 1) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x0, keyElementId=0x1, resultLength=0x190, src=LibCv) (EventListElement 2) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementSet (cryptoKeyId=0x0, keyElementId=0x1, keyPtr=0x6B6EBE8, keyLength=0xA, src=LibCv) (EventListElement 3) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopyPartial returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated targetCryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementSet was called with the correctly constructed partial key </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 3 (Crypto_KeyElementSet) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:19" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial with keyIds (cryIfKeyId and targetCryIfKeyId) pointing to different drivers </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 1) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x0, keyElementId=0x1, resultLength=0x190, src=LibCv) (EventListElement 2) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementSet (cryptoKeyId=0x0, keyElementId=0x1, keyPtr=0x6AFF2E4, keyLength=0xA, src=LibCv) (EventListElement 3) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopyPartial returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated targetCryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementSet was called with the correctly constructed partial key </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 3 (Crypto_KeyElementSet) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2021-05-06 16:51:35" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="2">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial with keyIds (cryIfKeyId and targetCryIfKeyId) pointing to different drivers </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 1) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x0, keyElementId=0x1, resultLength=0x190, src=LibCv) (EventListElement 2) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementSet (cryptoKeyId=0x0, keyElementId=0x1, keyPtr=0x6FF16C, keyLength=0xA, src=LibCv) (EventListElement 3) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopyPartial returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated targetCryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementSet was called with the correctly constructed partial key </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 3 (Crypto_KeyElementSet) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>warn</result>
            <justification date="2021-05-06 16:51:40">
              <text>text</text>
            </justification>
          </testrun>
          <testrun date="2020-08-25 15:42:52" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial with keyIds (cryIfKeyId and targetCryIfKeyId) pointing to different drivers </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 1) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x0, keyElementId=0x1, resultLength=0x190, src=LibCv) (EventListElement 2) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementSet (cryptoKeyId=0x0, keyElementId=0x1, keyPtr=0x4FED38, keyLength=0xA, src=LibCv) (EventListElement 3) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopyPartial returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated targetCryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementSet was called with the correctly constructed partial key </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 3 (Crypto_KeyElementSet) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>ok</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-41F5C81F-6D65-45DF-BA7C-D086A5A2D8F0" id="TCASE-1008080" extId="" name="KeyElementCopyPartial copies the source key partially to the target key if the target key is empty." ExecPlan="x">
          <description><![CDATA[*KeyElementCopyPartial copies the source key partially to the target key if the target key is empty.*

Asserts that KeyElementCopyPartial does not fail if the target key is empty. KeyElementCopyPartial is handled locally.

Test Steps:
# Prepare: Manipulate Crypto_KeyElementGet for the target key id to return CRYPTO_E_KEY_EMPTY
# Call CryIf_KeyElementCopyPartial
# Assert that CryIf_KeyElementCopyPartial returned E_OK.
# Assert that Crypto_KeyElementGet was called with translated cryptoKeyId
# Assert that Crypto_KeyElementGet was called with translated targetCryptoKeyId
# Assert that Crypto_KeyElementSet was called with the correctly constructed partial key ]]></description>
          <testrun date="2020-08-25 15:42:02" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementGet for the target key id to return CRYPTO_E_KEY_EMPTY </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 1) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 2) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementSet (cryptoKeyId=0x4, keyElementId=0x1, keyPtr=0x6B6EBE8, keyLength=0x6, src=Wrapper) (EventListElement 3) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopyPartial returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated targetCryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 6" time="0" caller="" callee=""> Assert that Crypto_KeyElementSet was called with the correctly constructed partial key </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 3 (Crypto_KeyElementSet) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2021-05-06 16:50:59" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="2">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementGet for the target key id to return CRYPTO_E_KEY_EMPTY </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 1) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 2) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementSet (cryptoKeyId=0x4, keyElementId=0x1, keyPtr=0x6AFF2E4, keyLength=0x6, src=Wrapper) (EventListElement 3) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopyPartial returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated targetCryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 6" time="0" caller="" callee=""> Assert that Crypto_KeyElementSet was called with the correctly constructed partial key </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 3 (Crypto_KeyElementSet) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>warn</result>
          </testrun>
          <testrun date="2020-08-25 15:42:35" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementGet for the target key id to return CRYPTO_E_KEY_EMPTY </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 1) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 2) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementSet (cryptoKeyId=0x4, keyElementId=0x1, keyPtr=0x6FF16C, keyLength=0x6, src=Wrapper) (EventListElement 3) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopyPartial returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated targetCryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 6" time="0" caller="" callee=""> Assert that Crypto_KeyElementSet was called with the correctly constructed partial key </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 3 (Crypto_KeyElementSet) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:52" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementGet for the target key id to return CRYPTO_E_KEY_EMPTY </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 1) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 2) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementSet (cryptoKeyId=0x4, keyElementId=0x1, keyPtr=0x4FED38, keyLength=0x6, src=Wrapper) (EventListElement 3) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopyPartial returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated targetCryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 6" time="0" caller="" callee=""> Assert that Crypto_KeyElementSet was called with the correctly constructed partial key </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 3 (Crypto_KeyElementSet) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>ok</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-18A73359-FDA8-4D42-B036-6F8CB14F88BA" id="TCASE-1008082" extId="" name="KeyElementCopyPartial copies the source key partially to the target key even if the initial target key length is smaller then the constructed target key length." ExecPlan="x">
          <description><![CDATA[*KeyElementCopyPartial copies the source key partially to the target key even if the initial target key length is smaller then the constructed target key length.*

Asserts that KeyElementCopyPartial does not fail if the initial target key length is smaller then the constructed target key length. KeyElementCopyPartial is handled locally.

Test Steps:
# Call CryIf_KeyElementCopyPartial
# Assert that CryIf_KeyElementCopyPartial returned E_OK.
# Assert that Crypto_KeyElementGet was called with translated cryptoKeyId
# Assert that Crypto_KeyElementGet was called with translated targetCryptoKeyId
# Assert that Crypto_KeyElementSet was called with the correctly constructed partial key]]></description>
          <testrun date="2020-08-25 15:42:02" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 1) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 2) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementSet (cryptoKeyId=0x4, keyElementId=0x1, keyPtr=0x6B6EBE8, keyLength=0xA, src=Wrapper) (EventListElement 3) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopyPartial returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated targetCryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementSet was called with the correctly constructed partial key </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 3 (Crypto_KeyElementSet) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2021-05-06 16:51:28" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="2">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 1) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 2) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementSet (cryptoKeyId=0x4, keyElementId=0x1, keyPtr=0x6AFF2E4, keyLength=0xA, src=Wrapper) (EventListElement 3) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopyPartial returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated targetCryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementSet was called with the correctly constructed partial key </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 3 (Crypto_KeyElementSet) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>N/A</result>
          </testrun>
          <testrun date="2021-05-06 16:51:23" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="2">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 1) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 2) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementSet (cryptoKeyId=0x4, keyElementId=0x1, keyPtr=0x6FF16C, keyLength=0xA, src=Wrapper) (EventListElement 3) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopyPartial returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated targetCryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementSet was called with the correctly constructed partial key </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 3 (Crypto_KeyElementSet) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>N/A</result>
          </testrun>
          <testrun date="2020-08-25 15:42:52" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 1) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 2) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementSet (cryptoKeyId=0x4, keyElementId=0x1, keyPtr=0x4FED38, keyLength=0xA, src=Wrapper) (EventListElement 3) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopyPartial returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated targetCryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementSet was called with the correctly constructed partial key </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 3 (Crypto_KeyElementSet) asserted. </Element>
              <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
            </log>
            <result>ok</result>
          </testrun>
        </testcase>
      </testgroup>
      <testgroup name="Redirection">
        <testcase almplusGUID="TCASE-FB6EBBA9-3F91-4337-87EB-85D1E69EC1A4" id="TCASE-1006640" extId="" name="CryIf correctly translates CryIf keyIds to Crypto Key Ids for Redirection" ExecPlan="x">
          <description><![CDATA[*CryIf correctly translates CryIf keyIds to Crypto Key Ids for Redirection*

Asserts that the CryIf translates CryIf keyIds correctly to Crypto Key Ids if redirection is configured on corresponding job.

Precondition:
* Redirection must be enabled

Test Steps:
# Prepare: Generate Job redirecting in- and outputs
# Call CryIf_ProcessJob with generated job
# Assert that CryIf_ProcessJob returned E_OK
# Assert that Crypto_ProcessJob was called
# Assert that redirection keyIds were translated correctly
]]></description>
          <testrun date="2020-08-25 15:42:02" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Redirection must be enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: Generate Job redirecting in and outputs </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_ProcessJob with generated job </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_ProcessJob - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_ProcessJob (objectId=0x0, src =LibCv, Job=0x9C2D70) (EventListElement 1) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that CryIf_ProcessJob returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_ProcessJob) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_ProcessJob was called </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_ProcessJob) asserted. </Element>
              <Element type="TestStep 6" time="0" caller="" callee=""> Assert that redirection keyIds were translated correctly </Element>
              <Element type="ok" time="0" caller="" callee=""> Redirection reference is not NULL </Element>
              <Element type="ok" time="0" caller="" callee=""> Input Key Element Id stays the same: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="ok" time="0" caller="" callee=""> Input Key Id was converted correctly: current value: 25 (0x19) == expected value 25 (0x19) </Element>
              <Element type="ok" time="0" caller="" callee=""> Secondary Input Key Element Id stays the same: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="ok" time="0" caller="" callee=""> Secondary Input Key Id was converted correctly: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="ok" time="0" caller="" callee=""> Tertiary Input Key Element Id stays the same: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="ok" time="0" caller="" callee=""> Tertiary Input Key Id was converted correctly: current value: 3 (0x03) == expected value 3 (0x03) </Element>
              <Element type="ok" time="0" caller="" callee=""> Output Key Element Id stays the same: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="ok" time="0" caller="" callee=""> Output Key Id was converted correctly: current value: 2 (0x02) == expected value 2 (0x02) </Element>
              <Element type="ok" time="0" caller="" callee=""> Secondary Output Key Element Id stays the same: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="ok" time="0" caller="" callee=""> Secondary Output Key Id was converted correctly: current value: 4 (0x04) == expected value 4 (0x04) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:19" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Redirection must be enabled </Element>
              <NA_Text>Switch CRYIF_REDIRECTION is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
          <testrun date="2020-08-25 15:42:35" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Redirection must be enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: Generate Job redirecting in and outputs </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_ProcessJob with generated job </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_ProcessJob - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_ProcessJob (objectId=0x0, src =LibCv, Job=0xD32D70) (EventListElement 1) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that CryIf_ProcessJob returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_ProcessJob) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_ProcessJob was called </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_ProcessJob) asserted. </Element>
              <Element type="TestStep 6" time="0" caller="" callee=""> Assert that redirection keyIds were translated correctly </Element>
              <Element type="ok" time="0" caller="" callee=""> Redirection reference is not NULL </Element>
              <Element type="ok" time="0" caller="" callee=""> Input Key Element Id stays the same: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="ok" time="0" caller="" callee=""> Input Key Id was converted correctly: current value: 25 (0x19) == expected value 25 (0x19) </Element>
              <Element type="ok" time="0" caller="" callee=""> Secondary Input Key Element Id stays the same: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="ok" time="0" caller="" callee=""> Secondary Input Key Id was converted correctly: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="ok" time="0" caller="" callee=""> Tertiary Input Key Element Id stays the same: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="ok" time="0" caller="" callee=""> Tertiary Input Key Id was converted correctly: current value: 3 (0x03) == expected value 3 (0x03) </Element>
              <Element type="ok" time="0" caller="" callee=""> Output Key Element Id stays the same: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="ok" time="0" caller="" callee=""> Output Key Id was converted correctly: current value: 2 (0x02) == expected value 2 (0x02) </Element>
              <Element type="ok" time="0" caller="" callee=""> Secondary Output Key Element Id stays the same: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="ok" time="0" caller="" callee=""> Secondary Output Key Id was converted correctly: current value: 4 (0x04) == expected value 4 (0x04) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:52" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Redirection must be enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: Generate Job redirecting in and outputs </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_ProcessJob with generated job </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_ProcessJob - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_ProcessJob (objectId=0x0, src =LibCv, Job=0xF91C50) (EventListElement 1) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that CryIf_ProcessJob returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_ProcessJob) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_ProcessJob was called </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_ProcessJob) asserted. </Element>
              <Element type="TestStep 6" time="0" caller="" callee=""> Assert that redirection keyIds were translated correctly </Element>
              <Element type="ok" time="0" caller="" callee=""> Redirection reference is not NULL </Element>
              <Element type="ok" time="0" caller="" callee=""> Input Key Element Id stays the same: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="ok" time="0" caller="" callee=""> Input Key Id was converted correctly: current value: 25 (0x19) == expected value 25 (0x19) </Element>
              <Element type="ok" time="0" caller="" callee=""> Secondary Input Key Element Id stays the same: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="ok" time="0" caller="" callee=""> Secondary Input Key Id was converted correctly: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="ok" time="0" caller="" callee=""> Tertiary Input Key Element Id stays the same: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="ok" time="0" caller="" callee=""> Tertiary Input Key Id was converted correctly: current value: 3 (0x03) == expected value 3 (0x03) </Element>
              <Element type="ok" time="0" caller="" callee=""> Output Key Element Id stays the same: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="ok" time="0" caller="" callee=""> Output Key Id was converted correctly: current value: 2 (0x02) == expected value 2 (0x02) </Element>
              <Element type="ok" time="0" caller="" callee=""> Secondary Output Key Element Id stays the same: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="ok" time="0" caller="" callee=""> Secondary Output Key Id was converted correctly: current value: 4 (0x04) == expected value 4 (0x04) </Element>
            </log>
            <result>ok</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-0056F96A-7D05-4F1F-9420-BB6AC019710E" id="TCASE-1006859" extId="" name="CryIf does not manipulate Redirection table if mask is not enabled." ExecPlan="x">
          <description><![CDATA[*CryIf does not manipulate Redirection table if mask is not enabled.*

Asserts that the CryIf does not manipulate the redirection table if the mask zero. This means that no redirection shall take place.

Precondition:
* Redirection must be enabled

Test Steps:
# Prepare: Generate Job redirecting in- and outputs with disabled redirection mask
# Call CryIf_ProcessJob with generated job
# Assert that CryIf_ProcessJob returned E_OK
# Assert that Crypto_ProcessJob was called
# Assert that redirection keyIds stay the same
]]></description>
          <testrun date="2020-08-25 15:42:02" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Redirection must be enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: Generate Job redirecting in and outputs with disabled redirection mask </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_ProcessJob with generated job </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_ProcessJob - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_ProcessJob (objectId=0x0, src =LibCv, Job=0x9C2D70) (EventListElement 1) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that CryIf_ProcessJob returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_ProcessJob) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_ProcessJob was called </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_ProcessJob) asserted. </Element>
              <Element type="TestStep 6" time="0" caller="" callee=""> Assert that redirection keyIds stay the same </Element>
              <Element type="ok" time="0" caller="" callee=""> Redirection reference is not NULL </Element>
              <Element type="ok" time="0" caller="" callee=""> Input Key Element Id stays the same: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="ok" time="0" caller="" callee=""> Input Key Id stays the same: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="ok" time="0" caller="" callee=""> Secondary Input Key Element Id stays the same: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="ok" time="0" caller="" callee=""> Secondary Input Key Id stays the same: current value: 1 (0x01) == expected value 1 (0x01) </Element>
              <Element type="ok" time="0" caller="" callee=""> Tertiary Input Key Element Id stays the same: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="ok" time="0" caller="" callee=""> Tertiary Input Key Id stays the same: current value: 2 (0x02) == expected value 2 (0x02) </Element>
              <Element type="ok" time="0" caller="" callee=""> Output Key Element Id stays the same: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="ok" time="0" caller="" callee=""> Output Key Id stays the same: current value: 3 (0x03) == expected value 3 (0x03) </Element>
              <Element type="ok" time="0" caller="" callee=""> Secondary Output Key Element Id stays the same: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="ok" time="0" caller="" callee=""> Secondary Output Key Id stays the same: current value: 4 (0x04) == expected value 4 (0x04) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:19" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Redirection must be enabled </Element>
              <NA_Text>Switch CRYIF_REDIRECTION is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
          <testrun date="2020-08-25 15:42:35" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Redirection must be enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: Generate Job redirecting in and outputs with disabled redirection mask </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_ProcessJob with generated job </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_ProcessJob - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_ProcessJob (objectId=0x0, src =LibCv, Job=0xD32D70) (EventListElement 1) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that CryIf_ProcessJob returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_ProcessJob) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_ProcessJob was called </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_ProcessJob) asserted. </Element>
              <Element type="TestStep 6" time="0" caller="" callee=""> Assert that redirection keyIds stay the same </Element>
              <Element type="ok" time="0" caller="" callee=""> Redirection reference is not NULL </Element>
              <Element type="ok" time="0" caller="" callee=""> Input Key Element Id stays the same: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="ok" time="0" caller="" callee=""> Input Key Id stays the same: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="ok" time="0" caller="" callee=""> Secondary Input Key Element Id stays the same: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="ok" time="0" caller="" callee=""> Secondary Input Key Id stays the same: current value: 1 (0x01) == expected value 1 (0x01) </Element>
              <Element type="ok" time="0" caller="" callee=""> Tertiary Input Key Element Id stays the same: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="ok" time="0" caller="" callee=""> Tertiary Input Key Id stays the same: current value: 2 (0x02) == expected value 2 (0x02) </Element>
              <Element type="ok" time="0" caller="" callee=""> Output Key Element Id stays the same: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="ok" time="0" caller="" callee=""> Output Key Id stays the same: current value: 3 (0x03) == expected value 3 (0x03) </Element>
              <Element type="ok" time="0" caller="" callee=""> Secondary Output Key Element Id stays the same: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="ok" time="0" caller="" callee=""> Secondary Output Key Id stays the same: current value: 4 (0x04) == expected value 4 (0x04) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:52" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Redirection must be enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: Generate Job redirecting in and outputs with disabled redirection mask </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_ProcessJob with generated job </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_ProcessJob - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_ProcessJob (objectId=0x0, src =LibCv, Job=0xF91C50) (EventListElement 1) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that CryIf_ProcessJob returned E_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_ProcessJob) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_ProcessJob was called </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_ProcessJob) asserted. </Element>
              <Element type="TestStep 6" time="0" caller="" callee=""> Assert that redirection keyIds stay the same </Element>
              <Element type="ok" time="0" caller="" callee=""> Redirection reference is not NULL </Element>
              <Element type="ok" time="0" caller="" callee=""> Input Key Element Id stays the same: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="ok" time="0" caller="" callee=""> Input Key Id stays the same: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="ok" time="0" caller="" callee=""> Secondary Input Key Element Id stays the same: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="ok" time="0" caller="" callee=""> Secondary Input Key Id stays the same: current value: 1 (0x01) == expected value 1 (0x01) </Element>
              <Element type="ok" time="0" caller="" callee=""> Tertiary Input Key Element Id stays the same: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="ok" time="0" caller="" callee=""> Tertiary Input Key Id stays the same: current value: 2 (0x02) == expected value 2 (0x02) </Element>
              <Element type="ok" time="0" caller="" callee=""> Output Key Element Id stays the same: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="ok" time="0" caller="" callee=""> Output Key Id stays the same: current value: 3 (0x03) == expected value 3 (0x03) </Element>
              <Element type="ok" time="0" caller="" callee=""> Secondary Output Key Element Id stays the same: current value: 0 (0x00) == expected value 0 (0x00) </Element>
              <Element type="ok" time="0" caller="" callee=""> Secondary Output Key Id stays the same: current value: 4 (0x04) == expected value 4 (0x04) </Element>
            </log>
            <result>ok</result>
          </testrun>
        </testcase>
      </testgroup>
    </testgroup>
    <testgroup name="States">
      <description><![CDATA[
Intentionally left empty]]></description>
    </testgroup>
    <testgroup name="Usage Scenarios">
      <description><![CDATA[
Intentionally left empty]]></description>
    </testgroup>
  </testgroup>
  <testgroup name="Test of component abstract design">
    <testgroup name="Test of subcomponent interfaces">
      <description><![CDATA[
Intentionally left empty]]></description>
    </testgroup>
    <testgroup name="Test of state-machines">
      <description><![CDATA[
Intentionally left empty]]></description>
    </testgroup>
    <testgroup name="Test of sequences">
      <description><![CDATA[
Intentionally left empty]]></description>
    </testgroup>
  </testgroup>
  <testgroup name="Test of component detailed design">
    <testgroup name="Key Copy Function">
      <testcase almplusGUID="TCASE-BC183AAB-5078-4C82-82F1-AD37CD607637" id="TCASE-530825" extId="" name="KeyElementCopy - Different crypto drivers with failure when setting key element" ExecPlan="x">
        <description><![CDATA[*KeyElementCopy - Different crypto drivers with failure when setting key element*

Asserts that the CryIf forwards the error code of the underlying Crypto_KeyElementSet call.
Therefore, the cryIfKeyId and the targetCryIfKeyId must point to different Crypto Drivers and KeyElementSet must be manipulated.

Test Steps:
# Prepare: Manipulate Crypto_KeyElementSet to return E_NOT_OK
# Prepare: Manipulate Crypto_KeyElementGet to return data values
# Call CryIf_KeyElementCopy with keyIds on different crypto drivers
# Assert that CryIf_KeyElementCopy returned E_NOT_OK
# Assert that Crypto_KeyElementGet was called with translated cryptoKeyId, keyElementId, length and correct source
# Assert that Crypto_KeyElementSet was called with translated cryptoKeyId and correct source. Assert that all other parameters stay the same.]]></description>
        <testrun date="2020-08-25 15:42:03" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
          <log>
            <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
            <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementSet to return E_NOT_OK </Element>
            <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementGet to return data values </Element>
            <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
            <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyElementCopy with keyIds on different crypto drivers </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopy - (EventListElement 0) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x3, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 1) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementSet (cryptoKeyId=0x0, keyElementId=0x2, keyPtr=0x6B6EDCC, keyLength=0xA, src=LibCv) (EventListElement 2) </Element>
            <Element type="TestStep 4" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopy returned E_NOT_OK </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopy) asserted. </Element>
            <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId, keyElementId, length and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
            <Element type="TestStep 6" time="0" caller="" callee=""> Assert that Crypto_KeyElementSet was called with translated cryptoKeyId and correct source Assert that all other parameters stay the same </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementSet) asserted. </Element>
            <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
          </log>
          <result>ok</result>
        </testrun>
        <testrun date="2020-08-25 15:42:20" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
          <log>
            <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
            <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementSet to return E_NOT_OK </Element>
            <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementGet to return data values </Element>
            <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
            <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyElementCopy with keyIds on different crypto drivers </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopy - (EventListElement 0) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x3, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 1) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementSet (cryptoKeyId=0x0, keyElementId=0x2, keyPtr=0x6AFF4C8, keyLength=0xA, src=LibCv) (EventListElement 2) </Element>
            <Element type="TestStep 4" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopy returned E_NOT_OK </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopy) asserted. </Element>
            <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId, keyElementId, length and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
            <Element type="TestStep 6" time="0" caller="" callee=""> Assert that Crypto_KeyElementSet was called with translated cryptoKeyId and correct source Assert that all other parameters stay the same </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementSet) asserted. </Element>
            <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
          </log>
          <result>ok</result>
        </testrun>
        <testrun date="2020-08-25 15:42:36" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
          <log>
            <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
            <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementSet to return E_NOT_OK </Element>
            <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementGet to return data values </Element>
            <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
            <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyElementCopy with keyIds on different crypto drivers </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopy - (EventListElement 0) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x3, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 1) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementSet (cryptoKeyId=0x0, keyElementId=0x2, keyPtr=0x6FF350, keyLength=0xA, src=LibCv) (EventListElement 2) </Element>
            <Element type="TestStep 4" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopy returned E_NOT_OK </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopy) asserted. </Element>
            <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId, keyElementId, length and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
            <Element type="TestStep 6" time="0" caller="" callee=""> Assert that Crypto_KeyElementSet was called with translated cryptoKeyId and correct source Assert that all other parameters stay the same </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementSet) asserted. </Element>
            <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
          </log>
          <result>ok</result>
        </testrun>
        <testrun date="2020-08-25 15:42:53" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
          <log>
            <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
            <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementSet to return E_NOT_OK </Element>
            <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementGet to return data values </Element>
            <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
            <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyElementCopy with keyIds on different crypto drivers </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopy - (EventListElement 0) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x3, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 1) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementSet (cryptoKeyId=0x0, keyElementId=0x2, keyPtr=0x4FEF1C, keyLength=0xA, src=LibCv) (EventListElement 2) </Element>
            <Element type="TestStep 4" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopy returned E_NOT_OK </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopy) asserted. </Element>
            <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId, keyElementId, length and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
            <Element type="TestStep 6" time="0" caller="" callee=""> Assert that Crypto_KeyElementSet was called with translated cryptoKeyId and correct source Assert that all other parameters stay the same </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementSet) asserted. </Element>
            <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
          </log>
          <result>ok</result>
        </testrun>
      </testcase>
      <testcase almplusGUID="TCASE-7A3C8A6D-CE3A-48F4-A87F-243030DB194D" id="TCASE-530826" extId="" name="KeyElementCopy - Different crypto drivers with failure when getting key element" ExecPlan="x">
        <description><![CDATA[*KeyElementCopy - Different crypto drivers with failure when getting key element*

Asserts that the CryIf forwards the error code of the underlying Crypto_KeyElementGet call. Therefore, the cryIfKeyId and the targetCryIfKeyId must point to different Crypto Drivers and KeyElementGet must be manipulated.

Test Steps:
# Prepare: Manipulate Crypto_KeyElementGet to return E_NOT_OK
# Prepare: Manipulate Crypto_KeyElementGet to return data values
# Call CryIf_KeyElementCopy with keyIds on different crypto drivers
# Assert that CryIf_KeyElementCopy returned E_NOT_OK
# Assert that Crypto_KeyElementGet was called with translated cryptoKeyId, keyElementId, length and correct source
]]></description>
        <testrun date="2020-08-25 15:42:03" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
          <log>
            <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
            <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementGet to return E_NOT_OK </Element>
            <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementGet to return data values </Element>
            <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
            <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyElementCopy with keyIds on different crypto drivers </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopy - (EventListElement 0) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x3, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 1) </Element>
            <Element type="TestStep 4" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopy returned E_NOT_OK </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopy) asserted. </Element>
            <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId, keyElementId, length and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
          </log>
          <result>ok</result>
        </testrun>
        <testrun date="2020-08-25 15:42:20" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
          <log>
            <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
            <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementGet to return E_NOT_OK </Element>
            <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementGet to return data values </Element>
            <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
            <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyElementCopy with keyIds on different crypto drivers </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopy - (EventListElement 0) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x3, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 1) </Element>
            <Element type="TestStep 4" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopy returned E_NOT_OK </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopy) asserted. </Element>
            <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId, keyElementId, length and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
          </log>
          <result>ok</result>
        </testrun>
        <testrun date="2020-08-25 15:42:36" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
          <log>
            <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
            <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementGet to return E_NOT_OK </Element>
            <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementGet to return data values </Element>
            <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
            <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyElementCopy with keyIds on different crypto drivers </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopy - (EventListElement 0) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x3, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 1) </Element>
            <Element type="TestStep 4" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopy returned E_NOT_OK </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopy) asserted. </Element>
            <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId, keyElementId, length and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
          </log>
          <result>ok</result>
        </testrun>
        <testrun date="2020-08-25 15:42:53" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
          <log>
            <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
            <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementGet to return E_NOT_OK </Element>
            <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementGet to return data values </Element>
            <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
            <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyElementCopy with keyIds on different crypto drivers </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopy - (EventListElement 0) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x3, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 1) </Element>
            <Element type="TestStep 4" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopy returned E_NOT_OK </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopy) asserted. </Element>
            <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId, keyElementId, length and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
          </log>
          <result>ok</result>
        </testrun>
      </testcase>
      <testcase almplusGUID="TCASE-14252AB1-FC39-4EB3-BA48-59388A3A240A" id="TCASE-530831" extId="" name="KeyCopy - Different crypto drivers with failure when getting key element" ExecPlan="x">
        <description><![CDATA[*KeyCopy - Different crypto drivers with failure when getting key element*

Asserts that the CryIf forwards the error code of the underlying Crypto_KeyElementGet call. Therefore, the cryIfKeyId and the targetCryIfKeyId must point to different Crypto Drivers and KeyElementGet must be manipulated.

Test Steps:
# Prepare: Manipulate Crypto_KeyElementGet to return E_NOT_OK
# Prepare: Manipulate Crypto_KeyElementIdsGet and Crypto_KeyElementGet to return data values
# Call CryIf_KeyCopy with keyIds on different crypto drivers
# Assert that CryIf_KeyCopy returned E_NOT_OK
# Assert that Crypto_KeyElementIdsGet was called with translated cryptoKeyId, keyElementId and correct source
# Assert that Crypto_KeyElementIdsGet was called with translated targetCryptoKeyId, targetKeyElementId and correct source
# Assert that Crypto_KeyElementGet was called with translated cryptoKeyId, keyElementId, length and correct source

]]></description>
        <testrun date="2020-08-25 15:42:03" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
          <log>
            <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
            <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementGet to return E_NOT_OK </Element>
            <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementIdsGet and Crypto_KeyElementGet to return data values </Element>
            <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
            <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyCopy with keyIds on different crypto drivers </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyCopy - (EventListElement 0) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementIdsGet (cryptoKeyId=0x3, keyElementIds=0x6B6ED3C, keyElementIdsLengthPtr=0x1E, src=Wrapper) (EventListElement 1) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementIdsGet (cryptoKeyId=0x0, keyElementIds=0x6B6ECB0, keyElementIdsLengthPtr=0x1E, src=LibCv) (EventListElement 2) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x3, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 3) </Element>
            <Element type="TestStep 4" time="0" caller="" callee=""> Assert that CryIf_KeyCopy returned E_NOT_OK </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyCopy) asserted. </Element>
            <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementIdsGet was called with translated cryptoKeyId, keyElementId and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementIdsGet) asserted. </Element>
            <Element type="TestStep 6" time="0" caller="" callee=""> Assert that Crypto_KeyElementIdsGet was called with translated targetCryptoKeyId, targetKeyElementId and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementIdsGet) asserted. </Element>
            <Element type="TestStep 7" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId, keyElementId, length and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 3 (Crypto_KeyElementGet) asserted. </Element>
          </log>
          <result>ok</result>
        </testrun>
        <testrun date="2020-08-25 15:42:20" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
          <log>
            <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
            <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementGet to return E_NOT_OK </Element>
            <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementIdsGet and Crypto_KeyElementGet to return data values </Element>
            <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
            <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyCopy with keyIds on different crypto drivers </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyCopy - (EventListElement 0) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementIdsGet (cryptoKeyId=0x3, keyElementIds=0x6AFF438, keyElementIdsLengthPtr=0x1E, src=Wrapper) (EventListElement 1) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementIdsGet (cryptoKeyId=0x0, keyElementIds=0x6AFF3AC, keyElementIdsLengthPtr=0x1E, src=LibCv) (EventListElement 2) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x3, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 3) </Element>
            <Element type="TestStep 4" time="0" caller="" callee=""> Assert that CryIf_KeyCopy returned E_NOT_OK </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyCopy) asserted. </Element>
            <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementIdsGet was called with translated cryptoKeyId, keyElementId and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementIdsGet) asserted. </Element>
            <Element type="TestStep 6" time="0" caller="" callee=""> Assert that Crypto_KeyElementIdsGet was called with translated targetCryptoKeyId, targetKeyElementId and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementIdsGet) asserted. </Element>
            <Element type="TestStep 7" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId, keyElementId, length and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 3 (Crypto_KeyElementGet) asserted. </Element>
          </log>
          <result>ok</result>
        </testrun>
        <testrun date="2020-08-25 15:42:36" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
          <log>
            <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
            <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementGet to return E_NOT_OK </Element>
            <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementIdsGet and Crypto_KeyElementGet to return data values </Element>
            <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
            <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyCopy with keyIds on different crypto drivers </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyCopy - (EventListElement 0) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementIdsGet (cryptoKeyId=0x3, keyElementIds=0x6FF2C0, keyElementIdsLengthPtr=0x1E, src=Wrapper) (EventListElement 1) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementIdsGet (cryptoKeyId=0x0, keyElementIds=0x6FF234, keyElementIdsLengthPtr=0x1E, src=LibCv) (EventListElement 2) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x3, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 3) </Element>
            <Element type="TestStep 4" time="0" caller="" callee=""> Assert that CryIf_KeyCopy returned E_NOT_OK </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyCopy) asserted. </Element>
            <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementIdsGet was called with translated cryptoKeyId, keyElementId and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementIdsGet) asserted. </Element>
            <Element type="TestStep 6" time="0" caller="" callee=""> Assert that Crypto_KeyElementIdsGet was called with translated targetCryptoKeyId, targetKeyElementId and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementIdsGet) asserted. </Element>
            <Element type="TestStep 7" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId, keyElementId, length and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 3 (Crypto_KeyElementGet) asserted. </Element>
          </log>
          <result>ok</result>
        </testrun>
        <testrun date="2020-08-25 15:42:53" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
          <log>
            <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
            <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementGet to return E_NOT_OK </Element>
            <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementIdsGet and Crypto_KeyElementGet to return data values </Element>
            <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
            <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyCopy with keyIds on different crypto drivers </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyCopy - (EventListElement 0) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementIdsGet (cryptoKeyId=0x3, keyElementIds=0x4FEE8C, keyElementIdsLengthPtr=0x1E, src=Wrapper) (EventListElement 1) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementIdsGet (cryptoKeyId=0x0, keyElementIds=0x4FEE00, keyElementIdsLengthPtr=0x1E, src=LibCv) (EventListElement 2) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x3, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 3) </Element>
            <Element type="TestStep 4" time="0" caller="" callee=""> Assert that CryIf_KeyCopy returned E_NOT_OK </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyCopy) asserted. </Element>
            <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementIdsGet was called with translated cryptoKeyId, keyElementId and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementIdsGet) asserted. </Element>
            <Element type="TestStep 6" time="0" caller="" callee=""> Assert that Crypto_KeyElementIdsGet was called with translated targetCryptoKeyId, targetKeyElementId and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementIdsGet) asserted. </Element>
            <Element type="TestStep 7" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId, keyElementId, length and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 3 (Crypto_KeyElementGet) asserted. </Element>
          </log>
          <result>ok</result>
        </testrun>
      </testcase>
      <testcase almplusGUID="TCASE-988932FA-9AB9-42BF-A821-7D9126C23828" id="TCASE-530830" extId="" name="Key Copy - Different crypto drivers with failure when setting key element" ExecPlan="x">
        <description><![CDATA[*Key Copy - Different crypto drivers with failure when setting key element*

Asserts that the CryIf forwards the error code of the underlying Crypto_KeyElementSet call. Therefore, the cryIfKeyId and the targetCryIfKeyId must point to different Crypto Drivers and KeyElementSet must be manipulated.

Test Steps:
# Prepare: Manipulate return code of Crypto_KeyElementSet to E_NOT_OK 
# Prepare: Manipulate Crypto_KeyElementIdsGet and Crypto_KeyElementGet to return data values
# Call CryIf_KeyCopy with keyIds on different crypto drivers
# Assert that CryIf_KeyCopy returned E_NOT_OK
# Assert that Crypto_KeyElementIdsGet was called with translated cryptoKeyId, keyElementId and correct source
# Assert that Crypto_KeyElementIdsGet was called with translated targetCryptoKeyId, targetKeyElementId and correct source
# Assert that Crypto_KeyElementGet was called with translated cryptoKeyId, keyElementId, length and correct source
# Assert that Crypto_KeyElementSet was called with translated cryptoKeyId and correct source. Assert that all other parameters stay the same.]]></description>
        <testrun date="2020-08-25 15:42:03" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
          <log>
            <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
            <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate return code of Crypto_KeyElementSet to E_NOT_OK </Element>
            <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementIdsGet and Crypto_KeyElementGet to return data values </Element>
            <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
            <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyCopy with keyIds on different crypto drivers </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyCopy - (EventListElement 0) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementIdsGet (cryptoKeyId=0x3, keyElementIds=0x6B6ED3C, keyElementIdsLengthPtr=0x1E, src=Wrapper) (EventListElement 1) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementIdsGet (cryptoKeyId=0x0, keyElementIds=0x6B6ECB0, keyElementIdsLengthPtr=0x1E, src=LibCv) (EventListElement 2) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x3, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 3) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementSet (cryptoKeyId=0x0, keyElementId=0x1, keyPtr=0x6B6EDC8, keyLength=0x1, src=LibCv) (EventListElement 4) </Element>
            <Element type="TestStep 4" time="0" caller="" callee=""> Assert that CryIf_KeyCopy returned E_NOT_OK </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyCopy) asserted. </Element>
            <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementIdsGet was called with translated cryptoKeyId, keyElementId and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementIdsGet) asserted. </Element>
            <Element type="TestStep 6" time="0" caller="" callee=""> Assert that Crypto_KeyElementIdsGet was called with translated targetCryptoKeyId, targetKeyElementId and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementIdsGet) asserted. </Element>
            <Element type="TestStep 7" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId, keyElementId, length and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 3 (Crypto_KeyElementGet) asserted. </Element>
            <Element type="TestStep 8" time="0" caller="" callee=""> Assert that Crypto_KeyElementSet was called with translated cryptoKeyId and correct source Assert that all other parameters stay the same </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 4 (Crypto_KeyElementSet) asserted. </Element>
            <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
          </log>
          <result>ok</result>
        </testrun>
        <testrun date="2020-08-25 15:42:20" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
          <log>
            <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
            <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate return code of Crypto_KeyElementSet to E_NOT_OK </Element>
            <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementIdsGet and Crypto_KeyElementGet to return data values </Element>
            <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
            <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyCopy with keyIds on different crypto drivers </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyCopy - (EventListElement 0) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementIdsGet (cryptoKeyId=0x3, keyElementIds=0x6AFF438, keyElementIdsLengthPtr=0x1E, src=Wrapper) (EventListElement 1) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementIdsGet (cryptoKeyId=0x0, keyElementIds=0x6AFF3AC, keyElementIdsLengthPtr=0x1E, src=LibCv) (EventListElement 2) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x3, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 3) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementSet (cryptoKeyId=0x0, keyElementId=0x1, keyPtr=0x6AFF4C4, keyLength=0x1, src=LibCv) (EventListElement 4) </Element>
            <Element type="TestStep 4" time="0" caller="" callee=""> Assert that CryIf_KeyCopy returned E_NOT_OK </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyCopy) asserted. </Element>
            <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementIdsGet was called with translated cryptoKeyId, keyElementId and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementIdsGet) asserted. </Element>
            <Element type="TestStep 6" time="0" caller="" callee=""> Assert that Crypto_KeyElementIdsGet was called with translated targetCryptoKeyId, targetKeyElementId and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementIdsGet) asserted. </Element>
            <Element type="TestStep 7" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId, keyElementId, length and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 3 (Crypto_KeyElementGet) asserted. </Element>
            <Element type="TestStep 8" time="0" caller="" callee=""> Assert that Crypto_KeyElementSet was called with translated cryptoKeyId and correct source Assert that all other parameters stay the same </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 4 (Crypto_KeyElementSet) asserted. </Element>
            <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
          </log>
          <result>ok</result>
        </testrun>
        <testrun date="2020-08-25 15:42:36" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
          <log>
            <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
            <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate return code of Crypto_KeyElementSet to E_NOT_OK </Element>
            <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementIdsGet and Crypto_KeyElementGet to return data values </Element>
            <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
            <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyCopy with keyIds on different crypto drivers </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyCopy - (EventListElement 0) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementIdsGet (cryptoKeyId=0x3, keyElementIds=0x6FF2C0, keyElementIdsLengthPtr=0x1E, src=Wrapper) (EventListElement 1) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementIdsGet (cryptoKeyId=0x0, keyElementIds=0x6FF234, keyElementIdsLengthPtr=0x1E, src=LibCv) (EventListElement 2) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x3, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 3) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementSet (cryptoKeyId=0x0, keyElementId=0x1, keyPtr=0x6FF34C, keyLength=0x1, src=LibCv) (EventListElement 4) </Element>
            <Element type="TestStep 4" time="0" caller="" callee=""> Assert that CryIf_KeyCopy returned E_NOT_OK </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyCopy) asserted. </Element>
            <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementIdsGet was called with translated cryptoKeyId, keyElementId and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementIdsGet) asserted. </Element>
            <Element type="TestStep 6" time="0" caller="" callee=""> Assert that Crypto_KeyElementIdsGet was called with translated targetCryptoKeyId, targetKeyElementId and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementIdsGet) asserted. </Element>
            <Element type="TestStep 7" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId, keyElementId, length and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 3 (Crypto_KeyElementGet) asserted. </Element>
            <Element type="TestStep 8" time="0" caller="" callee=""> Assert that Crypto_KeyElementSet was called with translated cryptoKeyId and correct source Assert that all other parameters stay the same </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 4 (Crypto_KeyElementSet) asserted. </Element>
            <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
          </log>
          <result>ok</result>
        </testrun>
        <testrun date="2020-08-25 15:42:53" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
          <log>
            <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
            <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate return code of Crypto_KeyElementSet to E_NOT_OK </Element>
            <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementIdsGet and Crypto_KeyElementGet to return data values </Element>
            <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
            <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyCopy with keyIds on different crypto drivers </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyCopy - (EventListElement 0) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementIdsGet (cryptoKeyId=0x3, keyElementIds=0x4FEE8C, keyElementIdsLengthPtr=0x1E, src=Wrapper) (EventListElement 1) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementIdsGet (cryptoKeyId=0x0, keyElementIds=0x4FEE00, keyElementIdsLengthPtr=0x1E, src=LibCv) (EventListElement 2) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x3, keyElementId=0x1, resultLength=0x190, src=Wrapper) (EventListElement 3) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementSet (cryptoKeyId=0x0, keyElementId=0x1, keyPtr=0x4FEF18, keyLength=0x1, src=LibCv) (EventListElement 4) </Element>
            <Element type="TestStep 4" time="0" caller="" callee=""> Assert that CryIf_KeyCopy returned E_NOT_OK </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyCopy) asserted. </Element>
            <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementIdsGet was called with translated cryptoKeyId, keyElementId and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementIdsGet) asserted. </Element>
            <Element type="TestStep 6" time="0" caller="" callee=""> Assert that Crypto_KeyElementIdsGet was called with translated targetCryptoKeyId, targetKeyElementId and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementIdsGet) asserted. </Element>
            <Element type="TestStep 7" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId, keyElementId, length and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 3 (Crypto_KeyElementGet) asserted. </Element>
            <Element type="TestStep 8" time="0" caller="" callee=""> Assert that Crypto_KeyElementSet was called with translated cryptoKeyId and correct source Assert that all other parameters stay the same </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 4 (Crypto_KeyElementSet) asserted. </Element>
            <Element type="ok" time="0" caller="" callee=""> Arrays are equal.: current value: 1 (0x01) == expected value 1 (0x01) </Element>
          </log>
          <result>ok</result>
        </testrun>
      </testcase>
      <testcase almplusGUID="TCASE-8FE38E3F-B67E-4294-94A6-AE17ABD22E55" id="TCASE-530828" extId="" name="Key Copy - Different crypto drivers with failure when getting IDs from destination" ExecPlan="x">
        <description><![CDATA[*Key Copy - Different crypto drivers with failure when getting IDs from destination*

Asserts that the CryIf forwards the error code of the underlying Crypto_KeyElementGetId call. Therefore, the cryIfKeyId and the targetCryIfKeyId must point to different Crypto Drivers and KeyElementGetId for destination ids must be manipulated.

Test Steps:
# Prepare: Manipulate Crypto_KeyElementGetId to return E_NOT_OK
# Prepare: Manipulate Crypto_KeyElementIdsGet and Crypto_KeyElementGet to return data values
# Call CryIf_KeyCopy with keyIds on different crypto drivers
# Assert that CryIf_KeyCopy returned E_NOT_OK
# Assert that Crypto_KeyElementIdsGet was called with translated cryptoKeyId, keyElementId and correct source
# Assert that Crypto_KeyElementIdsGet was called with translated targetCryptoKeyId, targetKeyElementId and correct source

]]></description>
        <testrun date="2020-08-25 15:42:03" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
          <log>
            <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
            <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementGetId to return E_NOT_OK </Element>
            <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementIdsGet and Crypto_KeyElementGet to return data values </Element>
            <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
            <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyCopy with keyIds on different crypto drivers </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyCopy - (EventListElement 0) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementIdsGet (cryptoKeyId=0x3, keyElementIds=0x6B6ED3C, keyElementIdsLengthPtr=0x1E, src=Wrapper) (EventListElement 1) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementIdsGet (cryptoKeyId=0x0, keyElementIds=0x6B6ECB0, keyElementIdsLengthPtr=0x1E, src=LibCv) (EventListElement 2) </Element>
            <Element type="TestStep 4" time="0" caller="" callee=""> Assert that CryIf_KeyCopy returned E_NOT_OK </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyCopy) asserted. </Element>
            <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementIdsGet was called with translated cryptoKeyId, keyElementId and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementIdsGet) asserted. </Element>
            <Element type="TestStep 6" time="0" caller="" callee=""> Assert that Crypto_KeyElementIdsGet was called with translated targetCryptoKeyId, targetKeyElementId and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementIdsGet) asserted. </Element>
          </log>
          <result>ok</result>
        </testrun>
        <testrun date="2020-08-25 15:42:20" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
          <log>
            <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
            <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementGetId to return E_NOT_OK </Element>
            <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementIdsGet and Crypto_KeyElementGet to return data values </Element>
            <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
            <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyCopy with keyIds on different crypto drivers </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyCopy - (EventListElement 0) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementIdsGet (cryptoKeyId=0x3, keyElementIds=0x6AFF438, keyElementIdsLengthPtr=0x1E, src=Wrapper) (EventListElement 1) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementIdsGet (cryptoKeyId=0x0, keyElementIds=0x6AFF3AC, keyElementIdsLengthPtr=0x1E, src=LibCv) (EventListElement 2) </Element>
            <Element type="TestStep 4" time="0" caller="" callee=""> Assert that CryIf_KeyCopy returned E_NOT_OK </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyCopy) asserted. </Element>
            <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementIdsGet was called with translated cryptoKeyId, keyElementId and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementIdsGet) asserted. </Element>
            <Element type="TestStep 6" time="0" caller="" callee=""> Assert that Crypto_KeyElementIdsGet was called with translated targetCryptoKeyId, targetKeyElementId and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementIdsGet) asserted. </Element>
          </log>
          <result>ok</result>
        </testrun>
        <testrun date="2020-08-25 15:42:36" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
          <log>
            <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
            <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementGetId to return E_NOT_OK </Element>
            <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementIdsGet and Crypto_KeyElementGet to return data values </Element>
            <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
            <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyCopy with keyIds on different crypto drivers </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyCopy - (EventListElement 0) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementIdsGet (cryptoKeyId=0x3, keyElementIds=0x6FF2C0, keyElementIdsLengthPtr=0x1E, src=Wrapper) (EventListElement 1) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementIdsGet (cryptoKeyId=0x0, keyElementIds=0x6FF234, keyElementIdsLengthPtr=0x1E, src=LibCv) (EventListElement 2) </Element>
            <Element type="TestStep 4" time="0" caller="" callee=""> Assert that CryIf_KeyCopy returned E_NOT_OK </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyCopy) asserted. </Element>
            <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementIdsGet was called with translated cryptoKeyId, keyElementId and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementIdsGet) asserted. </Element>
            <Element type="TestStep 6" time="0" caller="" callee=""> Assert that Crypto_KeyElementIdsGet was called with translated targetCryptoKeyId, targetKeyElementId and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementIdsGet) asserted. </Element>
          </log>
          <result>ok</result>
        </testrun>
        <testrun date="2020-08-25 15:42:53" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
          <log>
            <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
            <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementGetId to return E_NOT_OK </Element>
            <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementIdsGet and Crypto_KeyElementGet to return data values </Element>
            <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
            <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyCopy with keyIds on different crypto drivers </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyCopy - (EventListElement 0) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementIdsGet (cryptoKeyId=0x3, keyElementIds=0x4FEE8C, keyElementIdsLengthPtr=0x1E, src=Wrapper) (EventListElement 1) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementIdsGet (cryptoKeyId=0x0, keyElementIds=0x4FEE00, keyElementIdsLengthPtr=0x1E, src=LibCv) (EventListElement 2) </Element>
            <Element type="TestStep 4" time="0" caller="" callee=""> Assert that CryIf_KeyCopy returned E_NOT_OK </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyCopy) asserted. </Element>
            <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementIdsGet was called with translated cryptoKeyId, keyElementId and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementIdsGet) asserted. </Element>
            <Element type="TestStep 6" time="0" caller="" callee=""> Assert that Crypto_KeyElementIdsGet was called with translated targetCryptoKeyId, targetKeyElementId and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementIdsGet) asserted. </Element>
          </log>
          <result>ok</result>
        </testrun>
      </testcase>
      <testcase almplusGUID="TCASE-BF381371-BFB0-4B35-BA1A-88E2CD486582" id="TCASE-530829" extId="" name="Key Copy - Different crypto drivers with failure when getting IDs from source" ExecPlan="x">
        <description><![CDATA[*Key Copy - Different crypto drivers with failure when getting IDs from source*

Asserts that the CryIf forwards the error code of the underlying CryptoKeyElementGetId call. Therefore, the cryIfKeyId and the targetCryIfKeyId must point to different Crypto Drivers and KeyElementGetId for source ids must be manipulated.

Test Steps:
# Prepare: Manipulate Crypto_KeyElementGetId to return E_NOT_OK
# Prepare: Manipulate Crypto_KeyElementIdsGet to return data values
# Call CryIf_KeyCopy with keyIds on different crypto drivers
# Assert that CryIf_KeyCopy returned E_NOT_OK
# Assert that Crypto_KeyElementIdsGet was called with translated cryptoKeyId, keyElementId and correct source
# Assert that Crypto_KeyElementIdsGet was called with translated targetCryptoKeyId, targetKeyElementId and correct source
]]></description>
        <testrun date="2020-08-25 15:42:03" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
          <log>
            <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
            <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementGetId to return E_NOT_OK </Element>
            <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementIdsGet to return data values </Element>
            <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
            <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyCopy with keyIds on different crypto drivers </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyCopy - (EventListElement 0) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementIdsGet (cryptoKeyId=0x3, keyElementIds=0x6B6ED3C, keyElementIdsLengthPtr=0x1E, src=Wrapper) (EventListElement 1) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementIdsGet (cryptoKeyId=0x0, keyElementIds=0x6B6ECB0, keyElementIdsLengthPtr=0x1E, src=LibCv) (EventListElement 2) </Element>
            <Element type="TestStep 4" time="0" caller="" callee=""> Assert that CryIf_KeyCopy returned E_NOT_OK </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyCopy) asserted. </Element>
            <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementIdsGet was called with translated cryptoKeyId, keyElementId and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementIdsGet) asserted. </Element>
            <Element type="TestStep 6" time="0" caller="" callee=""> Assert that Crypto_KeyElementIdsGet was called with translated targetCryptoKeyId, targetKeyElementId and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementIdsGet) asserted. </Element>
          </log>
          <result>ok</result>
        </testrun>
        <testrun date="2020-08-25 15:42:20" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
          <log>
            <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
            <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementGetId to return E_NOT_OK </Element>
            <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementIdsGet to return data values </Element>
            <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
            <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyCopy with keyIds on different crypto drivers </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyCopy - (EventListElement 0) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementIdsGet (cryptoKeyId=0x3, keyElementIds=0x6AFF438, keyElementIdsLengthPtr=0x1E, src=Wrapper) (EventListElement 1) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementIdsGet (cryptoKeyId=0x0, keyElementIds=0x6AFF3AC, keyElementIdsLengthPtr=0x1E, src=LibCv) (EventListElement 2) </Element>
            <Element type="TestStep 4" time="0" caller="" callee=""> Assert that CryIf_KeyCopy returned E_NOT_OK </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyCopy) asserted. </Element>
            <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementIdsGet was called with translated cryptoKeyId, keyElementId and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementIdsGet) asserted. </Element>
            <Element type="TestStep 6" time="0" caller="" callee=""> Assert that Crypto_KeyElementIdsGet was called with translated targetCryptoKeyId, targetKeyElementId and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementIdsGet) asserted. </Element>
          </log>
          <result>ok</result>
        </testrun>
        <testrun date="2020-08-25 15:42:36" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
          <log>
            <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
            <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementGetId to return E_NOT_OK </Element>
            <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementIdsGet to return data values </Element>
            <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
            <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyCopy with keyIds on different crypto drivers </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyCopy - (EventListElement 0) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementIdsGet (cryptoKeyId=0x3, keyElementIds=0x6FF2C0, keyElementIdsLengthPtr=0x1E, src=Wrapper) (EventListElement 1) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementIdsGet (cryptoKeyId=0x0, keyElementIds=0x6FF234, keyElementIdsLengthPtr=0x1E, src=LibCv) (EventListElement 2) </Element>
            <Element type="TestStep 4" time="0" caller="" callee=""> Assert that CryIf_KeyCopy returned E_NOT_OK </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyCopy) asserted. </Element>
            <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementIdsGet was called with translated cryptoKeyId, keyElementId and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementIdsGet) asserted. </Element>
            <Element type="TestStep 6" time="0" caller="" callee=""> Assert that Crypto_KeyElementIdsGet was called with translated targetCryptoKeyId, targetKeyElementId and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementIdsGet) asserted. </Element>
          </log>
          <result>ok</result>
        </testrun>
        <testrun date="2020-08-25 15:42:53" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
          <log>
            <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
            <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementGetId to return E_NOT_OK </Element>
            <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementIdsGet to return data values </Element>
            <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
            <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyCopy with keyIds on different crypto drivers </Element>
            <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyCopy - (EventListElement 0) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementIdsGet (cryptoKeyId=0x3, keyElementIds=0x4FEE8C, keyElementIdsLengthPtr=0x1E, src=Wrapper) (EventListElement 1) </Element>
            <Element type="" time="0" caller="" callee="">   Crypto_KeyElementIdsGet (cryptoKeyId=0x0, keyElementIds=0x4FEE00, keyElementIdsLengthPtr=0x1E, src=LibCv) (EventListElement 2) </Element>
            <Element type="TestStep 4" time="0" caller="" callee=""> Assert that CryIf_KeyCopy returned E_NOT_OK </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyCopy) asserted. </Element>
            <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementIdsGet was called with translated cryptoKeyId, keyElementId and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementIdsGet) asserted. </Element>
            <Element type="TestStep 6" time="0" caller="" callee=""> Assert that Crypto_KeyElementIdsGet was called with translated targetCryptoKeyId, targetKeyElementId and correct source </Element>
            <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementIdsGet) asserted. </Element>
          </log>
          <result>ok</result>
        </testrun>
      </testcase>
    </testgroup>
    <testgroup name="Error checks">
      <testgroup name="ProcessJob">
        <testcase almplusGUID="TCASE-856E1095-7330-4BA9-A3D1-9ED96D9803C8" id="TCASE-1006866" extId="" name="CryIf refuses to process a job if the redirection key ids are out of bounds" ExecPlan="x">
          <description><![CDATA[*CryIf refuses to process a job if the redirection key ids are out of bounds*

Asserts that the CryIf refuses to process a job if the redirection key ids are out of bounds.

Precondition:
* Redirection is enabled.
* Dev Error Detect is enabled.

Test Steps:
# Prepare: Generate Job redirecting in- and outputs
# Prepare: Manipulate redirection key ids that they are out of bounds
# Call CryIf_ProcessJob with generated job
# Assert that CryIf_ProcessJob returned E_NOT_OK
# Assert that Det_ReportError was called with error code CRYIF_E_PARAM_HANDLE (if error reporting is enabled)
]]></description>
          <testrun date="2020-08-25 15:42:03" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Redirection is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Prepare: Generate Job redirecting in and outputs </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Prepare: Manipulate redirection key ids that they are out of bounds </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Call CryIf_ProcessJob with generated job </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_ProcessJob - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x02, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 6" time="0" caller="" callee=""> Assert that CryIf_ProcessJob returned E_NOT_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_ProcessJob) asserted. </Element>
              <Element type="TestStep 7" time="0" caller="" callee=""> Assert that Det_ReportError was called with error code CRYIF_E_PARAM_HANDLE (if error reporting is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:20" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Redirection is enabled </Element>
              <NA_Text>Switch CRYIF_REDIRECTION is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
          <testrun date="2020-08-25 15:42:36" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Redirection is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Prepare: Generate Job redirecting in and outputs </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Prepare: Manipulate redirection key ids that they are out of bounds </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Call CryIf_ProcessJob with generated job </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_ProcessJob - (EventListElement 0) </Element>
              <Element type="TestStep 6" time="0" caller="" callee=""> Assert that CryIf_ProcessJob returned E_NOT_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_ProcessJob) asserted. </Element>
              <Element type="TestStep 7" time="0" caller="" callee=""> Assert that Det_ReportError was called with error code CRYIF_E_PARAM_HANDLE (if error reporting is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:53" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Redirection is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-B5293086-9770-4A72-9917-CE5B76CCE988" id="TCASE-1087629" extId="" name="Apply ModuleNotInitializedPattern KeyFunction=ProcessJob." ExecPlan="x">
          <description><![CDATA[Apply ModuleNotInitializedPattern KeyFunction=ProcessJob.]]></description>
          <testrun date="2020-08-25 15:42:03" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_ProcessJob with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_ProcessJob - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x02, ErrorId: 0x00 (EventListElement 1) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_ProcessJob) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:20" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_ProcessJob with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_ProcessJob - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x02, ErrorId: 0x00 (EventListElement 1) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_ProcessJob) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:37" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_ProcessJob with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_ProcessJob - (EventListElement 0) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_ProcessJob) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:53" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-6C961D77-47AE-4792-AAAE-04224656FAF2" id="TCASE-1087630" extId="" name="Apply NullPointerCheckPattern Function=ProcessJob and Parameter=job." ExecPlan="x">
          <description><![CDATA[Apply NullPointerCheckPattern Function=ProcessJob and Parameter=job.]]></description>
          <testrun date="2020-08-25 15:42:03" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_ProcessJob with job equal to null pointer </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_ProcessJob - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x02, ErrorId: 0x02 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_ProcessJob) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_POINTER (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:20" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_ProcessJob with job equal to null pointer </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_ProcessJob - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x02, ErrorId: 0x02 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_ProcessJob) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_POINTER (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:37" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_ProcessJob with job equal to null pointer </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_ProcessJob - (EventListElement 0) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_ProcessJob) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_POINTER (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:53" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-07E80AD8-2046-49A8-9253-1C9A553EA406" id="TCASE-1087631" extId="" name="Apply OutOfRangePattern Function=ProcessJob and Parameter=channelId." ExecPlan="x">
          <description><![CDATA[Apply OutOfRangePattern Function=ProcessJob and Parameter=channelId.]]></description>
          <testrun date="2020-08-25 15:42:03" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_ProcessJob with a channelId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_ProcessJob - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x02, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_ProcessJob) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:20" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_ProcessJob with a channelId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_ProcessJob - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x02, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_ProcessJob) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:37" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_ProcessJob with a channelId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_ProcessJob - (EventListElement 0) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_ProcessJob) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-F1046D8A-8FF3-446C-A5B9-6E9DBF21EBD1" id="TCASE-1087906" extId="" name="CryIfKey parameter is out of range for PrcoessJob function" ExecPlan="x">
          <description><![CDATA[*CryIfKey parameter is out of range for PrcoessJob function*

Assert that CryIf_ProcessJob fails when cryIfKeyId is out of range.

Test Steps:
# Call CryIf_ProcessJob with a cryIfKeyId which is out of bounds. 
# Check if function fails (return value is equal CRYPTO_E_KEY_NOT_AVAILABLE).]]></description>
          <testrun date="2020-08-25 15:42:03" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_ProcessJob with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_ProcessJob - (EventListElement 0) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Check if function fails (return value is equal CRYPTO_E_KEY_NOT_AVAILABLE) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_ProcessJob) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:20" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_ProcessJob with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_ProcessJob - (EventListElement 0) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Check if function fails (return value is equal CRYPTO_E_KEY_NOT_AVAILABLE) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_ProcessJob) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:37" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_ProcessJob with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_ProcessJob - (EventListElement 0) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Check if function fails (return value is equal CRYPTO_E_KEY_NOT_AVAILABLE) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_ProcessJob) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_ProcessJob with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_ProcessJob - (EventListElement 0) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Check if function fails (return value is equal CRYPTO_E_KEY_NOT_AVAILABLE) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_ProcessJob) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
        </testcase>
      </testgroup>
      <testgroup name="CancelJob">
        <testcase almplusGUID="TCASE-A773F408-4A83-4F3E-ABC4-1F69D2E3A916" id="TCASE-1087907" extId="" name="Apply ModuleNotInitializedPattern KeyFunction=CancelJob." ExecPlan="x">
          <description><![CDATA[Apply ModuleNotInitializedPattern KeyFunction=CancelJob.]]></description>
          <testrun date="2020-08-25 15:42:04" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_CancelJob with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CancelJob - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x03, ErrorId: 0x00 (EventListElement 1) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CancelJob) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:20" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_CancelJob with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CancelJob - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x03, ErrorId: 0x00 (EventListElement 1) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CancelJob) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:37" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_CancelJob with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CancelJob - (EventListElement 0) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CancelJob) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-628D6AD7-1EB8-4A40-A874-4F16C0B39B92" id="TCASE-1087908" extId="" name="Apply NullPointerCheckPattern Function=CancelJob and Parameter=job." ExecPlan="x">
          <description><![CDATA[Apply NullPointerCheckPattern Function=CancelJob and Parameter=job.]]></description>
          <testrun date="2020-08-25 15:42:04" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_CancelJob with job equal to null pointer </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CancelJob - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x03, ErrorId: 0x02 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CancelJob) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_POINTER (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:20" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_CancelJob with job equal to null pointer </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CancelJob - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x03, ErrorId: 0x02 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CancelJob) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_POINTER (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:37" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_CancelJob with job equal to null pointer </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CancelJob - (EventListElement 0) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CancelJob) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_POINTER (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-AE00C0CD-02EA-4F16-8169-13EB516F5C8E" id="TCASE-1087909" extId="" name="Apply OutOfRangePattern for CancelJob Function=CancelJob and Parameter=channelId." ExecPlan="x">
          <description><![CDATA[Apply OutOfRangePattern for CancelJob Function=CancelJob and Parameter=channelId.]]></description>
          <testrun date="2020-08-25 15:42:04" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_CancelJob with a channelId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CancelJob - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x03, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CancelJob) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:20" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_CancelJob with a channelId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CancelJob - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x03, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CancelJob) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:37" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_CancelJob with a channelId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CancelJob - (EventListElement 0) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CancelJob) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-57C33124-049E-4C40-9EB6-6A2086CF8669" id="TCASE-1087910" extId="" name="CryIfKey parameter is out of range for CancelJob function" ExecPlan="x">
          <description><![CDATA[*CryIfKey parameter is out of range for CancelJob function*

Asserts that the CryIf_CancelJob fails when cryIfKeyId is out of range.

Test Steps:
# Call CryIf_CancelJob with a cryIfKeyId which is out of bounds
# Assert that CancelJob returned CRYPTO_E_KEY_NOT_AVAILABLE]]></description>
          <testrun date="2020-08-25 15:42:04" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig5 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_CancelJob with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CancelJob - (EventListElement 0) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CancelJob returned CRYPTO_E_KEY_NOT_AVAILABLE </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CancelJob) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:20" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig6 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_CancelJob with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CancelJob - (EventListElement 0) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CancelJob returned CRYPTO_E_KEY_NOT_AVAILABLE </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CancelJob) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:37" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig7 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_CancelJob with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CancelJob - (EventListElement 0) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CancelJob returned CRYPTO_E_KEY_NOT_AVAILABLE </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CancelJob) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig8 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_CancelJob with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CancelJob - (EventListElement 0) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CancelJob returned CRYPTO_E_KEY_NOT_AVAILABLE </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CancelJob) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
        </testcase>
      </testgroup>
      <testgroup name="KeyElementSet">
        <testcase almplusGUID="TCASE-86BA2FAC-0AF4-45FA-AF8A-B05EEED49600" id="TCASE-1087911" extId="" name="Apply ModuleNotInitializedPattern KeyFunction=KeyElementSet." ExecPlan="x">
          <description><![CDATA[Apply ModuleNotInitializedPattern KeyFunction=KeyElementSet.]]></description>
          <testrun date="2020-08-25 15:42:04" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyElementSet with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementSet - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x04, ErrorId: 0x00 (EventListElement 1) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementSet) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:20" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig9 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyElementSet with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementSet - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x04, ErrorId: 0x00 (EventListElement 1) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementSet) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:37" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig10 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyElementSet with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementSet - (EventListElement 0) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementSet) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig12 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-EB982A7E-81F6-4478-9BC0-DAFAD3707775" id="TCASE-1087912" extId="" name="Apply NullPointerCheckPattern Function=KeyElementSet and Parameter=keyPtr." ExecPlan="x">
          <description><![CDATA[Apply NullPointerCheckPattern Function=KeyElementSet and Parameter=keyPtr.]]></description>
          <testrun date="2020-08-25 15:42:04" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig12, text " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementSet with keyPtr equal to null pointer </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementSet - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x04, ErrorId: 0x02 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementSet) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_POINTER (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:20" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig12" execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementSet with keyPtr equal to null pointer </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementSet - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x04, ErrorId: 0x02 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementSet) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_POINTER (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:37" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementSet with keyPtr equal to null pointer </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementSet - (EventListElement 0) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementSet) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_POINTER (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-AA593CEB-CD23-4FD8-AD8E-F1338A1EE062" id="TCASE-1087913" extId="" name="Apply OutOfRangePattern Function=KeyElementSet and Parameter=cryIfKeyId." ExecPlan="x">
          <description><![CDATA[Apply OutOfRangePattern Function=KeyElementSet and Parameter=cryIfKeyId.]]></description>
          <testrun date="2020-08-25 15:42:04" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementSet with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementSet - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x04, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementSet) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:20" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementSet with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementSet - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x04, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementSet) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:37" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementSet with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementSet - (EventListElement 0) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementSet) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-9861A154-EC8E-429C-BACF-2353B11D3089" id="TCASE-1087917" extId="" name="Apply ZeroLengthPattern for Function=KeyElementSet and Parameter=keyLength." ExecPlan="x">
          <description><![CDATA[Apply ZeroLengthPattern for Function=KeyElementSet and Parameter=keyLength.]]></description>
          <testrun date="2020-08-25 15:42:04" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementSet with keyLength equal to zero </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementSet - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x04, ErrorId: 0x04 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementSet) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_VALUE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:21" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementSet with keyLength equal to zero </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementSet - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x04, ErrorId: 0x04 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementSet) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_VALUE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:37" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementSet with keyLength equal to zero </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementSet - (EventListElement 0) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementSet) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_VALUE (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
      </testgroup>
      <testgroup name="KeySetValid">
        <testcase almplusGUID="TCASE-CF0476D9-1293-4F0B-AB2E-672AB8ED431D" id="TCASE-1087918" extId="" name="Apply ModuleNotInitializedPattern for KeyFunction=KeySetValid." ExecPlan="x">
          <description><![CDATA[Apply ModuleNotInitializedPattern for KeyFunction=KeySetValid.]]></description>
          <testrun date="2020-08-25 15:42:04" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeySetValid with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyValidSet - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x05, ErrorId: 0x00 (EventListElement 1) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyValidSet) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:21" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeySetValid with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyValidSet - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x05, ErrorId: 0x00 (EventListElement 1) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyValidSet) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:37" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeySetValid with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyValidSet - (EventListElement 0) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyValidSet) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-1194C9F2-209E-441A-AF26-EF9BDB1D4622" id="TCASE-1087919" extId="" name="Apply OutOfRangePattern for Function=KeySetValid Parameter=cryIfKeyId." ExecPlan="x">
          <description><![CDATA[Apply OutOfRangePattern for Function=KeySetValid Parameter=cryIfKeyId.]]></description>
          <testrun date="2020-08-25 15:42:04" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeySetValid with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyValidSet - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x05, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyValidSet) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:21" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeySetValid with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyValidSet - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x05, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyValidSet) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:37" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeySetValid with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyValidSet - (EventListElement 0) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyValidSet) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
      </testgroup>
      <testgroup name="KeyElementGet">
        <testcase almplusGUID="TCASE-5DF2ACE3-84CE-45B6-9466-A7766621233C" id="TCASE-1087920" extId="" name="Apply ModuleNotInitializedPattern for KeyFunction=KeyElementGet." ExecPlan="x">
          <description><![CDATA[Apply ModuleNotInitializedPattern for KeyFunction=KeyElementGet.]]></description>
          <testrun date="2020-08-25 15:42:04" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyElementGet with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementGet - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x06, ErrorId: 0x00 (EventListElement 1) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementGet) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:21" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyElementGet with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementGet - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x06, ErrorId: 0x00 (EventListElement 1) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementGet) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:37" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyElementGet with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementGet - (EventListElement 0) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementGet) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-280223C9-3B02-4638-8F74-5492CBCFBAB8" id="TCASE-1087921" extId="" name="Apply NullPointerCheckPattern for Function=KeyElementGet and Parameter=ResultLengthPtr." ExecPlan="x">
          <description><![CDATA[Apply NullPointerCheckPattern for Function=KeyElementGet and Parameter=ResultLengthPtr.]]></description>
          <testrun date="2020-08-25 15:42:04" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementGet with ResultLengthPtr equal to null pointer </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementGet - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x06, ErrorId: 0x02 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementGet) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_POINTER (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:21" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementGet with ResultLengthPtr equal to null pointer </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementGet - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x06, ErrorId: 0x02 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementGet) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_POINTER (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:37" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementGet with ResultLengthPtr equal to null pointer </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementGet - (EventListElement 0) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementGet) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_POINTER (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-86547A2E-2A3C-41D9-999E-1D3D0D58B002" id="TCASE-1087922" extId="" name="Apply NullPointerCheckPattern for Function=KeyElementGet and Parameter=ResultPtr." ExecPlan="x">
          <description><![CDATA[Apply NullPointerCheckPattern for Function=KeyElementGet and Parameter=ResultPtr.]]></description>
          <testrun date="2020-08-25 15:42:04" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementGet with ResultPtr equal to null pointer </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementGet - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x06, ErrorId: 0x02 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementGet) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_POINTER (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:21" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementGet with ResultPtr equal to null pointer </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementGet - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x06, ErrorId: 0x02 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementGet) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_POINTER (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:37" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementGet with ResultPtr equal to null pointer </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementGet - (EventListElement 0) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementGet) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_POINTER (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-F8E8B5C0-3072-420E-8FC0-A2DD3524FBD3" id="TCASE-1087923" extId="" name="Apply OutOfRangePattern for Function=KeyElementGet and Parameter=cryIfKeyId" ExecPlan="x">
          <description><![CDATA[Apply OutOfRangePattern for Function=KeyElementGet and Parameter=cryIfKeyId]]></description>
          <testrun date="2020-08-25 15:42:04" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementGet with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementGet - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x06, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementGet) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:21" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementGet with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementGet - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x06, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementGet) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:37" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementGet with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementGet - (EventListElement 0) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementGet) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-8FF9FE89-449E-4FF3-8EF2-B32B809041D7" id="TCASE-1087924" extId="" name="Apply ZeroLengthPattern for Function=KeyElementGet and Parameter=resultLengthPtr." ExecPlan="x">
          <description><![CDATA[Apply ZeroLengthPattern for Function=KeyElementGet and Parameter=resultLengthPtr.]]></description>
          <testrun date="2020-08-25 15:42:04" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementGet with resultLengthPtr equal to zero </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementGet - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x06, ErrorId: 0x04 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementGet) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_VALUE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:21" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementGet with resultLengthPtr equal to zero </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementGet - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x06, ErrorId: 0x04 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementGet) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_VALUE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:37" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementGet with resultLengthPtr equal to zero </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementGet - (EventListElement 0) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementGet) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_VALUE (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
      </testgroup>
      <testgroup name="KeyElementCopyPartial">
        <testcase almplusGUID="TCASE-1DDF9701-7917-4ED4-B194-B2E1EDCA949A" id="TCASE-1008016" extId="" name="KeyElementCopyPartial returns an error if it is handled locally and Crypto_KeyElementGet fails for the source key id." ExecPlan="x">
          <description><![CDATA[*KeyElementCopyPartial returns an error if it is handled locally and Crypto_KeyElementGet fails for the source key id.*

Asserts that the CryIf forwards the error code of the underlying Crypto_KeyElementGet call.

Test Steps:
# Prepare: Manipulate return code of Crypto_KeyElementGet for the source key id to E_NOT_OK
# Call CryIf_KeyElementCopyPartial with a keyIds pointing to a crypto driver which does not support KeyElementCopyPartial
# Assert that CryIf_KeyElementCopyPartial returned E_NOT_OK.
# Assert that Crypto_KeyElementGet was called with translated cryptoKeyId
]]></description>
          <testrun date="2020-08-25 15:42:03" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate return code of Crypto_KeyElementGet for the source key id to E_NOT_OK </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial with a keyIds pointing to a crypto driver which does not support KeyElementCopyPartial </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x0, resultLength=0x190, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopyPartial returned E_NOT_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:20" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate return code of Crypto_KeyElementGet for the source key id to E_NOT_OK </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial with a keyIds pointing to a crypto driver which does not support KeyElementCopyPartial </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x0, resultLength=0x190, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopyPartial returned E_NOT_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:37" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate return code of Crypto_KeyElementGet for the source key id to E_NOT_OK </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial with a keyIds pointing to a crypto driver which does not support KeyElementCopyPartial </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x0, resultLength=0x190, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopyPartial returned E_NOT_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:53" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate return code of Crypto_KeyElementGet for the source key id to E_NOT_OK </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial with a keyIds pointing to a crypto driver which does not support KeyElementCopyPartial </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x0, resultLength=0x190, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopyPartial returned E_NOT_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-4714DC29-D0B9-40B2-823A-A1CF8206982F" id="TCASE-1008015" extId="" name="KeyElementCopyPartial returns an error if it is handled locally and Crypto_KeyElementGet fails for the target key id." ExecPlan="x">
          <description><![CDATA[*KeyElementCopyPartial returns an error if it is handled locally and Crypto_KeyElementGet fails for the target key id.*

Asserts that the CryIf forwards the error code of the underlying Crypto_KeyElementGet call.

Test Steps:
# Prepare: Manipulate return code of Crypto_KeyElementGet for the target key id to E_NOT_OK
# Call CryIf_KeyElementCopyPartial with a keyIds pointing to a crypto driver which does not support KeyElementCopyPartial
# Assert that CryIf_KeyElementCopyPartial returned E_NOT_OK.
# Assert that Crypto_KeyElementGet was called with translated cryptoKeyId
# Assert that Crypto_KeyElementGet was called with translated targetCryptoKeyId
]]></description>
          <testrun date="2020-08-25 15:42:03" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate return code of Crypto_KeyElementGet for the target key id to E_NOT_OK </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial with a keyIds pointing to a crypto driver which does not support KeyElementCopyPartial </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x0, resultLength=0x190, src=Wrapper) (EventListElement 1) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x0, resultLength=0x190, src=Wrapper) (EventListElement 2) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopyPartial returned E_NOT_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated targetCryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementGet) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:20" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate return code of Crypto_KeyElementGet for the target key id to E_NOT_OK </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial with a keyIds pointing to a crypto driver which does not support KeyElementCopyPartial </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x0, resultLength=0x190, src=Wrapper) (EventListElement 1) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x0, resultLength=0x190, src=Wrapper) (EventListElement 2) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopyPartial returned E_NOT_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated targetCryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementGet) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:37" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate return code of Crypto_KeyElementGet for the target key id to E_NOT_OK </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial with a keyIds pointing to a crypto driver which does not support KeyElementCopyPartial </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x0, resultLength=0x190, src=Wrapper) (EventListElement 1) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x0, resultLength=0x190, src=Wrapper) (EventListElement 2) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopyPartial returned E_NOT_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated targetCryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementGet) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:53" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate return code of Crypto_KeyElementGet for the target key id to E_NOT_OK </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial with a keyIds pointing to a crypto driver which does not support KeyElementCopyPartial </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x0, resultLength=0x190, src=Wrapper) (EventListElement 1) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x0, resultLength=0x190, src=Wrapper) (EventListElement 2) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopyPartial returned E_NOT_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated targetCryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 2 (Crypto_KeyElementGet) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-3B9018CD-5AC0-4903-AD9F-C79FE2359A93" id="TCASE-1008018" extId="" name="KeyElementCopyPartial returns E_NOT_OK if the local buffer is too small to handle the merged data." ExecPlan="x">
          <description><![CDATA[*KeyElementCopyPartial returns E_NOT_OK if the local buffer is too small to handle the merged data.*

Asserts that KeyElementCopyPartial does not overwrite its local buffers if KeyElementCopyPartial is handled locally.

Test Steps:
# Call CryIf_KeyElementCopyPartial with a copyLength larger then the configured buffer size.
# Assert that CryIf_KeyElementCopyPartial returned E_NOT_OK.
]]></description>
          <testrun date="2020-08-25 15:42:03" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial with a copyLength larger then the configured buffer size </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopyPartial returned E_NOT_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:20" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial with a copyLength larger then the configured buffer size </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopyPartial returned E_NOT_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:37" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial with a copyLength larger then the configured buffer size </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopyPartial returned E_NOT_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:53" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial with a copyLength larger then the configured buffer size </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopyPartial returned E_NOT_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-51C5F3B9-9872-4D9E-86C2-7A0956B550ED" id="TCASE-1008017" extId="" name="KeyElementCopyPartial returns E_NOT_OK if the source key does not contain enough bytes to copy." ExecPlan="x">
          <description><![CDATA[*KeyElementCopyPartial returns E_NOT_OK if the source key does not contain enough bytes to copy.*

Asserts that KeyElementCopyPartial does not write dummy data to the target Key Element if the source key element does not contain enough bytes for the service. KeyElementCopyPartial is handled locally.

Test Steps:
# Prepare: Manipulate Crypto_KeyElementGet for the source key id to return a key of length k
# Call CryIf_KeyElementCopyPartial with a copyLength larger then k
# Assert that CryIf_KeyElementCopyPartial returned E_NOT_OK.
# Assert that Crypto_KeyElementGet was called with translated cryptoKeyId
]]></description>
          <testrun date="2020-08-25 15:42:03" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementGet for the source key id to return a key of length k </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial with a copyLength larger then k </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x0, resultLength=0x190, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopyPartial returned E_NOT_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:20" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementGet for the source key id to return a key of length k </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial with a copyLength larger then k </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x0, resultLength=0x190, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopyPartial returned E_NOT_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:37" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementGet for the source key id to return a key of length k </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial with a copyLength larger then k </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x0, resultLength=0x190, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopyPartial returned E_NOT_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:53" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Prepare: Manipulate Crypto_KeyElementGet for the source key id to return a key of length k </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial with a copyLength larger then k </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="" time="0" caller="" callee="">   Crypto_KeyElementGet (cryptoKeyId=0x4, keyElementId=0x0, resultLength=0x190, src=Wrapper) (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopyPartial returned E_NOT_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that Crypto_KeyElementGet was called with translated cryptoKeyId </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Crypto_KeyElementGet) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-6BBDD747-491F-4EB2-9F15-68FCA5986EB8" id="TCASE-1088932" extId="" name="Apply ModuleNotInitializedPattern for KeyFunction=KeyElementCopyPartial." ExecPlan="x">
          <description><![CDATA[Apply ModuleNotInitializedPattern for KeyFunction=KeyElementCopyPartial.]]></description>
          <testrun date="2020-08-25 15:42:05" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x12, ErrorId: 0x00 (EventListElement 1) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:22" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x12, ErrorId: 0x00 (EventListElement 1) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:39" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-019A840B-EFBE-422A-8B67-232D85CD99C1" id="TCASE-1088933" extId="" name="Apply OutOfRangePattern for Function=KeyElementCopyPartial and Parameter=targetCryIfKeyId." ExecPlan="x">
          <description><![CDATA[Apply OutOfRangePattern for Function=KeyElementCopyPartial and Parameter=targetCryIfKeyId.]]></description>
          <testrun date="2020-08-25 15:42:05" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial with a targetCryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x12, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:22" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial with a targetCryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x12, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:39" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial with a targetCryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-4AC458E9-2235-4146-B3C7-656BB00FC982" id="TCASE-1088934" extId="" name="Apply OutOfRangePattern for Function=KeyElementCopyPartial and Parameter=cryIfKeyId." ExecPlan="x">
          <description><![CDATA[Apply OutOfRangePattern for Function=KeyElementCopyPartial and Parameter=cryIfKeyId.]]></description>
          <testrun date="2020-08-25 15:42:05" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x12, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:22" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x12, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:39" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial - (EventListElement 0) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-61E0FF9E-834C-4F54-A1C8-CC16D5ADDA95" id="TCASE-1008087" extId="" name="KeyElementCopyPartial_Stub exists and always returns E_NOT_OK." ExecPlan="x">
          <description><![CDATA[*KeyElementCopyPartial_Stub exists and always returns E_NOT_OK.*

Asserts that CryIf_KeyElementCopyPartial_Stub exists and always returns E_NOT_OK. This API is only used for generator simplicity.

Test Steps:
# Call CryIf_KeyElementCopyPartial_Stub
# Assert that CryIf_KeyElementCopyPartial_Stub returned E_NOT_OK.]]></description>
          <testrun date="2020-08-25 15:42:03" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial_Stub </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial_Stub - (EventListElement 0) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopyPartial_Stub returned E_NOT_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial_Stub) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:20" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial_Stub </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial_Stub - (EventListElement 0) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopyPartial_Stub returned E_NOT_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial_Stub) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:37" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial_Stub </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial_Stub - (EventListElement 0) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopyPartial_Stub returned E_NOT_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial_Stub) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:53" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Call CryIf_KeyElementCopyPartial_Stub </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopyPartial_Stub - (EventListElement 0) </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Assert that CryIf_KeyElementCopyPartial_Stub returned E_NOT_OK </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopyPartial_Stub) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
        </testcase>
      </testgroup>
      <testgroup name="KeyElementCopy">
        <testcase almplusGUID="TCASE-6D88A6FD-F5E2-474A-B1B5-03370201207A" id="TCASE-1088898" extId="" name="Apply ModuleNotInitializedPattern for KeyFunction=KeyElementCopy." ExecPlan="x">
          <description><![CDATA[Apply ModuleNotInitializedPattern for KeyFunction=KeyElementCopy.]]></description>
          <testrun date="2020-08-25 15:42:04" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyElementCopy with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopy - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x0F, ErrorId: 0x00 (EventListElement 1) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopy) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:21" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyElementCopy with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopy - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x0F, ErrorId: 0x00 (EventListElement 1) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopy) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:37" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyElementCopy with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopy - (EventListElement 0) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopy) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-5A54BB28-E941-4B2D-90CB-2698E931B751" id="TCASE-1088899" extId="" name="Apply OutOfRangePattern for Function=KeyElementCopy and Parameter=targetCryIfKeyId." ExecPlan="x">
          <description><![CDATA[Apply OutOfRangePattern for Function=KeyElementCopy and Parameter=targetCryIfKeyId.]]></description>
          <testrun date="2020-08-25 15:42:04" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementCopy with a targetCryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopy - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x0F, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopy) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:21" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementCopy with a targetCryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopy - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x0F, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopy) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:37" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementCopy with a targetCryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopy - (EventListElement 0) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopy) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-080CE6F5-4F0D-4C13-97BF-5084ED333625" id="TCASE-1088900" extId="" name="Apply OutOfRangePattern for Function=KeyElementCopy and Parameter=cryIfKeyId." ExecPlan="x">
          <description><![CDATA[Apply OutOfRangePattern for Function=KeyElementCopy and Parameter=cryIfKeyId.]]></description>
          <testrun date="2020-08-25 15:42:04" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementCopy with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopy - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x0F, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopy) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:21" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementCopy with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopy - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x0F, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopy) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:37" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyElementCopy with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyElementCopy - (EventListElement 0) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyElementCopy) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
      </testgroup>
      <testgroup name="KeyCopy">
        <testcase almplusGUID="TCASE-4EFCF709-76D6-48C2-B872-31C6C03ED656" id="TCASE-1088901" extId="" name="Apply ModuleNotInitializedPattern for KeyFunction=KeyCopy." ExecPlan="x">
          <description><![CDATA[Apply ModuleNotInitializedPattern for KeyFunction=KeyCopy.]]></description>
          <testrun date="2020-08-25 15:42:04" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyCopy with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyCopy - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x10, ErrorId: 0x00 (EventListElement 1) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyCopy) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:21" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyCopy with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyCopy - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x10, ErrorId: 0x00 (EventListElement 1) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyCopy) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:37" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyCopy with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyCopy - (EventListElement 0) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyCopy) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-02A12914-BFFE-4770-818F-F77398E15F39" id="TCASE-1088902" extId="" name="Apply OutOfRangePattern for Function=KeyCopy and Parameter=targetCryIfKeyId." ExecPlan="x">
          <description><![CDATA[Apply OutOfRangePattern for Function=KeyCopy and Parameter=targetCryIfKeyId.]]></description>
          <testrun date="2020-08-25 15:42:04" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyCopy with a targetCryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyCopy - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x10, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyCopy) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:21" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyCopy with a targetCryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyCopy - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x10, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyCopy) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:38" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyCopy with a targetCryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyCopy - (EventListElement 0) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyCopy) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-EF51F950-76C9-45D4-89A7-112741A52A34" id="TCASE-1088903" extId="" name="Apply OutOfRangePattern for Function=KeyCopy and Parameter=cryIfKeyId." ExecPlan="x">
          <description><![CDATA[Apply OutOfRangePattern for Function=KeyCopy and Parameter=cryIfKeyId.]]></description>
          <testrun date="2020-08-25 15:42:04" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyCopy with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyCopy - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x10, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyCopy) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:21" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyCopy with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyCopy - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x10, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyCopy) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:38" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyCopy with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyCopy - (EventListElement 0) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyCopy) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
      </testgroup>
      <testgroup name="RandomSeed">
        <testcase almplusGUID="TCASE-C307C59E-0706-411F-9919-1AB107B95CB6" id="TCASE-1088904" extId="" name="Apply ModuleNotInitializedPattern for KeyFunction=RandomSeed." ExecPlan="x">
          <description><![CDATA[Apply ModuleNotInitializedPattern for KeyFunction=RandomSeed.]]></description>
          <testrun date="2020-08-25 15:42:04" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_RandomSeed with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_RandomSeed - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x07, ErrorId: 0x00 (EventListElement 1) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_RandomSeed) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:21" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_RandomSeed with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_RandomSeed - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x07, ErrorId: 0x00 (EventListElement 1) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_RandomSeed) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:38" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_RandomSeed with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_RandomSeed - (EventListElement 0) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_RandomSeed) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-315B0DD4-4F14-4860-9EBF-293686380864" id="TCASE-1088905" extId="" name="Apply NullPointerCheckPattern for Function=RandomSeed and Parameter=seedPtr." ExecPlan="x">
          <description><![CDATA[Apply NullPointerCheckPattern for Function=RandomSeed and Parameter=seedPtr.]]></description>
          <testrun date="2020-08-25 15:42:04" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_RandomSeed with seedPtr equal to null pointer </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_RandomSeed - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x07, ErrorId: 0x02 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_RandomSeed) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_POINTER (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:21" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_RandomSeed with seedPtr equal to null pointer </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_RandomSeed - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x07, ErrorId: 0x02 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_RandomSeed) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_POINTER (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:38" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_RandomSeed with seedPtr equal to null pointer </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_RandomSeed - (EventListElement 0) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_RandomSeed) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_POINTER (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-D38C48AD-715C-41FF-9303-4433811A819E" id="TCASE-1088906" extId="" name="Apply OutOfRangePattern for Function=RandomSeed and Parameter=cryIfKeyId." ExecPlan="x">
          <description><![CDATA[Apply OutOfRangePattern for Function=RandomSeed and Parameter=cryIfKeyId.]]></description>
          <testrun date="2020-08-25 15:42:04" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_RandomSeed with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_RandomSeed - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x07, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_RandomSeed) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:21" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_RandomSeed with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_RandomSeed - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x07, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_RandomSeed) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:38" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_RandomSeed with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_RandomSeed - (EventListElement 0) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_RandomSeed) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-D25E1B00-CA59-4F6B-8DDC-8B5347456983" id="TCASE-1088907" extId="" name="Apply ZeroLengthPattern for Function=RandomSeed and Parameter=seedLength." ExecPlan="x">
          <description><![CDATA[Apply ZeroLengthPattern for Function=RandomSeed and Parameter=seedLength.]]></description>
          <testrun date="2020-08-25 15:42:04" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_RandomSeed with seedLength equal to zero </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_RandomSeed - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x07, ErrorId: 0x04 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_RandomSeed) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_VALUE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:21" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_RandomSeed with seedLength equal to zero </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_RandomSeed - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x07, ErrorId: 0x04 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_RandomSeed) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_VALUE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:38" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_RandomSeed with seedLength equal to zero </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_RandomSeed - (EventListElement 0) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_RandomSeed) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_VALUE (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
      </testgroup>
      <testgroup name="KeyGenerate">
        <testcase almplusGUID="TCASE-56CC2F96-7C1E-445A-B73E-5B5C1BDBDE5D" id="TCASE-1088908" extId="" name="Apply ModuleNotInitializedPattern for KeyFunction=KeyGenerate." ExecPlan="x">
          <description><![CDATA[Apply ModuleNotInitializedPattern for KeyFunction=KeyGenerate.]]></description>
          <testrun date="2020-08-25 15:42:04" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyGenerate with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyGenerate - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x08, ErrorId: 0x00 (EventListElement 1) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyGenerate) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:21" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyGenerate with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyGenerate - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x08, ErrorId: 0x00 (EventListElement 1) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyGenerate) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:38" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyGenerate with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyGenerate - (EventListElement 0) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyGenerate) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-2294E841-5CAE-4C8C-8D6B-FD0B83E15EE0" id="TCASE-1088909" extId="" name="Apply OutOfRangePattern for Function=KeyGenerate and Parameter=cryIfKeyId." ExecPlan="x">
          <description><![CDATA[Apply OutOfRangePattern for Function=KeyGenerate and Parameter=cryIfKeyId.]]></description>
          <testrun date="2020-08-25 15:42:05" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyGenerate with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyGenerate - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x08, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyGenerate) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:21" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyGenerate with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyGenerate - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x08, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyGenerate) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:38" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyGenerate with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyGenerate - (EventListElement 0) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyGenerate) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
      </testgroup>
      <testgroup name="KeyDerive">
        <testcase almplusGUID="TCASE-5BE2A370-5791-497F-8493-43FA96610132" id="TCASE-1088910" extId="" name="Apply ModuleNotInitializedPattern for KeyFunction=KeyDerive." ExecPlan="x">
          <description><![CDATA[Apply ModuleNotInitializedPattern for KeyFunction=KeyDerive.]]></description>
          <testrun date="2020-08-25 15:42:05" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyDerive with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyDerive - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x09, ErrorId: 0x00 (EventListElement 1) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyDerive) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:21" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyDerive with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyDerive - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x09, ErrorId: 0x00 (EventListElement 1) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyDerive) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:38" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyDerive with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyDerive - (EventListElement 0) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyDerive) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-80EB631B-7EBB-4638-90F3-63A108EA8C5B" id="TCASE-1088911" extId="" name="Apply OutOfRangePattern for Function=KeyDerive and Parameter=targetCryIfKeyId." ExecPlan="x">
          <description><![CDATA[Apply OutOfRangePattern for Function=KeyDerive and Parameter=targetCryIfKeyId.]]></description>
          <testrun date="2020-08-25 15:42:05" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyDerive with a targetCryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyDerive - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x09, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyDerive) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:21" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyDerive with a targetCryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyDerive - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x09, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyDerive) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:38" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyDerive with a targetCryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyDerive - (EventListElement 0) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyDerive) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-2590D04E-E710-49C8-8C9D-EBED381ED69D" id="TCASE-1088912" extId="" name="Apply OutOfRangePattern for Function=KeyDerive and Parameter=cryIfKeyId." ExecPlan="x">
          <description><![CDATA[Apply OutOfRangePattern for Function=KeyDerive and Parameter=cryIfKeyId.]]></description>
          <testrun date="2020-08-25 15:42:05" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyDerive with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyDerive - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x09, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyDerive) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:21" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyDerive with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyDerive - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x09, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyDerive) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:38" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyDerive with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyDerive - (EventListElement 0) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyDerive) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
      </testgroup>
      <testgroup name="KeyExchangeCalcPubVal">
        <testcase almplusGUID="TCASE-C69C3E62-0D85-44D9-8DC0-AC3C77B98DD3" id="TCASE-1088913" extId="" name="Apply ModuleNotInitializedPattern for KeyFunction=KeyExchangeCalcPubVal." ExecPlan="x">
          <description><![CDATA[Apply ModuleNotInitializedPattern for KeyFunction=KeyExchangeCalcPubVal.]]></description>
          <testrun date="2020-08-25 15:42:05" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyExchangeCalcPubVal with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyExchangeCalcPubVal - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x0A, ErrorId: 0x00 (EventListElement 1) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyExchangeCalcPubVal) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:21" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyExchangeCalcPubVal with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyExchangeCalcPubVal - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x0A, ErrorId: 0x00 (EventListElement 1) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyExchangeCalcPubVal) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:38" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyExchangeCalcPubVal with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyExchangeCalcPubVal - (EventListElement 0) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyExchangeCalcPubVal) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-7B813322-D686-45B6-A2B6-D7D98782EAF3" id="TCASE-1088914" extId="" name="Apply NullPointerCheckPattern for Function=KeyExchangeCalcPubVal and Parameter=publicValueLengthPtr." ExecPlan="x">
          <description><![CDATA[Apply NullPointerCheckPattern for Function=KeyExchangeCalcPubVal and Parameter=publicValueLengthPtr.]]></description>
          <testrun date="2020-08-25 15:42:05" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyExchangeCalcPubVal with publicValueLengthPtr equal to null pointer </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyExchangeCalcPubVal - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x0A, ErrorId: 0x02 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyExchangeCalcPubVal) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_POINTER (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:21" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyExchangeCalcPubVal with publicValueLengthPtr equal to null pointer </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyExchangeCalcPubVal - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x0A, ErrorId: 0x02 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyExchangeCalcPubVal) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_POINTER (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:38" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyExchangeCalcPubVal with publicValueLengthPtr equal to null pointer </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyExchangeCalcPubVal - (EventListElement 0) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyExchangeCalcPubVal) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_POINTER (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-758F5DBE-AD0C-4B0C-ACF4-B8B2A8D7E4AE" id="TCASE-1088915" extId="" name="Apply NullPointerCheckPattern for Function=KeyExchangeCalcPubVal and Parameter=publicValuePtr." ExecPlan="x">
          <description><![CDATA[Apply NullPointerCheckPattern for Function=KeyExchangeCalcPubVal and Parameter=publicValuePtr.]]></description>
          <testrun date="2020-08-25 15:42:05" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyExchangeCalcPubVal with publicValuePtr equal to null pointer </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyExchangeCalcPubVal - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x0A, ErrorId: 0x02 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyExchangeCalcPubVal) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_POINTER (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:21" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyExchangeCalcPubVal with publicValuePtr equal to null pointer </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyExchangeCalcPubVal - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x0A, ErrorId: 0x02 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyExchangeCalcPubVal) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_POINTER (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:38" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyExchangeCalcPubVal with publicValuePtr equal to null pointer </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyExchangeCalcPubVal - (EventListElement 0) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyExchangeCalcPubVal) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_POINTER (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-17730849-961D-449B-97EA-FF46E8217059" id="TCASE-1088916" extId="" name="Apply OutOfRangePattern for Function=KeyExchangeCalcPubVal and Parameter=cryIfKeyId." ExecPlan="x">
          <description><![CDATA[Apply OutOfRangePattern for Function=KeyExchangeCalcPubVal and Parameter=cryIfKeyId.]]></description>
          <testrun date="2020-08-25 15:42:05" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyExchangeCalcPubVal with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyExchangeCalcPubVal - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x0A, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyExchangeCalcPubVal) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:21" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyExchangeCalcPubVal with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyExchangeCalcPubVal - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x0A, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyExchangeCalcPubVal) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:38" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyExchangeCalcPubVal with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyExchangeCalcPubVal - (EventListElement 0) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyExchangeCalcPubVal) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-94CE11A0-3C23-4F76-8255-12ED6DF594E6" id="TCASE-1088917" extId="" name="Apply ZeroLengthPattern for Function=KeyExchangeCalcPubVal and Parameter=publicValueLengthPtr." ExecPlan="x">
          <description><![CDATA[Apply ZeroLengthPattern for Function=KeyExchangeCalcPubVal and Parameter=publicValueLengthPtr.]]></description>
          <testrun date="2020-08-25 15:42:05" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyExchangeCalcPubVal with publicValueLengthPtr equal to zero </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyExchangeCalcPubVal - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x0A, ErrorId: 0x04 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyExchangeCalcPubVal) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_VALUE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:22" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyExchangeCalcPubVal with publicValueLengthPtr equal to zero </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyExchangeCalcPubVal - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x0A, ErrorId: 0x04 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyExchangeCalcPubVal) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_VALUE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:38" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyExchangeCalcPubVal with publicValueLengthPtr equal to zero </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyExchangeCalcPubVal - (EventListElement 0) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyExchangeCalcPubVal) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_VALUE (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
      </testgroup>
      <testgroup name="KeyExchangeCalcSecret">
        <testcase almplusGUID="TCASE-A6446999-D797-4C5A-9B56-1FD75452817B" id="TCASE-1088918" extId="" name="Apply ModuleNotInitializedPattern for KeyFunction=KeyExchangeCalcSecret." ExecPlan="x">
          <description><![CDATA[Apply ModuleNotInitializedPattern for KeyFunction=KeyExchangeCalcSecret.]]></description>
          <testrun date="2020-08-25 15:42:05" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyExchangeCalcSecret with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyExchangeCalcSecret - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x0B, ErrorId: 0x00 (EventListElement 1) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyExchangeCalcSecret) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:22" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyExchangeCalcSecret with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyExchangeCalcSecret - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x0B, ErrorId: 0x00 (EventListElement 1) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyExchangeCalcSecret) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:38" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_KeyExchangeCalcSecret with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyExchangeCalcSecret - (EventListElement 0) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyExchangeCalcSecret) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-60C9437C-CB66-4096-BA2F-0C1D82619DA6" id="TCASE-1088919" extId="" name="Apply NullPointerCheckPattern for Function=KeyExchangeCalcSecret and Parameter=partnerPublicValuePtr." ExecPlan="x">
          <description><![CDATA[Apply NullPointerCheckPattern for Function=KeyExchangeCalcSecret and Parameter=partnerPublicValuePtr.]]></description>
          <testrun date="2020-08-25 15:42:05" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyExchangeCalcSecret with partnerPublicValuePtr equal to null pointer </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyExchangeCalcSecret - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x0B, ErrorId: 0x02 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyExchangeCalcSecret) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_POINTER (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:22" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyExchangeCalcSecret with partnerPublicValuePtr equal to null pointer </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyExchangeCalcSecret - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x0B, ErrorId: 0x02 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyExchangeCalcSecret) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_POINTER (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:38" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyExchangeCalcSecret with partnerPublicValuePtr equal to null pointer </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyExchangeCalcSecret - (EventListElement 0) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyExchangeCalcSecret) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_POINTER (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-BDA47CF8-BB9D-4845-A8C6-0B79829EC6ED" id="TCASE-1088920" extId="" name="Apply OutOfRangePattern for Function=KeyExchangeCalcSecret and Parameter=cryIfKeyId." ExecPlan="x">
          <description><![CDATA[Apply OutOfRangePattern for Function=KeyExchangeCalcSecret and Parameter=cryIfKeyId.]]></description>
          <testrun date="2020-08-25 15:42:05" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyExchangeCalcSecret with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyExchangeCalcSecret - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x0B, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyExchangeCalcSecret) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:22" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyExchangeCalcSecret with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyExchangeCalcSecret - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x0B, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyExchangeCalcSecret) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:38" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyExchangeCalcSecret with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyExchangeCalcSecret - (EventListElement 0) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyExchangeCalcSecret) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-EE49E9E9-EDB6-4540-AF98-8AE35616B130" id="TCASE-1088921" extId="" name="Apply ZeroLengthPattern for Function=KeyExchangeCalcSecret and Parameter=partnerPublicValueLength." ExecPlan="x">
          <description><![CDATA[Apply ZeroLengthPattern for Function=KeyExchangeCalcSecret and Parameter=partnerPublicValueLength.]]></description>
          <testrun date="2020-08-25 15:42:05" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyExchangeCalcSecret with partnerPublicValueLength equal to zero </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyExchangeCalcSecret - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x0B, ErrorId: 0x04 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyExchangeCalcSecret) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_VALUE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:22" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyExchangeCalcSecret with partnerPublicValueLength equal to zero </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyExchangeCalcSecret - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x0B, ErrorId: 0x04 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyExchangeCalcSecret) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_VALUE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:38" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_KeyExchangeCalcSecret with partnerPublicValueLength equal to zero </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_KeyExchangeCalcSecret - (EventListElement 0) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_KeyExchangeCalcSecret) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_VALUE (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
      </testgroup>
      <testgroup name="CertificateParse">
        <testcase almplusGUID="TCASE-CC2EC261-54A8-4867-8EEB-C64AD9DFCE95" id="TCASE-1088922" extId="" name="Apply ModuleNotInitializedPattern for KeyFunction=CertificateParse." ExecPlan="x">
          <description><![CDATA[Apply ModuleNotInitializedPattern for KeyFunction=CertificateParse.]]></description>
          <testrun date="2020-08-25 15:42:05" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_CertificateParse with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CertificateParse - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x0C, ErrorId: 0x00 (EventListElement 1) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CertificateParse) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:22" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_CertificateParse with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CertificateParse - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x0C, ErrorId: 0x00 (EventListElement 1) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CertificateParse) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:38" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_CertificateParse with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CertificateParse - (EventListElement 0) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CertificateParse) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-F099450B-66A8-44D0-9F84-DCB7A42686B7" id="TCASE-1088923" extId="" name="Apply OutOfRangePattern for Function=CertificateParse and Parameter=cryIfKeyId." ExecPlan="x">
          <description><![CDATA[Apply OutOfRangePattern for Function=CertificateParse and Parameter=cryIfKeyId.]]></description>
          <testrun date="2020-08-25 15:42:05" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_CertificateParse with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CertificateParse - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x0C, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CertificateParse) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:22" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_CertificateParse with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CertificateParse - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x0C, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CertificateParse) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:38" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_CertificateParse with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CertificateParse - (EventListElement 0) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CertificateParse) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
      </testgroup>
      <testgroup name="CertificateVerify">
        <testcase almplusGUID="TCASE-FA6F27C4-7EC0-4F2A-B567-3A3A50E6AE8E" id="TCASE-1088924" extId="" name="Apply ModuleNotInitializedPattern for KeyFunction=CertificateVerify." ExecPlan="x">
          <description><![CDATA[Apply ModuleNotInitializedPattern for KeyFunction=CertificateVerify.]]></description>
          <testrun date="2020-08-25 15:42:05" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_CertificateVerify with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CertificateVerify - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x11, ErrorId: 0x00 (EventListElement 1) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CertificateVerify) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:22" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_CertificateVerify with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CertificateVerify - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x11, ErrorId: 0x00 (EventListElement 1) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CertificateVerify) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:38" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must not be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_CertificateVerify with valid parameters </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CertificateVerify - (EventListElement 0) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CertificateVerify) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_UNINIT (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-93315491-2B9B-4FA9-A8AC-CB0A513C3E11" id="TCASE-1088925" extId="" name="Apply NullPointerCheckPattern for Function=CertificateVerify and Parameter=verifyPtr." ExecPlan="x">
          <description><![CDATA[Apply NullPointerCheckPattern for Function=CertificateVerify and Parameter=verifyPtr.]]></description>
          <testrun date="2020-08-25 15:42:05" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_CertificateVerify with verifyPtr equal to null pointer </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CertificateVerify - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x11, ErrorId: 0x02 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CertificateVerify) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_POINTER (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:22" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_CertificateVerify with verifyPtr equal to null pointer </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CertificateVerify - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x11, ErrorId: 0x02 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CertificateVerify) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_POINTER (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:38" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_CertificateVerify with verifyPtr equal to null pointer </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CertificateVerify - (EventListElement 0) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CertificateVerify) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_POINTER (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-47CCF86A-4FDB-4A5E-A670-8DC36C328C03" id="TCASE-1088926" extId="" name="Apply OutOfRangePattern for Function=CertificateVerify and Parameter=cryIfKeyId." ExecPlan="x">
          <description><![CDATA[Apply OutOfRangePattern for Function=CertificateVerify and Parameter=cryIfKeyId.]]></description>
          <testrun date="2020-08-25 15:42:05" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_CertificateVerify with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CertificateVerify - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x11, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CertificateVerify) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:22" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_CertificateVerify with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CertificateVerify - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x11, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CertificateVerify) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:38" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_CertificateVerify with a cryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CertificateVerify - (EventListElement 0) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CertificateVerify) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
        <testcase almplusGUID="TCASE-D77A2BDD-A920-4020-96A9-8F9B06CCE0AA" id="TCASE-1088927" extId="" name="Apply OutOfRangePattern for Function=CertificateVerify and Parameter=verifyCryIfKeyId." ExecPlan="x">
          <description><![CDATA[Apply OutOfRangePattern for Function=CertificateVerify and Parameter=verifyCryIfKeyId.]]></description>
          <testrun date="2020-08-25 15:42:05" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_CertificateVerify with a verifyCryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CertificateVerify - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x11, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CertificateVerify) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:22" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_CertificateVerify with a verifyCryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CertificateVerify - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x11, ErrorId: 0x03 (EventListElement 1) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CertificateVerify) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:38" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Call CryIf_CertificateVerify with a verifyCryIfKeyId which is out of bounds </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_CertificateVerify - (EventListElement 0) </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Check if function fails (return value is equal E_NOT_OK) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_CertificateVerify) asserted. </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
      </testgroup>
      <testgroup name="GetVersionInfo">
        <testcase almplusGUID="TCASE-90D76F6F-E350-4D70-B657-DF73322E71E1" id="TCASE-1088928" extId="" name="CryIf_GetVersionInfo NullPointerCheck" ExecPlan="x">
          <description><![CDATA[*CryIf_GetVersionInfo NullPointerCheck*

Asserts that CryIf_GetVersionInfo exists.

Precondition:
* Version Info Api is enabled
* Dev Error Detect is enabled

Test Steps:
# Call CryIf_VersionInfo with versioninfo equal to null pointer
# Assert that CryIf_VersionInfo was called
# Check for DET error code CRYIF_E_PARAM_POINTER (if error report is enabled)]]></description>
          <testrun date="2020-08-25 15:42:05" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Version Info Api is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_VersionInfo with versioninfo equal to null pointer </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_GetVersionInfo - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x01, ErrorId: 0x02 (EventListElement 1) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that CryIf_VersionInfo was called </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_GetVersionInfo) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_POINTER (if error report is enabled) </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:22" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Version Info Api is enabled </Element>
              <NA_Text>Switch CRYIF_VERSION_INFO_API is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
          <testrun date="2020-08-25 15:42:38" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Version Info Api is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_VersionInfo with versioninfo equal to null pointer </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_GetVersionInfo - (EventListElement 0) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that CryIf_VersionInfo was called </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_GetVersionInfo) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET error code CRYIF_E_PARAM_POINTER (if error report is enabled) </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:54" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Version Info Api is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Precondition: Dev Error Detect is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
      </testgroup>
      <testgroup name="Init">
        <testcase almplusGUID="TCASE-ABAD6EED-F63A-4646-A62F-FC0FD3D8B79E" id="TCASE-1088936" extId="" name="Init" ExecPlan="x">
          <description><![CDATA[*Init*
Asserts that the init reports det if cryIf was already initialized.

Precondition:
- Dev Error Report is enabled.
 
Test Steps:
# Prepare: CryIf must be initialized
# Call CryIf_Init
# Assert that CryIf_Init was called
# Check for DET with error code CRYIF_E_ALREADY_INITIALIZED.]]></description>
          <testrun date="2020-08-25 15:42:05" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Report is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_Init </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x00, ErrorId: 0x11 (EventListElement 1) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that CryIf_Init was called </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_Init) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET with error code CRYIF_E_ALREADY_INITIALIZED </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:22" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Report is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_Init </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="" time="0" caller="CUT" callee="UNKNOWN">   Det_ReportError ModuleId: 0x70, ApiId: 0x00, ErrorId: 0x11 (EventListElement 1) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that CryIf_Init was called </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_Init) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET with error code CRYIF_E_ALREADY_INITIALIZED </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 1 (Det_ReportError) asserted. </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:39" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Report is enabled </Element>
              <Element type="TestStep 2" time="0" caller="" callee=""> Prepare: CryIf must be initialized </Element>
              <Element type="sect" time="0" caller="" callee=""> --- EXECUTE --- </Element>
              <Element type="TestStep 3" time="0" caller="" callee=""> Call CryIf_Init </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 4" time="0" caller="" callee=""> Assert that CryIf_Init was called </Element>
              <Element type="ok" time="0" caller="" callee=""> Event List Element 0 (CryIf_Init) asserted. </Element>
              <Element type="TestStep 5" time="0" caller="" callee=""> Check for DET with error code CRYIF_E_ALREADY_INITIALIZED </Element>
            </log>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:55" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <log>
              <Element type="sect" time="0" caller="" callee=""> --- PREPARE --- </Element>
              <Element type="cmd" time="0" caller="UNKNOWN" callee="CUT"> CryIf_Init - (EventListElement 0) </Element>
              <Element type="TestStep 1" time="0" caller="" callee=""> Precondition: Dev Error Report is enabled </Element>
              <NA_Text>Switch CRYIF_DEV_ERROR_DETECT is not not enabled.</NA_Text>
              <Element type="fail" time="0" caller="" callee=""> Number of all events shall be equal to number of asserted events: current value: 1 (0x01) == expected value 0 (0x00) </Element>
              <Element type="fail" time="0" caller="" callee=""> Elem 0: CryIf_Init (comp=0x00,code=0x00) not asserted. </Element>
            </log>
            <result>N/A</result>
          </testrun>
        </testcase>
      </testgroup>
      <description><![CDATA[
*ModuleNotInitializedPattern*
Asserts that the specific function fails when CryIf_Init is not called before.
Precondition:
- Dev Error Detect is enabled.

Test Steps:
# Prepare: CryIf must not be initialized
# Call CryIf_<KeyFunction> with valid parameters.
# Check if function fails (return value is equal E_NOT_OK).
# Check for DET error code CRYIF_E_UNINIT (if error report is enabled).

*NullPointerCheckPattern*

Asserts that the specific <Function> fails when specific <Parameter> is a null pointer.

Precondition:
- Dev Error Detect is enabled.


Test Steps:
# Call CryIf_<Function> with <Parameter> equal to null pointer. 
# Check if function fails (return value is equal E_NOT_OK).
# Check for DET error code CRYIF_E_PARAM_POINTER (if error report is enabled).
*OutOfRangePattern*
Asserts that the specific <Function> fails when a specific <Parameter> is out of range.

Precondition:
- Dev Error Detect is enabled.

 
Test Steps:
# Call CryIf_<Function> with a <Parameter> which is out of bounds. 
# Check if function fails (return value is equal E_NOT_OK).
# Check for DET error code CRYIF_E_PARAM_HANDLE (if error report is enabled).
*ZeroLengthPattern*
Asserts that the specific <Function> fails when the length parameter is set to zero.

Precondition:
- Dev Error Detect is enabled.
 
Test Steps:
# Call CryIf_<Function> with <Parameter> equal to zero. 
# Check if function fails (return value is equal E_NOT_OK).
# Check for DET error code CRYIF_E_PARAM_VALUE (if error report is enabled).]]></description>
    </testgroup>
  </testgroup>
  <testgroup name="Test of component MSSV plugins">
    <description><![CDATA[
Intentionally left empty]]></description>
  </testgroup>
  <testgroup name="Legacy Tests">
    <description><![CDATA[
Intentionally left empty]]></description>
  </testgroup>
  <description><![CDATA[]]></description>
  <testgroup name="Unassigned">
    <testgroup name="Unassigned">
      <testcase id="[TC:Standard_Description.CheckCodingRules]" name="Check BSWMD" ExecPlan="x">
        <description>Check BSWMD file</description>
        <testrun date="2020-08-25 15:41" executor="vismxe" parameter="CryIf_bswmd.arxml" config="Overall" CDK="20.08.25" execCnt="2">
          <testenv>
            <version>EVE  1.5.6.0 </version>
          </testenv>
          <log_build type="CheckVectorRulesBswmd">
            <message file="all" line="---" ID="E105">
              <text>"No invalid characters found."</text>
              <result>ok</result>
            </message>
            <message file="all" line="---" ID="E106">
              <text>"All XmlDeclarations present."</text>
              <result>ok</result>
            </message>
            <message file="CryIf_bswmd.arxml" line="---" ID="E202">
              <text>"All AUTOSAR standard parameter definitions present."</text>
              <result>ok</result>
            </message>
            <message file="CryIf_bswmd.arxml" line="---" ID="E204">
              <text>"File valid according to autosar.xsd."</text>
              <result>ok</result>
            </message>
            <message file="CryIf_bswmd.arxml" line="---" ID="E205">
              <text>"Configuration class(es) of each parameter set correctly."</text>
              <result>ok</result>
            </message>
            <message file="CryIf_bswmd.arxml" line="---" ID="E206">
              <text>"All found 'ORIGIN' elements have values."</text>
              <result>ok</result>
            </message>
            <message file="CryIf_bswmd.arxml" line="---" ID="E207">
              <text>"Minimum value of parameter 'CryIf/CryIfChannel/CryIfChannelId' in VSMD (0) may not be smaller than minimum value defined in StMD (1)."</text>
              <result>warn</result>
            </message>
            <message file="CryIf_bswmd.arxml" line="---" ID="E207">
              <text>"Minimum value of parameter 'CryIf/CryIfKey/CryIfKeyId' in VSMD (0) may not be smaller than minimum value defined in StMD (1)."</text>
              <result>warn</result>
            </message>
            <message file="CryIf_bswmd.arxml" line="---" ID="E208">
              <text>"All found 'DESC' elements have values."</text>
              <result>ok</result>
            </message>
            <message file="CryIf_bswmd.arxml" line="---" ID="E209">
              <text>"Short name of 'AR-PACKAGE' is set to MICROSAR."</text>
              <result>ok</result>
            </message>
            <message file="CryIf_bswmd.arxml" line="---" ID="E210">
              <text>"Valid ECUC-MODULE-DEF/REFINED-MODULE-DEF-REF node for module CryIf found."</text>
              <result>ok</result>
            </message>
            <message file="CryIf_bswmd.arxml" line="---" ID="E211">
              <text>"All DestinationRefs are valid."</text>
              <result>ok</result>
            </message>
            <message file="CryIf_bswmd.arxml" line="---" ID="E212">
              <text>"All ModuleRefs are valid."</text>
              <result>ok</result>
            </message>
            <message file="CryIf_bswmd.arxml" line="---" ID="E213">
              <text>"All DefinitionRefs are valid."</text>
              <result>ok</result>
            </message>
            <message file="CryIf_bswmd.arxml" line="---" ID="E214">
              <text>"BSW-IMPLEMENTATION node is present."</text>
              <result>ok</result>
            </message>
            <message file="CryIf_bswmd.arxml" line="---" ID="E214">
              <text>"CODE-GENERATOR is set to 'DaVinci Configurator'."</text>
              <result>ok</result>
            </message>
            <message file="CryIf_bswmd.arxml" line="---" ID="E215">
              <text>"SW-VERSION is set to '5.01.00'."</text>
              <result>ok</result>
            </message>
            <message file="CryIf_bswmd.arxml" line="---" ID="E215">
              <text>"AR-RELEASE-VERSION is set to '4.04.00'."</text>
              <result>ok</result>
            </message>
            <message file="CryIf_bswmd.arxml" line="---" ID="E220">
              <text>"UUIDs are unique."</text>
              <result>ok</result>
            </message>
            <message file="CryIf_bswmd.arxml" line="---" ID="E221">
              <text>"ShortNames are valid and unique."</text>
              <result>ok</result>
            </message>
            <message file="CryIf_bswmd.arxml" line="---" ID="E222">
              <text>"File does not support post-build implementation variants."</text>
              <result>ok</result>
            </message>
          </log_build>
          <result>warn</result>
          <testenv>
            <version>Vector analysis script 1.00.00</version>
            <option />
          </testenv>
          <log_build type="CheckVectorRulesBswmd">
            <message file="---" line="---" ID="---">
              <text>no findings</text>
              <result>info</result>
            </message>
          </log_build>
          <result>ok</result>
          <runtime>3</runtime>
          <justification date="2020-08-25 15:47:48">
            <text>IDs are generated and start with zero to avoid unused [0] elements in arrays

</text>
          </justification>
        </testrun>
      </testcase>
    </testgroup>
    <testcase id="[TC:Standard_DocTechRef.CheckSpelling]" name="SpellCheck" ExecPlan="x">
      <description>Check spelling of words</description>
      <testrun date="2020-08-25 15:41" executor="vismxe" parameter="TechnicalReference_CryIf.docm" execCnt="2">
        <log_Doc_SpellCheck></log_Doc_SpellCheck>
        <result>ok</result>
      </testrun>
    </testcase>
    <testcase id="[TC:Standard_DocTechRef.CheckGrammar]" name="GrammarCheck" ExecPlan="x">
      <description>Check grammar</description>
      <testrun date="2020-08-25 15:41" executor="vismxe" parameter="TechnicalReference_CryIf.docm" execCnt="2">
        <log_Doc_GrammarCheck></log_Doc_GrammarCheck>
        <result>ok</result>
      </testrun>
    </testcase>
    <testcase id="[TC:Standard_DocTechRef.CheckCodingRules]" name="Check TechRef" ExecPlan="x">
      <description>Check TechRef for consistency and common mistakes.</description>
      <testrun date="2020-08-25 15:41" executor="vismxe" parameter="TechnicalReference_CryIf.docm" execCnt="2">
        <testenv>
          <version>Doc_TechRef Checker 1.00.01</version>
        </testenv>
        <log_build type="CheckVectorRulesDocTechRef">
          <message file="TechnicalReference_CryIf.docm" line="pX" ID="4">
            <text>Status of document is released</text>
            <result>ok</result>
          </message>
        </log_build>
        <result>ok</result>
      </testrun>
    </testcase>
    <testcase id="[TC:Standard_DocTechRef.CheckMetrics]" name="Document Metrics" ExecPlan="x">
      <description>Determine metrics of document</description>
      <testrun date="2020-08-25 15:41" executor="vismxe" parameter="TechnicalReference_CryIf.docm" execCnt="2">
        <log_DocMetric>
          <Metric name="Pages" value="30" />
          <Metric name="Paragraphs" value="912" />
          <Metric name="Sentences" value="1016" />
          <Metric name="Lines" value="1166" />
          <Metric name="Words" value="4394" />
          <Metric name="Characters" value="27867" />
        </log_DocMetric>
        <result>ok</result>
      </testrun>
    </testcase>
    <testcase id="[TC:Standard_Make.CheckCodingRules]" name="VectorRules Analysis" ExecPlan="x">
      <description>Check the make files according to the VECTOR coding rules.</description>
      <testrun date="2020-08-25 15:41" executor="vismxe" parameter="" config="Overall" CDK="20.08.25" execCnt="2">
        <testenv>
          <version>Vector analysis script 1.00.00</version>
          <option>/*none*/</option>
        </testenv>
        <log_build type="CheckVectorRulesMake">
          <message file="---" line="---" ID="---">
            <text>no findings</text>
            <result>info</result>
          </message>
        </log_build>
        <result>ok</result>
        <runtime>0</runtime>
      </testrun>
    </testcase>
    <testcase id="[TC:Standard_Embedded.OverallCodeCoverage]" name="Overall Code Coverage" ExecPlan="x">
      <description>Determine overall code coverage</description>
      <testrun date="2020-08-25 15:42" executor="vismxe" parameter="OverallCoverage" config="Overall" CDK="20.08.25" execCnt="1">
See <link name="OverallCoverage">CodeCoverage\OverallCoverage.html</link> for details. 
<testenv><version>1.9.0</version><option>n/a</option></testenv><log_build type="Coverage" version="2"><message><text>Merging results of 4 input files</text><result>info</result></message><message><text>Reference input = TestConfig4\Coverage_Vector.xml</text><result>info</result></message><message file="cryif.c"><text>Result merged from 4 of 4 files. </text><result>info</result></message></log_build><log_RuntimeCoverage version="1"><justification id="COV_CRYIF_ALWAYS_ON"><reason><![CDATA[CRYIF_LOCAL is always defined externally.]]></reason><accept>tx</accept></justification><justification id="COV_MSR_COMPATIBILITY"><reason><![CDATA[The condition checks whether a switch is defined and conditionally assigns a default value. This is used to ensure compatibility to older AUTOSAR/Component versions.]]></reason><accept>XF</accept></justification><justification id="COV_MSR_CONFIG"><reason><![CDATA[The condition is for optional plausibility checks of the configuration. The uncovered code only contains #error directives used to abort compilation.]]></reason><accept>XF</accept></justification><justification id="COV_MSR_CONSISTENCYCHECK"><reason><![CDATA[This condition is used for consistency checking.]]></reason></justification><justification id="COV_MSR_DEV_ERROR_DETECT"><reason><![CDATA[SafeBSW requires DEV_ERROR_DETECT to be always on. A MSSV Plugin enforces this configuration]]></reason></justification><justification id="COV_MSR_ERRORDIRECTIVE"><reason><![CDATA[The else branch contains an #error directive.]]></reason></justification><justification id="COV_MSR_HEADERGUARD"><reason><![CDATA[The condition is used as headerguard and cannot be tested.]]></reason></justification><justification id="COV_MSR_INACTIVE"><reason><![CDATA[This code is inactive and will not be used.]]></reason></justification><justification id="COV_MSR_IRRELEVANT"><reason><![CDATA[This code part only contains comments and white spaces.]]></reason></justification><justification id="COV_MSR_UNSUPPORTED"><reason><![CDATA[The feature is not supported in SafeBSW. A MSSV Plugin enforces this configuration.]]></reason><accept>XF</accept></justification><file abspath="d:\usr\development\components\if\if_asrifcry\base\implementation\trunk\cryif.c" checksum="e6febbf169068b6479210d4f31ef4b67"><name>cryif.c</name><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>27</modFctCovered><modFctCoveredJust>27</modFctCoveredJust><modFctCnt>27</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>229</modDecCovered><modDecCoveredJust>229</modDecCoveredJust><modDecCnt>229</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>211</condCnt><condCovered>211</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>193</decisionCnt><decisionCovered>193</decisionCovered><decisionCoveredJust>193</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>1</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust><function><name>CryIf_KeyCopyForDifferentDrivers(uint32,uint32)</name><file /><line>253</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>16</modDecCovered><modDecCoveredJust>16</modDecCoveredJust><modDecCnt>16</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>14</condCnt><condCovered>14</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>12</decisionCnt><decisionCovered>12</decisionCovered><decisionCoveredJust>12</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>7</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_TranslateRedirectionKeys(uint32*)</name><file /><line>306</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>2</modDecCovered><modDecCoveredJust>2</modDecCoveredJust><modDecCnt>2</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>2</condCnt><condCovered>2</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>2</decisionCnt><decisionCovered>2</decisionCovered><decisionCoveredJust>2</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>2</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_UpdateRedirectionInfo(const Crypto_JobType*)</name><file /><line>333</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>14</modDecCovered><modDecCoveredJust>14</modDecCoveredJust><modDecCnt>14</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>14</condCnt><condCovered>14</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>14</decisionCnt><decisionCovered>14</decisionCovered><decisionCoveredJust>14</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>8</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_Util_Max(uint32,uint32)</name><file /><line>401</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>2</modDecCovered><modDecCoveredJust>2</modDecCoveredJust><modDecCnt>2</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>2</condCnt><condCovered>2</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>2</decisionCnt><decisionCovered>2</decisionCovered><decisionCoveredJust>2</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>2</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_Util_MemSet(uint8*,uint8,uint32)</name><file /><line>414</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>2</modDecCovered><modDecCoveredJust>2</modDecCoveredJust><modDecCnt>2</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>2</condCnt><condCovered>2</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>2</decisionCnt><decisionCovered>2</decisionCovered><decisionCoveredJust>2</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>2</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_Util_MemCpy(uint8*,const uint8*,uint32)</name><file /><line>432</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>2</modDecCovered><modDecCoveredJust>2</modDecCoveredJust><modDecCnt>2</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>2</condCnt><condCovered>2</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>2</decisionCnt><decisionCovered>2</decisionCovered><decisionCoveredJust>2</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>2</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyElementCopyPartial_Internal(CryIf_CryptoFunctionsIdxOfKeyType,CryIf_CryptoFunctionsIdxOfKeyType,uint32,uint32,uint32,uint32,uint32,uint32,uint32)</name><file /><line>455</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>11</modDecCovered><modDecCoveredJust>11</modDecCoveredJust><modDecCnt>11</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>11</condCnt><condCovered>11</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>11</decisionCnt><decisionCovered>11</decisionCovered><decisionCoveredJust>11</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>7</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_InitMemory(void)</name><file /><line>545</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>N/A</dec_fct><decJust_fct>N/A</decJust_fct><modDecCovered>0</modDecCovered><modDecCoveredJust>0</modDecCoveredJust><modDecCnt>0</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>0</condCnt><condCovered>0</condCovered><cond_fct>0%</cond_fct><cond_fct>N/A</cond_fct><decisionCnt>0</decisionCnt><decisionCovered>0</decisionCovered><decisionCoveredJust>0</decisionCoveredJust><decision_fct>N/A</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>1</CYC></function><function><name>CryIf_Init(void)</name><file /><line>562</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>4</modDecCovered><modDecCoveredJust>4</modDecCoveredJust><modDecCnt>4</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>4</condCnt><condCovered>4</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>4</decisionCnt><decisionCovered>4</decisionCovered><decisionCoveredJust>4</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>3</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_GetVersionInfo(Std_VersionInfoType*)</name><file /><line>604</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>4</modDecCovered><modDecCoveredJust>4</modDecCoveredJust><modDecCnt>4</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>4</condCnt><condCovered>4</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>4</decisionCnt><decisionCovered>4</decisionCovered><decisionCoveredJust>4</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>3</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_CallbackNotification(Crypto_JobType*,Std_ReturnType)</name><file /><line>646</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>N/A</dec_fct><decJust_fct>N/A</decJust_fct><modDecCovered>0</modDecCovered><modDecCoveredJust>0</modDecCoveredJust><modDecCnt>0</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>0</condCnt><condCovered>0</condCovered><cond_fct>0%</cond_fct><cond_fct>N/A</cond_fct><decisionCnt>0</decisionCnt><decisionCovered>0</decisionCovered><decisionCoveredJust>0</decisionCoveredJust><decision_fct>N/A</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>1</CYC></function><function><name>CryIf_ProcessJob(uint32,Crypto_JobType*)</name><file /><line>671</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>16</modDecCovered><modDecCoveredJust>16</modDecCoveredJust><modDecCnt>16</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>16</condCnt><condCovered>16</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>16</decisionCnt><decisionCovered>16</decisionCovered><decisionCoveredJust>16</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>9</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_CancelJob(uint32,Crypto_JobType*)</name><file /><line>758</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>16</modDecCovered><modDecCoveredJust>16</modDecCoveredJust><modDecCnt>16</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>16</condCnt><condCovered>16</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>16</decisionCnt><decisionCovered>16</decisionCovered><decisionCoveredJust>16</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>9</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyElementSet(uint32,uint32,const uint8*,uint32)</name><file /><line>852</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>10</modDecCovered><modDecCoveredJust>10</modDecCoveredJust><modDecCnt>10</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>10</condCnt><condCovered>10</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>10</decisionCnt><decisionCovered>10</decisionCovered><decisionCoveredJust>10</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>6</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeySetValid(uint32)</name><file /><line>916</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>6</modDecCovered><modDecCoveredJust>6</modDecCoveredJust><modDecCnt>6</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>6</condCnt><condCovered>6</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>6</decisionCnt><decisionCovered>6</decisionCovered><decisionCoveredJust>6</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>4</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyElementGet(uint32,uint32,uint8*,uint32*)</name><file /><line>964</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>14</modDecCovered><modDecCoveredJust>14</modDecCoveredJust><modDecCnt>14</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>12</condCnt><condCovered>12</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>10</decisionCnt><decisionCovered>10</decisionCovered><decisionCoveredJust>10</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>6</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyElementCopy(uint32,uint32,uint32,uint32)</name><file /><line>1030</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>14</modDecCovered><modDecCoveredJust>14</modDecCoveredJust><modDecCnt>14</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>12</condCnt><condCovered>12</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>10</decisionCnt><decisionCovered>10</decisionCovered><decisionCoveredJust>10</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>6</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyElementCopyPartial_Stub(uint32,uint32,uint32,uint32,uint32,uint32,uint32)</name><file /><line>1099</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>N/A</dec_fct><decJust_fct>N/A</decJust_fct><modDecCovered>0</modDecCovered><modDecCoveredJust>0</modDecCoveredJust><modDecCnt>0</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>0</condCnt><condCovered>0</condCovered><cond_fct>0%</cond_fct><cond_fct>N/A</cond_fct><decisionCnt>0</decisionCnt><decisionCovered>0</decisionCovered><decisionCoveredJust>0</decisionCoveredJust><decision_fct>N/A</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>1</CYC></function><function><name>CryIf_KeyElementCopyPartial(uint32,uint32,uint32,uint32,uint32,uint32,uint32)</name><file /><line>1129</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>16</modDecCovered><modDecCoveredJust>16</modDecCoveredJust><modDecCnt>16</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>12</condCnt><condCovered>12</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>8</decisionCnt><decisionCovered>8</decisionCovered><decisionCoveredJust>8</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>5</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyCopy(uint32,uint32)</name><file /><line>1199</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>12</modDecCovered><modDecCoveredJust>12</modDecCoveredJust><modDecCnt>12</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>10</condCnt><condCovered>10</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>8</decisionCnt><decisionCovered>8</decisionCovered><decisionCoveredJust>8</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>5</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_RandomSeed(uint32,const uint8*,uint32)</name><file /><line>1258</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>10</modDecCovered><modDecCoveredJust>10</modDecCoveredJust><modDecCnt>10</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>10</condCnt><condCovered>10</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>10</decisionCnt><decisionCovered>10</decisionCovered><decisionCoveredJust>10</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>6</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyGenerate(uint32)</name><file /><line>1320</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>6</modDecCovered><modDecCoveredJust>6</modDecCoveredJust><modDecCnt>6</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>6</condCnt><condCovered>6</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>6</decisionCnt><decisionCovered>6</decisionCovered><decisionCoveredJust>6</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>4</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyDerive(uint32,uint32)</name><file /><line>1368</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>10</modDecCovered><modDecCoveredJust>10</modDecCoveredJust><modDecCnt>10</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>8</condCnt><condCovered>8</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>6</decisionCnt><decisionCovered>6</decisionCovered><decisionCoveredJust>6</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>4</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyExchangeCalcPubVal(uint32,uint8*,uint32*)</name><file /><line>1418</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>14</modDecCovered><modDecCoveredJust>14</modDecCoveredJust><modDecCnt>14</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>12</condCnt><condCovered>12</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>10</decisionCnt><decisionCovered>10</decisionCovered><decisionCoveredJust>10</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>6</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyExchangeCalcSecret(uint32,const uint8*,uint32)</name><file /><line>1480</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>10</modDecCovered><modDecCoveredJust>10</modDecCoveredJust><modDecCnt>10</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>10</condCnt><condCovered>10</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>10</decisionCnt><decisionCovered>10</decisionCovered><decisionCoveredJust>10</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>6</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_CertificateParse(uint32)</name><file /><line>1542</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>6</modDecCovered><modDecCoveredJust>6</modDecCoveredJust><modDecCnt>6</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>6</condCnt><condCovered>6</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>6</decisionCnt><decisionCovered>6</decisionCovered><decisionCoveredJust>6</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>4</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_CertificateVerify(uint32,uint32,Crypto_VerifyResultType*)</name><file /><line>1590</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>12</modDecCovered><modDecCoveredJust>12</modDecCoveredJust><modDecCnt>12</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>10</condCnt><condCovered>10</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>8</decisionCnt><decisionCovered>8</decisionCovered><decisionCoveredJust>8</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>5</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function></file><summary><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>27</modFctCovered><modFctCoveredJust>27</modFctCoveredJust><modFctCnt>27</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>229</modDecCovered><modDecCoveredJust>229</modDecCoveredJust><modDecCnt>229</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>211</condCnt><condCovered>211</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>193</decisionCnt><decisionCovered>193</decisionCovered><decisionCoveredJust>193</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>1</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></summary></log_RuntimeCoverage><result>ok</result><runtime>1</runtime></testrun>
    </testcase>
    <testcase id="[TC:Standard_Embedded.CheckQAC9]" name="QAC Analysis" ExecPlan="x">
      <description>Perform an analysis with QAC.</description>
      <testrun date="2020-08-25 15:43" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1" config=".\Embedded\TestData_Storage\TestConfig1" CDK="20.08.25" execCnt="1">
        <testenv>
          <version>
Helix QAC 2019.2
Build: 2.6.0-10717 Oct 16 2019 for Windows 64-bit
Copyright (C) 2019 Programming Research Ltd., a Perforce company
</version>
          <option></option>
          <QACoption>
            <MISRA standard="2012" ruleset="2018-03-07" />
            <p_a>
acf: based on template acf file provided with CDK 20.08.25 
</p_a>
            <p_a_link>https://vistrpscsvn1.vi.vector.int/svn/zCommon/zCantate/zCantate_CDK/trunk/Scripts/Prj/QAC9/General2012.acf</p_a_link>
            <p_c>cct: based on template cct file provided with CDK 20.08.25 </p_c>
            <p_c_link>https://vistrpscsvn1.vi.vector.int/svn/zCommon/zCantate/zCantate_CDK/trunk/Scripts/Prj/QAC9/Standard.cct</p_c_link>
            <p_s>rcf: based on template rcf file provided with CDK 20.08.25 </p_s>
            <p_s_link>https://vistrpscsvn1.vi.vector.int/svn/zCommon/zCantate/zCantate_CDK/trunk/Scripts/Prj/QAC9/MISRA2012.rcf</p_s_link>
          </QACoption>
        </testenv>
        <log_build type="QAC" />
        <result>ok</result>
        <log_QACSummary version="9">
          <mcm active="0" msgId="Rule2.2" occurence="7">
            <message file="CryIf.c" msgId="2983" msgText="This assignment is redundant. The value of this object is never subsequently used." occurence="7" deviations="7" suppressed="7" suppressed_justified="7">
              <justification count="26" file="CryIf.c" line="382">
                <text>MD_MSR_DummyStmt</text>
              </justification>
              <result>ok</result>
            </message>
          </mcm>
          <mcm active="0" msgId="Rule16.3" occurence="1">
            <message file="CryIf.c" msgId="2003" msgText="The preceding 'switch' clause is not empty and does not end with a 'jump' statement. Execution will fall through." occurence="1" deviations="1" suppressed="1" suppressed_justified="1">
              <justification count="1" file="CryIf.c" line="494">
                <text>MD_CRYIF_NO_BREAK_IN_SWITCH</text>
              </justification>
              <result>ok</result>
            </message>
          </mcm>
          <mcm active="0" msgId="Rule17.8" occurence="7">
            <message file="CryIf.c" msgId="1338" msgText="The parameter '%1s' is being modified." occurence="7" deviations="7" suppressed="7" suppressed_justified="7">
              <justification count="26" file="CryIf.c" line="382">
                <text>MD_MSR_DummyStmt</text>
              </justification>
              <result>ok</result>
            </message>
          </mcm>
          <mcm active="0" msgId="Rule20.1" occurence="8">
            <message file="CryIf.c" msgId="5087" msgText="Use of #include directive after code fragment." occurence="3" deviations="3" suppressed="3" suppressed_justified="3">
              <justification count="4" file="CryIf.c" line="81">
                <text>MD_MSR_MemMap</text>
              </justification>
              <result>ok</result>
            </message>
            <message file="CryIf_Cfg.c" msgId="5087" msgText="Use of #include directive after code fragment." occurence="5" deviations="5" suppressed="5" suppressed_justified="5">
              <justification count="6" file="CryIf_Cfg.c" line="128">
                <text>MD_MSR_MemMap</text>
              </justification>
              <result>ok</result>
            </message>
          </mcm>
          <mcm active="0" msgId="VectorMetrics" occurence="7">
            <message file="CryIf.c" msgId="6060" msgText="Number of function parameters too high (HIS: STPAR = 0..5) %1s" occurence="3" deviations="3" suppressed="3" suppressed_justified="3">
              <justification count="3" file="CryIf.c" line="530">
                <text>MD_CRYIF_STPAR</text>
              </justification>
              <result>ok</result>
            </message>
            <message file="CryIf.c" msgId="6080" msgText="Maximum nesting of control structures too high (HIS: STMIF = 0..4) %1s" occurence="4" deviations="4" suppressed="4" suppressed_justified="4">
              <justification count="4" file="CryIf.c" line="294">
                <text>MD_MSR_STMIF</text>
              </justification>
              <result>ok</result>
            </message>
          </mcm>
        </log_QACSummary>
        <log_QACMetrics>
          <file name="CryIf.c">
            <VAR>210</VAR>
            <DIF>21.78</DIF>
            <BME>6.882</BME>
            <FCO>29</FCO>
            <BMO>4.231</BMO>
            <HAL>1996</HAL>
            <ZIP>1660</ZIP>
            <BMS>5.493</BMS>
            <ECT>3</ECT>
            <SCT>8</SCT>
            <TPP>1716</TPP>
            <M33>321</M33>
            <TOT>4420</TOT>
            <DEV>129.48</DEV>
            <OPN>224</OPN>
            <VOL>35676</VOL>
            <EFF>776874</EFF>
            <TDS>4.538</TDS>
            <OPT>45</OPT>
            <BUG>8</BUG>
            <CDN>1.508</CDN>
            <TLN>756</TLN>
            <SHN>7402</SHN>
            <FNC>27</FNC>
            <M21>2819</M21>
            <M20>1594</M20>
            <M22>246</M22>
            <TDE>4.635</TDE>
            <M28>405</M28>
            <TDO>4.325</TDO>
          </file>
          <function name="CryIf_CallbackNotification">
            <NPATH>1</NPATH>
            <PDN>1.00</PDN>
            <XLN>1</XLN>
            <FN2>3</FN2>
            <FN1>6</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>1</CAL>
            <KNT>0</KNT>
            <M19>0</M19>
            <AV1>9</AV1>
            <CYC>1</CYC>
            <AV3>9</AV3>
            <AV2>9</AV2>
            <PTH>1</PTH>
            <RET>1</RET>
            <FDT>6</FDT>
            <MIF>0</MIF>
            <AKI>2</AKI>
            <ST1>1</ST1>
            <ST3>1</ST3>
            <ST2>1</ST2>
            <M07>1</M07>
            <PAR>2</PAR>
            <ELF>0</ELF>
            <FDN>3</FDN>
            <MCC>0 (1:1)</MCC>
            <LIN>10</LIN>
            <GTO>0</GTO>
            <LCT>0</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>1</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_CancelJob">
            <NPATH>20</NPATH>
            <PDN>0.74</PDN>
            <XLN>27</XLN>
            <FN2>86</FN2>
            <FN1>174</FN1>
            <PBG>1</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>1</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>7</AV1>
            <CYC>9</CYC>
            <AV3>12</AV3>
            <AV2>10</AV2>
            <PTH>20</PTH>
            <RET>1</RET>
            <FDT>18</FDT>
            <MIF>6</MIF>
            <AKI>12</AKI>
            <ST1>36</ST1>
            <ST3>21</ST3>
            <ST2>24</ST2>
            <M07>1</M07>
            <PAR>2</PAR>
            <ELF>0</ELF>
            <FDN>29</FDN>
            <MCC>0 (9:9)</MCC>
            <LIN>79</LIN>
            <GTO>0</GTO>
            <LCT>3</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>3</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_CertificateParse">
            <NPATH>6</NPATH>
            <PDN>0.55</PDN>
            <XLN>11</XLN>
            <FN2>22</FN2>
            <FN1>66</FN1>
            <PBG>1</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>1</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>6</AV1>
            <CYC>4</CYC>
            <AV3>11</AV3>
            <AV2>8</AV2>
            <PTH>6</PTH>
            <RET>1</RET>
            <FDT>14</FDT>
            <MIF>2</MIF>
            <AKI>6</AKI>
            <ST1>14</ST1>
            <ST3>8</ST3>
            <ST2>10</ST2>
            <M07>1</M07>
            <PAR>1</PAR>
            <ELF>0</ELF>
            <FDN>12</FDN>
            <MCC>0 (4:4)</MCC>
            <LIN>34</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>2</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_CertificateVerify">
            <NPATH>10</NPATH>
            <PDN>0.50</PDN>
            <XLN>16</XLN>
            <FN2>29</FN2>
            <FN1>87</FN1>
            <PBG>1</PBG>
            <LOP>1</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>1</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>6</AV1>
            <CYC>5</CYC>
            <AV3>11</AV3>
            <AV2>9</AV2>
            <PTH>8</PTH>
            <RET>1</RET>
            <FDT>15</FDT>
            <MIF>3</MIF>
            <AKI>7</AKI>
            <ST1>17</ST1>
            <ST3>10</ST3>
            <ST2>12</ST2>
            <M07>1</M07>
            <PAR>3</PAR>
            <ELF>0</ELF>
            <FDN>14</FDN>
            <MCC>1 (5:6)</MCC>
            <LIN>42</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>2</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_GetVersionInfo">
            <NPATH>4</NPATH>
            <PDN>0.36</PDN>
            <XLN>11</XLN>
            <FN2>17</FN2>
            <FN1>64</FN1>
            <PBG>1</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>1</CAL>
            <KNT>0</KNT>
            <M19>0</M19>
            <AV1>6</AV1>
            <CYC>3</CYC>
            <AV3>9</AV3>
            <AV2>8</AV2>
            <PTH>4</PTH>
            <RET>1</RET>
            <FDT>13</FDT>
            <MIF>1</MIF>
            <AKI>4</AKI>
            <ST1>13</ST1>
            <ST3>9</ST3>
            <ST2>10</ST2>
            <M07>1</M07>
            <PAR>1</PAR>
            <ELF>0</ELF>
            <FDN>9</FDN>
            <MCC>0 (3:3)</MCC>
            <LIN>29</LIN>
            <GTO>0</GTO>
            <LCT>1</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>1</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_Init">
            <NPATH>4</NPATH>
            <PDN>0.57</PDN>
            <XLN>7</XLN>
            <FN2>10</FN2>
            <FN1>48</FN1>
            <PBG>1</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>1</CAL>
            <KNT>0</KNT>
            <M19>0</M19>
            <AV1>6</AV1>
            <CYC>3</CYC>
            <AV3>11</AV3>
            <AV2>9</AV2>
            <PTH>4</PTH>
            <RET>1</RET>
            <FDT>12</FDT>
            <MIF>1</MIF>
            <AKI>4</AKI>
            <ST1>9</ST1>
            <ST3>5</ST3>
            <ST2>6</ST2>
            <M07>1</M07>
            <PAR>0</PAR>
            <ELF>0</ELF>
            <FDN>4</FDN>
            <MCC>0 (3:3)</MCC>
            <LIN>28</LIN>
            <GTO>0</GTO>
            <LCT>1</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>1</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_InitMemory">
            <NPATH>1</NPATH>
            <PDN>1.00</PDN>
            <XLN>1</XLN>
            <FN2>1</FN2>
            <FN1>7</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>0</M19>
            <AV1>8</AV1>
            <CYC>1</CYC>
            <AV3>8</AV3>
            <AV2>8</AV2>
            <PTH>1</PTH>
            <RET>1</RET>
            <FDT>7</FDT>
            <MIF>0</MIF>
            <AKI>1</AKI>
            <ST1>1</ST1>
            <ST3>1</ST3>
            <ST2>1</ST2>
            <M07>1</M07>
            <PAR>0</PAR>
            <ELF>0</ELF>
            <FDN>1</FDN>
            <MCC>0 (1:1)</MCC>
            <LIN>4</LIN>
            <GTO>0</GTO>
            <LCT>0</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>0</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyCopy">
            <NPATH>10</NPATH>
            <PDN>0.53</PDN>
            <XLN>15</XLN>
            <FN2>36</FN2>
            <FN1>95</FN1>
            <PBG>1</PBG>
            <LOP>1</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>2</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>7</AV1>
            <CYC>5</CYC>
            <AV3>13</AV3>
            <AV2>10</AV2>
            <PTH>8</PTH>
            <RET>1</RET>
            <FDT>15</FDT>
            <MIF>3</MIF>
            <AKI>8</AKI>
            <ST1>18</ST1>
            <ST3>10</ST3>
            <ST2>12</ST2>
            <M07>1</M07>
            <PAR>2</PAR>
            <ELF>0</ELF>
            <FDN>14</FDN>
            <MCC>1 (5:6)</MCC>
            <LIN>44</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>3</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyCopyForDifferentDrivers">
            <NPATH>8</NPATH>
            <PDN>0.47</PDN>
            <XLN>15</XLN>
            <FN2>85</FN2>
            <FN1>148</FN1>
            <PBG>1</PBG>
            <LOP>1</LOP>
            <BAK>0</BAK>
            <KDN>0.07</KDN>
            <CAL>0</CAL>
            <KNT>1</KNT>
            <M19>1</M19>
            <AV1>8</AV1>
            <CYC>7</CYC>
            <AV3>21</AV3>
            <AV2>10</AV2>
            <PTH>7</PTH>
            <RET>1</RET>
            <FDT>18</FDT>
            <MIF>6</MIF>
            <AKI>11</AKI>
            <ST1>28</ST1>
            <ST3>11</ST3>
            <ST2>22</ST2>
            <M07>5</M07>
            <PAR>2</PAR>
            <ELF>0</ELF>
            <FDN>25</FDN>
            <MCC>1 (7:8)</MCC>
            <LIN>39</LIN>
            <GTO>0</GTO>
            <LCT>11</LCT>
            <M29>1</M29>
            <UNV>0</UNV>
            <SUB>4</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyDerive">
            <NPATH>8</NPATH>
            <PDN>0.50</PDN>
            <XLN>12</XLN>
            <FN2>26</FN2>
            <FN1>77</FN1>
            <PBG>1</PBG>
            <LOP>1</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>1</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>7</AV1>
            <CYC>4</CYC>
            <AV3>12</AV3>
            <AV2>10</AV2>
            <PTH>6</PTH>
            <RET>1</RET>
            <FDT>15</FDT>
            <MIF>2</MIF>
            <AKI>6</AKI>
            <ST1>14</ST1>
            <ST3>8</ST3>
            <ST2>10</ST2>
            <M07>1</M07>
            <PAR>2</PAR>
            <ELF>0</ELF>
            <FDN>13</FDN>
            <MCC>1 (4:5)</MCC>
            <LIN>35</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>2</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyElementCopy">
            <NPATH>12</NPATH>
            <PDN>0.48</PDN>
            <XLN>21</XLN>
            <FN2>63</FN2>
            <FN1>130</FN1>
            <PBG>1</PBG>
            <LOP>1</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>1</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>7</AV1>
            <CYC>6</CYC>
            <AV3>17</AV3>
            <AV2>10</AV2>
            <PTH>10</PTH>
            <RET>1</RET>
            <FDT>18</FDT>
            <MIF>4</MIF>
            <AKI>10</AKI>
            <ST1>26</ST1>
            <ST3>11</ST3>
            <ST2>19</ST2>
            <M07>1</M07>
            <PAR>4</PAR>
            <ELF>0</ELF>
            <FDN>26</FDN>
            <MCC>1 (6:7)</MCC>
            <LIN>54</LIN>
            <GTO>0</GTO>
            <LCT>8</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>4</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyElementCopyPartial">
            <NPATH>12</NPATH>
            <PDN>0.42</PDN>
            <XLN>19</XLN>
            <FN2>61</FN2>
            <FN1>120</FN1>
            <PBG>1</PBG>
            <LOP>2</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>2</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>8</AV1>
            <CYC>5</CYC>
            <AV3>18</AV3>
            <AV2>11</AV2>
            <PTH>8</PTH>
            <RET>1</RET>
            <FDT>16</FDT>
            <MIF>3</MIF>
            <AKI>8</AKI>
            <ST1>22</ST1>
            <ST3>10</ST3>
            <ST2>16</ST2>
            <M07>1</M07>
            <PAR>7</PAR>
            <ELF>0</ELF>
            <FDN>26</FDN>
            <MCC>2 (5:7)</MCC>
            <LIN>49</LIN>
            <GTO>0</GTO>
            <LCT>6</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>3</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyElementCopyPartial_Internal">
            <NPATH>8</NPATH>
            <PDN>0.33</PDN>
            <XLN>24</XLN>
            <FN2>64</FN2>
            <FN1>142</FN1>
            <PBG>1</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>3</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>6</AV1>
            <CYC>7</CYC>
            <AV3>12</AV3>
            <AV2>9</AV2>
            <PTH>8</PTH>
            <RET>1</RET>
            <FDT>23</FDT>
            <MIF>5</MIF>
            <AKI>13</AKI>
            <ST1>34</ST1>
            <ST3>17</ST3>
            <ST2>22</ST2>
            <M07>6</M07>
            <PAR>9</PAR>
            <ELF>0</ELF>
            <FDN>24</FDN>
            <MCC>0 (7:7)</MCC>
            <LIN>64</LIN>
            <GTO>0</GTO>
            <LCT>5</LCT>
            <M29>1</M29>
            <UNV>0</UNV>
            <SUB>6</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyElementCopyPartial_Stub">
            <NPATH>1</NPATH>
            <PDN>0.13</PDN>
            <XLN>8</XLN>
            <FN2>14</FN2>
            <FN1>25</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>4</AV1>
            <CYC>1</CYC>
            <AV3>4</AV3>
            <AV2>4</AV2>
            <PTH>1</PTH>
            <RET>1</RET>
            <FDT>6</FDT>
            <MIF>0</MIF>
            <AKI>1</AKI>
            <ST1>8</ST1>
            <ST3>8</ST3>
            <ST2>8</ST2>
            <M07>1</M07>
            <PAR>7</PAR>
            <ELF>0</ELF>
            <FDN>7</FDN>
            <MCC>0 (1:1)</MCC>
            <LIN>9</LIN>
            <GTO>0</GTO>
            <LCT>0</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>0</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyElementGet">
            <NPATH>12</NPATH>
            <PDN>0.56</PDN>
            <XLN>18</XLN>
            <FN2>31</FN2>
            <FN1>94</FN1>
            <PBG>1</PBG>
            <LOP>1</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>1</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>6</AV1>
            <CYC>6</CYC>
            <AV3>10</AV3>
            <AV2>8</AV2>
            <PTH>10</PTH>
            <RET>1</RET>
            <FDT>16</FDT>
            <MIF>4</MIF>
            <AKI>8</AKI>
            <ST1>20</ST1>
            <ST3>12</ST3>
            <ST2>14</ST2>
            <M07>1</M07>
            <PAR>4</PAR>
            <ELF>0</ELF>
            <FDN>16</FDN>
            <MCC>1 (6:7)</MCC>
            <LIN>48</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>2</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyElementSet">
            <NPATH>10</NPATH>
            <PDN>0.56</PDN>
            <XLN>18</XLN>
            <FN2>30</FN2>
            <FN1>87</FN1>
            <PBG>1</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>1</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>5</AV1>
            <CYC>6</CYC>
            <AV3>9</AV3>
            <AV2>8</AV2>
            <PTH>10</PTH>
            <RET>1</RET>
            <FDT>14</FDT>
            <MIF>4</MIF>
            <AKI>8</AKI>
            <ST1>20</ST1>
            <ST3>12</ST3>
            <ST2>14</ST2>
            <M07>1</M07>
            <PAR>4</PAR>
            <ELF>0</ELF>
            <FDN>16</FDN>
            <MCC>0 (6:6)</MCC>
            <LIN>47</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>2</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyExchangeCalcPubVal">
            <NPATH>12</NPATH>
            <PDN>0.59</PDN>
            <XLN>17</XLN>
            <FN2>30</FN2>
            <FN1>93</FN1>
            <PBG>1</PBG>
            <LOP>1</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>1</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>6</AV1>
            <CYC>6</CYC>
            <AV3>10</AV3>
            <AV2>8</AV2>
            <PTH>10</PTH>
            <RET>1</RET>
            <FDT>16</FDT>
            <MIF>4</MIF>
            <AKI>8</AKI>
            <ST1>20</ST1>
            <ST3>12</ST3>
            <ST2>14</ST2>
            <M07>1</M07>
            <PAR>3</PAR>
            <ELF>0</ELF>
            <FDN>15</FDN>
            <MCC>1 (6:7)</MCC>
            <LIN>46</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>2</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyExchangeCalcSecret">
            <NPATH>10</NPATH>
            <PDN>0.59</PDN>
            <XLN>17</XLN>
            <FN2>29</FN2>
            <FN1>86</FN1>
            <PBG>1</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>1</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>5</AV1>
            <CYC>6</CYC>
            <AV3>9</AV3>
            <AV2>8</AV2>
            <PTH>10</PTH>
            <RET>1</RET>
            <FDT>14</FDT>
            <MIF>4</MIF>
            <AKI>8</AKI>
            <ST1>20</ST1>
            <ST3>12</ST3>
            <ST2>14</ST2>
            <M07>1</M07>
            <PAR>3</PAR>
            <ELF>0</ELF>
            <FDN>15</FDN>
            <MCC>0 (6:6)</MCC>
            <LIN>46</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>2</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyGenerate">
            <NPATH>6</NPATH>
            <PDN>0.55</PDN>
            <XLN>11</XLN>
            <FN2>22</FN2>
            <FN1>66</FN1>
            <PBG>1</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>1</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>6</AV1>
            <CYC>4</CYC>
            <AV3>11</AV3>
            <AV2>8</AV2>
            <PTH>6</PTH>
            <RET>1</RET>
            <FDT>14</FDT>
            <MIF>2</MIF>
            <AKI>6</AKI>
            <ST1>14</ST1>
            <ST3>8</ST3>
            <ST2>10</ST2>
            <M07>1</M07>
            <PAR>1</PAR>
            <ELF>0</ELF>
            <FDN>12</FDN>
            <MCC>0 (4:4)</MCC>
            <LIN>34</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>2</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeySetValid">
            <NPATH>6</NPATH>
            <PDN>0.55</PDN>
            <XLN>11</XLN>
            <FN2>22</FN2>
            <FN1>66</FN1>
            <PBG>1</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>1</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>6</AV1>
            <CYC>4</CYC>
            <AV3>11</AV3>
            <AV2>8</AV2>
            <PTH>6</PTH>
            <RET>1</RET>
            <FDT>14</FDT>
            <MIF>2</MIF>
            <AKI>6</AKI>
            <ST1>14</ST1>
            <ST3>8</ST3>
            <ST2>10</ST2>
            <M07>1</M07>
            <PAR>1</PAR>
            <ELF>0</ELF>
            <FDN>12</FDN>
            <MCC>0 (4:4)</MCC>
            <LIN>34</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>2</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_ProcessJob">
            <NPATH>20</NPATH>
            <PDN>0.83</PDN>
            <XLN>24</XLN>
            <FN2>63</FN2>
            <FN1>156</FN1>
            <PBG>1</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>2</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>6</AV1>
            <CYC>9</CYC>
            <AV3>11</AV3>
            <AV2>10</AV2>
            <PTH>20</PTH>
            <RET>1</RET>
            <FDT>17</FDT>
            <MIF>6</MIF>
            <AKI>12</AKI>
            <ST1>32</ST1>
            <ST3>19</ST3>
            <ST2>21</ST2>
            <M07>1</M07>
            <PAR>2</PAR>
            <ELF>0</ELF>
            <FDN>25</FDN>
            <MCC>0 (9:9)</MCC>
            <LIN>72</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>3</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_RandomSeed">
            <NPATH>10</NPATH>
            <PDN>0.59</PDN>
            <XLN>17</XLN>
            <FN2>29</FN2>
            <FN1>86</FN1>
            <PBG>1</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>1</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>5</AV1>
            <CYC>6</CYC>
            <AV3>9</AV3>
            <AV2>8</AV2>
            <PTH>10</PTH>
            <RET>1</RET>
            <FDT>14</FDT>
            <MIF>4</MIF>
            <AKI>8</AKI>
            <ST1>20</ST1>
            <ST3>12</ST3>
            <ST2>14</ST2>
            <M07>1</M07>
            <PAR>3</PAR>
            <ELF>0</ELF>
            <FDN>15</FDN>
            <MCC>0 (6:6)</MCC>
            <LIN>46</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>2</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_TranslateRedirectionKeys">
            <NPATH>2</NPATH>
            <PDN>0.33</PDN>
            <XLN>6</XLN>
            <FN2>9</FN2>
            <FN1>29</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>5</AV1>
            <CYC>2</CYC>
            <AV3>9</AV3>
            <AV2>7</AV2>
            <PTH>2</PTH>
            <RET>1</RET>
            <FDT>12</FDT>
            <MIF>1</MIF>
            <AKI>2</AKI>
            <ST1>7</ST1>
            <ST3>4</ST3>
            <ST2>5</ST2>
            <M07>1</M07>
            <PAR>1</PAR>
            <ELF>0</ELF>
            <FDN>5</FDN>
            <MCC>0 (2:2)</MCC>
            <LIN>15</LIN>
            <GTO>0</GTO>
            <LCT>1</LCT>
            <M29>1</M29>
            <UNV>0</UNV>
            <SUB>0</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_UpdateRedirectionInfo">
            <NPATH>66</NPATH>
            <PDN>3.14</PDN>
            <XLN>21</XLN>
            <FN2>57</FN2>
            <FN1>160</FN1>
            <PBG>2</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>2</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>8</AV1>
            <CYC>8</CYC>
            <AV3>14</AV3>
            <AV2>12</AV2>
            <PTH>66</PTH>
            <RET>1</RET>
            <FDT>15</FDT>
            <MIF>2</MIF>
            <AKI>14</AKI>
            <ST1>25</ST1>
            <ST3>15</ST3>
            <ST2>18</ST2>
            <M07>1</M07>
            <PAR>1</PAR>
            <ELF>0</ELF>
            <FDN>16</FDN>
            <MCC>0 (8:8)</MCC>
            <LIN>55</LIN>
            <GTO>0</GTO>
            <LCT>3</LCT>
            <M29>1</M29>
            <UNV>0</UNV>
            <SUB>6</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_Util_Max">
            <NPATH>1</NPATH>
            <PDN>1.00</PDN>
            <XLN>1</XLN>
            <FN2>4</FN2>
            <FN1>13</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>17</AV1>
            <CYC>1</CYC>
            <AV3>17</AV3>
            <AV2>17</AV2>
            <PTH>1</PTH>
            <RET>1</RET>
            <FDT>9</FDT>
            <MIF>0</MIF>
            <AKI>1</AKI>
            <ST1>1</ST1>
            <ST3>1</ST3>
            <ST2>1</ST2>
            <M07>1</M07>
            <PAR>2</PAR>
            <ELF>0</ELF>
            <FDN>2</FDN>
            <MCC>0 (1:1)</MCC>
            <LIN>1</LIN>
            <GTO>0</GTO>
            <LCT>0</LCT>
            <M29>1</M29>
            <UNV>0</UNV>
            <SUB>0</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_Util_MemCpy">
            <NPATH>2</NPATH>
            <PDN>1.00</PDN>
            <XLN>2</XLN>
            <FN2>11</FN2>
            <FN1>19</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>0</M19>
            <AV1>7</AV1>
            <CYC>2</CYC>
            <AV3>15</AV3>
            <AV2>10</AV2>
            <PTH>2</PTH>
            <RET>1</RET>
            <FDT>11</FDT>
            <MIF>1</MIF>
            <AKI>2</AKI>
            <ST1>4</ST1>
            <ST3>2</ST3>
            <ST2>3</ST2>
            <M07>1</M07>
            <PAR>3</PAR>
            <ELF>0</ELF>
            <FDN>6</FDN>
            <MCC>0 (2:2)</MCC>
            <LIN>6</LIN>
            <GTO>0</GTO>
            <LCT>1</LCT>
            <M29>1</M29>
            <UNV>0</UNV>
            <SUB>0</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_Util_MemSet">
            <NPATH>2</NPATH>
            <PDN>1.00</PDN>
            <XLN>2</XLN>
            <FN2>10</FN2>
            <FN1>17</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>0</M19>
            <AV1>6</AV1>
            <CYC>2</CYC>
            <AV3>13</AV3>
            <AV2>9</AV2>
            <PTH>2</PTH>
            <RET>1</RET>
            <FDT>11</FDT>
            <MIF>1</MIF>
            <AKI>2</AKI>
            <ST1>4</ST1>
            <ST3>2</ST3>
            <ST2>3</ST2>
            <M07>1</M07>
            <PAR>3</PAR>
            <ELF>0</ELF>
            <FDN>6</FDN>
            <MCC>0 (2:2)</MCC>
            <LIN>6</LIN>
            <GTO>0</GTO>
            <LCT>1</LCT>
            <M29>1</M29>
            <UNV>0</UNV>
            <SUB>0</SUB>
            <UNR>0</UNR>
          </function>
          <file name="CryIf_Cfg.c">
            <VAR>61</VAR>
            <DIF>4.66</DIF>
            <BME>0.614</BME>
            <FCO>0</FCO>
            <BMO>0.511</BMO>
            <HAL>539</HAL>
            <ZIP>469</ZIP>
            <BMS>0.576</BMS>
            <ECT>3</ECT>
            <SCT>0</SCT>
            <TPP>229</TPP>
            <M33>42</M33>
            <TOT>269</TOT>
            <DEV>1.36</DEV>
            <OPN>76</OPN>
            <VOL>1755</VOL>
            <EFF>8178</EFF>
            <TDS>2.061</TDS>
            <OPT>16</OPT>
            <BUG>0</BUG>
            <CDN>3.745</CDN>
            <TLN>18</TLN>
            <SHN>1791</SHN>
            <FNC>0</FNC>
            <M21>169</M21>
            <M20>90</M20>
            <M22>3</M22>
            <TDE>2.139</TDE>
            <M28>75</M28>
            <TDO>1.936</TDO>
          </file>
        </log_QACMetrics>
        <runtime>1</runtime>
      </testrun>
      <testrun date="2020-08-25 15:43" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2" config=".\Embedded\TestData_Storage\TestConfig2" CDK="20.08.25" execCnt="1">
        <testenv>
          <version>
Helix QAC 2019.2
Build: 2.6.0-10717 Oct 16 2019 for Windows 64-bit
Copyright (C) 2019 Programming Research Ltd., a Perforce company
</version>
          <option></option>
          <QACoption>
            <MISRA standard="2012" ruleset="2018-03-07" />
            <p_a>
acf: based on template acf file provided with CDK 20.08.25 
</p_a>
            <p_a_link>https://vistrpscsvn1.vi.vector.int/svn/zCommon/zCantate/zCantate_CDK/trunk/Scripts/Prj/QAC9/General2012.acf</p_a_link>
            <p_c>cct: based on template cct file provided with CDK 20.08.25 </p_c>
            <p_c_link>https://vistrpscsvn1.vi.vector.int/svn/zCommon/zCantate/zCantate_CDK/trunk/Scripts/Prj/QAC9/Standard.cct</p_c_link>
            <p_s>rcf: based on template rcf file provided with CDK 20.08.25 </p_s>
            <p_s_link>https://vistrpscsvn1.vi.vector.int/svn/zCommon/zCantate/zCantate_CDK/trunk/Scripts/Prj/QAC9/MISRA2012.rcf</p_s_link>
          </QACoption>
        </testenv>
        <log_build type="QAC" />
        <result>ok</result>
        <log_QACSummary version="9">
          <mcm active="0" msgId="Rule2.2" occurence="7">
            <message file="CryIf.c" msgId="2983" msgText="This assignment is redundant. The value of this object is never subsequently used." occurence="7" deviations="7" suppressed="7" suppressed_justified="7">
              <justification count="26" file="CryIf.c" line="382">
                <text>MD_MSR_DummyStmt</text>
              </justification>
              <result>ok</result>
            </message>
          </mcm>
          <mcm active="0" msgId="Rule16.3" occurence="1">
            <message file="CryIf.c" msgId="2003" msgText="The preceding 'switch' clause is not empty and does not end with a 'jump' statement. Execution will fall through." occurence="1" deviations="1" suppressed="1" suppressed_justified="1">
              <justification count="1" file="CryIf.c" line="494">
                <text>MD_CRYIF_NO_BREAK_IN_SWITCH</text>
              </justification>
              <result>ok</result>
            </message>
          </mcm>
          <mcm active="0" msgId="Rule17.8" occurence="7">
            <message file="CryIf.c" msgId="1338" msgText="The parameter '%1s' is being modified." occurence="7" deviations="7" suppressed="7" suppressed_justified="7">
              <justification count="26" file="CryIf.c" line="382">
                <text>MD_MSR_DummyStmt</text>
              </justification>
              <result>ok</result>
            </message>
          </mcm>
          <mcm active="0" msgId="Rule20.1" occurence="8">
            <message file="CryIf.c" msgId="5087" msgText="Use of #include directive after code fragment." occurence="3" deviations="3" suppressed="3" suppressed_justified="3">
              <justification count="4" file="CryIf.c" line="81">
                <text>MD_MSR_MemMap</text>
              </justification>
              <result>ok</result>
            </message>
            <message file="CryIf_Cfg.c" msgId="5087" msgText="Use of #include directive after code fragment." occurence="5" deviations="5" suppressed="5" suppressed_justified="5">
              <justification count="6" file="CryIf_Cfg.c" line="128">
                <text>MD_MSR_MemMap</text>
              </justification>
              <result>ok</result>
            </message>
          </mcm>
          <mcm active="0" msgId="VectorMetrics" occurence="7">
            <message file="CryIf.c" msgId="6060" msgText="Number of function parameters too high (HIS: STPAR = 0..5) %1s" occurence="3" deviations="3" suppressed="3" suppressed_justified="3">
              <justification count="3" file="CryIf.c" line="530">
                <text>MD_CRYIF_STPAR</text>
              </justification>
              <result>ok</result>
            </message>
            <message file="CryIf.c" msgId="6080" msgText="Maximum nesting of control structures too high (HIS: STMIF = 0..4) %1s" occurence="4" deviations="4" suppressed="4" suppressed_justified="4">
              <justification count="4" file="CryIf.c" line="294">
                <text>MD_MSR_STMIF</text>
              </justification>
              <result>ok</result>
            </message>
          </mcm>
        </log_QACSummary>
        <log_QACMetrics>
          <file name="CryIf.c">
            <VAR>210</VAR>
            <DIF>21.78</DIF>
            <BME>6.882</BME>
            <FCO>24</FCO>
            <BMO>4.231</BMO>
            <HAL>1996</HAL>
            <ZIP>1660</ZIP>
            <BMS>5.493</BMS>
            <ECT>3</ECT>
            <SCT>6</SCT>
            <TPP>1716</TPP>
            <M33>313</M33>
            <TOT>4420</TOT>
            <DEV>129.48</DEV>
            <OPN>224</OPN>
            <VOL>35676</VOL>
            <EFF>776874</EFF>
            <TDS>4.538</TDS>
            <OPT>45</OPT>
            <BUG>8</BUG>
            <CDN>1.508</CDN>
            <TLN>681</TLN>
            <SHN>7402</SHN>
            <FNC>24</FNC>
            <M21>2819</M21>
            <M20>1594</M20>
            <M22>246</M22>
            <TDE>4.635</TDE>
            <M28>405</M28>
            <TDO>4.325</TDO>
          </file>
          <function name="CryIf_CallbackNotification">
            <NPATH>1</NPATH>
            <PDN>1.00</PDN>
            <XLN>1</XLN>
            <FN2>3</FN2>
            <FN1>6</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>1</CAL>
            <KNT>0</KNT>
            <M19>0</M19>
            <AV1>9</AV1>
            <CYC>1</CYC>
            <AV3>9</AV3>
            <AV2>9</AV2>
            <PTH>1</PTH>
            <RET>1</RET>
            <FDT>6</FDT>
            <MIF>0</MIF>
            <AKI>2</AKI>
            <ST1>1</ST1>
            <ST3>1</ST3>
            <ST2>1</ST2>
            <M07>1</M07>
            <PAR>2</PAR>
            <ELF>0</ELF>
            <FDN>3</FDN>
            <MCC>0 (1:1)</MCC>
            <LIN>10</LIN>
            <GTO>0</GTO>
            <LCT>0</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>1</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_CancelJob">
            <NPATH>20</NPATH>
            <PDN>0.74</PDN>
            <XLN>27</XLN>
            <FN2>86</FN2>
            <FN1>174</FN1>
            <PBG>1</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>1</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>7</AV1>
            <CYC>9</CYC>
            <AV3>12</AV3>
            <AV2>10</AV2>
            <PTH>20</PTH>
            <RET>1</RET>
            <FDT>18</FDT>
            <MIF>6</MIF>
            <AKI>12</AKI>
            <ST1>36</ST1>
            <ST3>21</ST3>
            <ST2>24</ST2>
            <M07>1</M07>
            <PAR>2</PAR>
            <ELF>0</ELF>
            <FDN>29</FDN>
            <MCC>0 (9:9)</MCC>
            <LIN>79</LIN>
            <GTO>0</GTO>
            <LCT>3</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>3</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_CertificateParse">
            <NPATH>6</NPATH>
            <PDN>0.55</PDN>
            <XLN>11</XLN>
            <FN2>22</FN2>
            <FN1>66</FN1>
            <PBG>1</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>1</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>6</AV1>
            <CYC>4</CYC>
            <AV3>11</AV3>
            <AV2>8</AV2>
            <PTH>6</PTH>
            <RET>1</RET>
            <FDT>14</FDT>
            <MIF>2</MIF>
            <AKI>6</AKI>
            <ST1>14</ST1>
            <ST3>8</ST3>
            <ST2>10</ST2>
            <M07>1</M07>
            <PAR>1</PAR>
            <ELF>0</ELF>
            <FDN>12</FDN>
            <MCC>0 (4:4)</MCC>
            <LIN>34</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>2</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_CertificateVerify">
            <NPATH>10</NPATH>
            <PDN>0.50</PDN>
            <XLN>16</XLN>
            <FN2>29</FN2>
            <FN1>87</FN1>
            <PBG>1</PBG>
            <LOP>1</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>1</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>6</AV1>
            <CYC>5</CYC>
            <AV3>11</AV3>
            <AV2>9</AV2>
            <PTH>8</PTH>
            <RET>1</RET>
            <FDT>15</FDT>
            <MIF>3</MIF>
            <AKI>7</AKI>
            <ST1>17</ST1>
            <ST3>10</ST3>
            <ST2>12</ST2>
            <M07>1</M07>
            <PAR>3</PAR>
            <ELF>0</ELF>
            <FDN>14</FDN>
            <MCC>1 (5:6)</MCC>
            <LIN>42</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>2</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_Init">
            <NPATH>4</NPATH>
            <PDN>0.57</PDN>
            <XLN>7</XLN>
            <FN2>10</FN2>
            <FN1>48</FN1>
            <PBG>1</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>1</CAL>
            <KNT>0</KNT>
            <M19>0</M19>
            <AV1>6</AV1>
            <CYC>3</CYC>
            <AV3>11</AV3>
            <AV2>9</AV2>
            <PTH>4</PTH>
            <RET>1</RET>
            <FDT>12</FDT>
            <MIF>1</MIF>
            <AKI>4</AKI>
            <ST1>9</ST1>
            <ST3>5</ST3>
            <ST2>6</ST2>
            <M07>1</M07>
            <PAR>0</PAR>
            <ELF>0</ELF>
            <FDN>4</FDN>
            <MCC>0 (3:3)</MCC>
            <LIN>28</LIN>
            <GTO>0</GTO>
            <LCT>1</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>1</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_InitMemory">
            <NPATH>1</NPATH>
            <PDN>1.00</PDN>
            <XLN>1</XLN>
            <FN2>1</FN2>
            <FN1>7</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>0</M19>
            <AV1>8</AV1>
            <CYC>1</CYC>
            <AV3>8</AV3>
            <AV2>8</AV2>
            <PTH>1</PTH>
            <RET>1</RET>
            <FDT>7</FDT>
            <MIF>0</MIF>
            <AKI>1</AKI>
            <ST1>1</ST1>
            <ST3>1</ST3>
            <ST2>1</ST2>
            <M07>1</M07>
            <PAR>0</PAR>
            <ELF>0</ELF>
            <FDN>1</FDN>
            <MCC>0 (1:1)</MCC>
            <LIN>4</LIN>
            <GTO>0</GTO>
            <LCT>0</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>0</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyCopy">
            <NPATH>10</NPATH>
            <PDN>0.53</PDN>
            <XLN>15</XLN>
            <FN2>36</FN2>
            <FN1>95</FN1>
            <PBG>1</PBG>
            <LOP>1</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>2</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>7</AV1>
            <CYC>5</CYC>
            <AV3>13</AV3>
            <AV2>10</AV2>
            <PTH>8</PTH>
            <RET>1</RET>
            <FDT>15</FDT>
            <MIF>3</MIF>
            <AKI>8</AKI>
            <ST1>18</ST1>
            <ST3>10</ST3>
            <ST2>12</ST2>
            <M07>1</M07>
            <PAR>2</PAR>
            <ELF>0</ELF>
            <FDN>14</FDN>
            <MCC>1 (5:6)</MCC>
            <LIN>44</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>3</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyCopyForDifferentDrivers">
            <NPATH>8</NPATH>
            <PDN>0.47</PDN>
            <XLN>15</XLN>
            <FN2>85</FN2>
            <FN1>148</FN1>
            <PBG>1</PBG>
            <LOP>1</LOP>
            <BAK>0</BAK>
            <KDN>0.07</KDN>
            <CAL>0</CAL>
            <KNT>1</KNT>
            <M19>1</M19>
            <AV1>8</AV1>
            <CYC>7</CYC>
            <AV3>21</AV3>
            <AV2>10</AV2>
            <PTH>7</PTH>
            <RET>1</RET>
            <FDT>18</FDT>
            <MIF>6</MIF>
            <AKI>11</AKI>
            <ST1>28</ST1>
            <ST3>11</ST3>
            <ST2>22</ST2>
            <M07>5</M07>
            <PAR>2</PAR>
            <ELF>0</ELF>
            <FDN>25</FDN>
            <MCC>1 (7:8)</MCC>
            <LIN>39</LIN>
            <GTO>0</GTO>
            <LCT>11</LCT>
            <M29>1</M29>
            <UNV>0</UNV>
            <SUB>4</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyDerive">
            <NPATH>8</NPATH>
            <PDN>0.50</PDN>
            <XLN>12</XLN>
            <FN2>26</FN2>
            <FN1>77</FN1>
            <PBG>1</PBG>
            <LOP>1</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>1</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>7</AV1>
            <CYC>4</CYC>
            <AV3>12</AV3>
            <AV2>10</AV2>
            <PTH>6</PTH>
            <RET>1</RET>
            <FDT>15</FDT>
            <MIF>2</MIF>
            <AKI>6</AKI>
            <ST1>14</ST1>
            <ST3>8</ST3>
            <ST2>10</ST2>
            <M07>1</M07>
            <PAR>2</PAR>
            <ELF>0</ELF>
            <FDN>13</FDN>
            <MCC>1 (4:5)</MCC>
            <LIN>35</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>2</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyElementCopy">
            <NPATH>12</NPATH>
            <PDN>0.48</PDN>
            <XLN>21</XLN>
            <FN2>63</FN2>
            <FN1>130</FN1>
            <PBG>1</PBG>
            <LOP>1</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>1</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>7</AV1>
            <CYC>6</CYC>
            <AV3>17</AV3>
            <AV2>10</AV2>
            <PTH>10</PTH>
            <RET>1</RET>
            <FDT>18</FDT>
            <MIF>4</MIF>
            <AKI>10</AKI>
            <ST1>26</ST1>
            <ST3>11</ST3>
            <ST2>19</ST2>
            <M07>1</M07>
            <PAR>4</PAR>
            <ELF>0</ELF>
            <FDN>26</FDN>
            <MCC>1 (6:7)</MCC>
            <LIN>54</LIN>
            <GTO>0</GTO>
            <LCT>8</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>4</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyElementCopyPartial">
            <NPATH>12</NPATH>
            <PDN>0.42</PDN>
            <XLN>19</XLN>
            <FN2>61</FN2>
            <FN1>120</FN1>
            <PBG>1</PBG>
            <LOP>2</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>2</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>8</AV1>
            <CYC>5</CYC>
            <AV3>18</AV3>
            <AV2>11</AV2>
            <PTH>8</PTH>
            <RET>1</RET>
            <FDT>16</FDT>
            <MIF>3</MIF>
            <AKI>8</AKI>
            <ST1>22</ST1>
            <ST3>10</ST3>
            <ST2>16</ST2>
            <M07>1</M07>
            <PAR>7</PAR>
            <ELF>0</ELF>
            <FDN>26</FDN>
            <MCC>2 (5:7)</MCC>
            <LIN>49</LIN>
            <GTO>0</GTO>
            <LCT>6</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>3</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyElementCopyPartial_Internal">
            <NPATH>8</NPATH>
            <PDN>0.33</PDN>
            <XLN>24</XLN>
            <FN2>64</FN2>
            <FN1>142</FN1>
            <PBG>1</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>3</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>6</AV1>
            <CYC>7</CYC>
            <AV3>12</AV3>
            <AV2>9</AV2>
            <PTH>8</PTH>
            <RET>1</RET>
            <FDT>23</FDT>
            <MIF>5</MIF>
            <AKI>13</AKI>
            <ST1>34</ST1>
            <ST3>17</ST3>
            <ST2>22</ST2>
            <M07>6</M07>
            <PAR>9</PAR>
            <ELF>0</ELF>
            <FDN>24</FDN>
            <MCC>0 (7:7)</MCC>
            <LIN>64</LIN>
            <GTO>0</GTO>
            <LCT>5</LCT>
            <M29>1</M29>
            <UNV>0</UNV>
            <SUB>6</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyElementCopyPartial_Stub">
            <NPATH>1</NPATH>
            <PDN>0.13</PDN>
            <XLN>8</XLN>
            <FN2>14</FN2>
            <FN1>25</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>4</AV1>
            <CYC>1</CYC>
            <AV3>4</AV3>
            <AV2>4</AV2>
            <PTH>1</PTH>
            <RET>1</RET>
            <FDT>6</FDT>
            <MIF>0</MIF>
            <AKI>1</AKI>
            <ST1>8</ST1>
            <ST3>8</ST3>
            <ST2>8</ST2>
            <M07>1</M07>
            <PAR>7</PAR>
            <ELF>0</ELF>
            <FDN>7</FDN>
            <MCC>0 (1:1)</MCC>
            <LIN>9</LIN>
            <GTO>0</GTO>
            <LCT>0</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>0</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyElementGet">
            <NPATH>12</NPATH>
            <PDN>0.56</PDN>
            <XLN>18</XLN>
            <FN2>31</FN2>
            <FN1>94</FN1>
            <PBG>1</PBG>
            <LOP>1</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>1</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>6</AV1>
            <CYC>6</CYC>
            <AV3>10</AV3>
            <AV2>8</AV2>
            <PTH>10</PTH>
            <RET>1</RET>
            <FDT>16</FDT>
            <MIF>4</MIF>
            <AKI>8</AKI>
            <ST1>20</ST1>
            <ST3>12</ST3>
            <ST2>14</ST2>
            <M07>1</M07>
            <PAR>4</PAR>
            <ELF>0</ELF>
            <FDN>16</FDN>
            <MCC>1 (6:7)</MCC>
            <LIN>48</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>2</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyElementSet">
            <NPATH>10</NPATH>
            <PDN>0.56</PDN>
            <XLN>18</XLN>
            <FN2>30</FN2>
            <FN1>87</FN1>
            <PBG>1</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>1</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>5</AV1>
            <CYC>6</CYC>
            <AV3>9</AV3>
            <AV2>8</AV2>
            <PTH>10</PTH>
            <RET>1</RET>
            <FDT>14</FDT>
            <MIF>4</MIF>
            <AKI>8</AKI>
            <ST1>20</ST1>
            <ST3>12</ST3>
            <ST2>14</ST2>
            <M07>1</M07>
            <PAR>4</PAR>
            <ELF>0</ELF>
            <FDN>16</FDN>
            <MCC>0 (6:6)</MCC>
            <LIN>47</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>2</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyExchangeCalcPubVal">
            <NPATH>12</NPATH>
            <PDN>0.59</PDN>
            <XLN>17</XLN>
            <FN2>30</FN2>
            <FN1>93</FN1>
            <PBG>1</PBG>
            <LOP>1</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>1</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>6</AV1>
            <CYC>6</CYC>
            <AV3>10</AV3>
            <AV2>8</AV2>
            <PTH>10</PTH>
            <RET>1</RET>
            <FDT>16</FDT>
            <MIF>4</MIF>
            <AKI>8</AKI>
            <ST1>20</ST1>
            <ST3>12</ST3>
            <ST2>14</ST2>
            <M07>1</M07>
            <PAR>3</PAR>
            <ELF>0</ELF>
            <FDN>15</FDN>
            <MCC>1 (6:7)</MCC>
            <LIN>46</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>2</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyExchangeCalcSecret">
            <NPATH>10</NPATH>
            <PDN>0.59</PDN>
            <XLN>17</XLN>
            <FN2>29</FN2>
            <FN1>86</FN1>
            <PBG>1</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>1</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>5</AV1>
            <CYC>6</CYC>
            <AV3>9</AV3>
            <AV2>8</AV2>
            <PTH>10</PTH>
            <RET>1</RET>
            <FDT>14</FDT>
            <MIF>4</MIF>
            <AKI>8</AKI>
            <ST1>20</ST1>
            <ST3>12</ST3>
            <ST2>14</ST2>
            <M07>1</M07>
            <PAR>3</PAR>
            <ELF>0</ELF>
            <FDN>15</FDN>
            <MCC>0 (6:6)</MCC>
            <LIN>46</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>2</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyGenerate">
            <NPATH>6</NPATH>
            <PDN>0.55</PDN>
            <XLN>11</XLN>
            <FN2>22</FN2>
            <FN1>66</FN1>
            <PBG>1</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>1</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>6</AV1>
            <CYC>4</CYC>
            <AV3>11</AV3>
            <AV2>8</AV2>
            <PTH>6</PTH>
            <RET>1</RET>
            <FDT>14</FDT>
            <MIF>2</MIF>
            <AKI>6</AKI>
            <ST1>14</ST1>
            <ST3>8</ST3>
            <ST2>10</ST2>
            <M07>1</M07>
            <PAR>1</PAR>
            <ELF>0</ELF>
            <FDN>12</FDN>
            <MCC>0 (4:4)</MCC>
            <LIN>34</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>2</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeySetValid">
            <NPATH>6</NPATH>
            <PDN>0.55</PDN>
            <XLN>11</XLN>
            <FN2>22</FN2>
            <FN1>66</FN1>
            <PBG>1</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>1</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>6</AV1>
            <CYC>4</CYC>
            <AV3>11</AV3>
            <AV2>8</AV2>
            <PTH>6</PTH>
            <RET>1</RET>
            <FDT>14</FDT>
            <MIF>2</MIF>
            <AKI>6</AKI>
            <ST1>14</ST1>
            <ST3>8</ST3>
            <ST2>10</ST2>
            <M07>1</M07>
            <PAR>1</PAR>
            <ELF>0</ELF>
            <FDN>12</FDN>
            <MCC>0 (4:4)</MCC>
            <LIN>34</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>2</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_ProcessJob">
            <NPATH>14</NPATH>
            <PDN>0.64</PDN>
            <XLN>22</XLN>
            <FN2>59</FN2>
            <FN1>156</FN1>
            <PBG>1</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>1</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>7</AV1>
            <CYC>8</CYC>
            <AV3>12</AV3>
            <AV2>11</AV2>
            <PTH>14</PTH>
            <RET>1</RET>
            <FDT>17</FDT>
            <MIF>6</MIF>
            <AKI>10</AKI>
            <ST1>30</ST1>
            <ST3>17</ST3>
            <ST2>19</ST2>
            <M07>1</M07>
            <PAR>2</PAR>
            <ELF>0</ELF>
            <FDN>24</FDN>
            <MCC>0 (8:8)</MCC>
            <LIN>72</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>2</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_RandomSeed">
            <NPATH>10</NPATH>
            <PDN>0.59</PDN>
            <XLN>17</XLN>
            <FN2>29</FN2>
            <FN1>86</FN1>
            <PBG>1</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>1</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>5</AV1>
            <CYC>6</CYC>
            <AV3>9</AV3>
            <AV2>8</AV2>
            <PTH>10</PTH>
            <RET>1</RET>
            <FDT>14</FDT>
            <MIF>4</MIF>
            <AKI>8</AKI>
            <ST1>20</ST1>
            <ST3>12</ST3>
            <ST2>14</ST2>
            <M07>1</M07>
            <PAR>3</PAR>
            <ELF>0</ELF>
            <FDN>15</FDN>
            <MCC>0 (6:6)</MCC>
            <LIN>46</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>2</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_Util_Max">
            <NPATH>1</NPATH>
            <PDN>1.00</PDN>
            <XLN>1</XLN>
            <FN2>4</FN2>
            <FN1>13</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>17</AV1>
            <CYC>1</CYC>
            <AV3>17</AV3>
            <AV2>17</AV2>
            <PTH>1</PTH>
            <RET>1</RET>
            <FDT>9</FDT>
            <MIF>0</MIF>
            <AKI>1</AKI>
            <ST1>1</ST1>
            <ST3>1</ST3>
            <ST2>1</ST2>
            <M07>1</M07>
            <PAR>2</PAR>
            <ELF>0</ELF>
            <FDN>2</FDN>
            <MCC>0 (1:1)</MCC>
            <LIN>1</LIN>
            <GTO>0</GTO>
            <LCT>0</LCT>
            <M29>1</M29>
            <UNV>0</UNV>
            <SUB>0</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_Util_MemCpy">
            <NPATH>2</NPATH>
            <PDN>1.00</PDN>
            <XLN>2</XLN>
            <FN2>11</FN2>
            <FN1>19</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>0</M19>
            <AV1>7</AV1>
            <CYC>2</CYC>
            <AV3>15</AV3>
            <AV2>10</AV2>
            <PTH>2</PTH>
            <RET>1</RET>
            <FDT>11</FDT>
            <MIF>1</MIF>
            <AKI>2</AKI>
            <ST1>4</ST1>
            <ST3>2</ST3>
            <ST2>3</ST2>
            <M07>1</M07>
            <PAR>3</PAR>
            <ELF>0</ELF>
            <FDN>6</FDN>
            <MCC>0 (2:2)</MCC>
            <LIN>6</LIN>
            <GTO>0</GTO>
            <LCT>1</LCT>
            <M29>1</M29>
            <UNV>0</UNV>
            <SUB>0</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_Util_MemSet">
            <NPATH>2</NPATH>
            <PDN>1.00</PDN>
            <XLN>2</XLN>
            <FN2>10</FN2>
            <FN1>17</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>0</M19>
            <AV1>6</AV1>
            <CYC>2</CYC>
            <AV3>13</AV3>
            <AV2>9</AV2>
            <PTH>2</PTH>
            <RET>1</RET>
            <FDT>11</FDT>
            <MIF>1</MIF>
            <AKI>2</AKI>
            <ST1>4</ST1>
            <ST3>2</ST3>
            <ST2>3</ST2>
            <M07>1</M07>
            <PAR>3</PAR>
            <ELF>0</ELF>
            <FDN>6</FDN>
            <MCC>0 (2:2)</MCC>
            <LIN>6</LIN>
            <GTO>0</GTO>
            <LCT>1</LCT>
            <M29>1</M29>
            <UNV>0</UNV>
            <SUB>0</SUB>
            <UNR>0</UNR>
          </function>
          <file name="CryIf_Cfg.c">
            <VAR>61</VAR>
            <DIF>4.66</DIF>
            <BME>0.614</BME>
            <FCO>0</FCO>
            <BMO>0.511</BMO>
            <HAL>539</HAL>
            <ZIP>469</ZIP>
            <BMS>0.576</BMS>
            <ECT>3</ECT>
            <SCT>0</SCT>
            <TPP>229</TPP>
            <M33>42</M33>
            <TOT>269</TOT>
            <DEV>1.36</DEV>
            <OPN>76</OPN>
            <VOL>1755</VOL>
            <EFF>8178</EFF>
            <TDS>2.061</TDS>
            <OPT>16</OPT>
            <BUG>0</BUG>
            <CDN>3.745</CDN>
            <TLN>18</TLN>
            <SHN>1791</SHN>
            <FNC>0</FNC>
            <M21>169</M21>
            <M20>90</M20>
            <M22>3</M22>
            <TDE>2.139</TDE>
            <M28>75</M28>
            <TDO>1.936</TDO>
          </file>
        </log_QACMetrics>
        <runtime>0</runtime>
      </testrun>
      <testrun date="2020-08-25 15:43" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3" config=".\Embedded\TestData_Storage\TestConfig3" CDK="20.08.25" execCnt="1">
        <testenv>
          <version>
Helix QAC 2019.2
Build: 2.6.0-10717 Oct 16 2019 for Windows 64-bit
Copyright (C) 2019 Programming Research Ltd., a Perforce company
</version>
          <option></option>
          <QACoption>
            <MISRA standard="2012" ruleset="2018-03-07" />
            <p_a>
acf: based on template acf file provided with CDK 20.08.25 
</p_a>
            <p_a_link>https://vistrpscsvn1.vi.vector.int/svn/zCommon/zCantate/zCantate_CDK/trunk/Scripts/Prj/QAC9/General2012.acf</p_a_link>
            <p_c>cct: based on template cct file provided with CDK 20.08.25 </p_c>
            <p_c_link>https://vistrpscsvn1.vi.vector.int/svn/zCommon/zCantate/zCantate_CDK/trunk/Scripts/Prj/QAC9/Standard.cct</p_c_link>
            <p_s>rcf: based on template rcf file provided with CDK 20.08.25 </p_s>
            <p_s_link>https://vistrpscsvn1.vi.vector.int/svn/zCommon/zCantate/zCantate_CDK/trunk/Scripts/Prj/QAC9/MISRA2012.rcf</p_s_link>
          </QACoption>
        </testenv>
        <log_build type="QAC" />
        <result>ok</result>
        <log_QACSummary version="9">
          <mcm active="0" msgId="Rule2.2" occurence="25">
            <message file="CryIf.c" msgId="2983" msgText="This assignment is redundant. The value of this object is never subsequently used." occurence="25" deviations="25" suppressed="25" suppressed_justified="25">
              <justification count="26" file="CryIf.c" line="382">
                <text>MD_MSR_DummyStmt</text>
              </justification>
              <result>ok</result>
            </message>
          </mcm>
          <mcm active="0" msgId="Rule16.3" occurence="1">
            <message file="CryIf.c" msgId="2003" msgText="The preceding 'switch' clause is not empty and does not end with a 'jump' statement. Execution will fall through." occurence="1" deviations="1" suppressed="1" suppressed_justified="1">
              <justification count="1" file="CryIf.c" line="494">
                <text>MD_CRYIF_NO_BREAK_IN_SWITCH</text>
              </justification>
              <result>ok</result>
            </message>
          </mcm>
          <mcm active="0" msgId="Rule17.8" occurence="7">
            <message file="CryIf.c" msgId="1338" msgText="The parameter '%1s' is being modified." occurence="7" deviations="7" suppressed="7" suppressed_justified="7">
              <justification count="26" file="CryIf.c" line="382">
                <text>MD_MSR_DummyStmt</text>
              </justification>
              <result>ok</result>
            </message>
          </mcm>
          <mcm active="0" msgId="Rule20.1" occurence="8">
            <message file="CryIf.c" msgId="5087" msgText="Use of #include directive after code fragment." occurence="3" deviations="3" suppressed="3" suppressed_justified="3">
              <justification count="4" file="CryIf.c" line="81">
                <text>MD_MSR_MemMap</text>
              </justification>
              <result>ok</result>
            </message>
            <message file="CryIf_Cfg.c" msgId="5087" msgText="Use of #include directive after code fragment." occurence="5" deviations="5" suppressed="5" suppressed_justified="5">
              <justification count="6" file="CryIf_Cfg.c" line="117">
                <text>MD_MSR_MemMap</text>
              </justification>
              <result>ok</result>
            </message>
          </mcm>
          <mcm active="0" msgId="VectorMetrics" occurence="7">
            <message file="CryIf.c" msgId="6060" msgText="Number of function parameters too high (HIS: STPAR = 0..5) %1s" occurence="3" deviations="3" suppressed="3" suppressed_justified="3">
              <justification count="3" file="CryIf.c" line="530">
                <text>MD_CRYIF_STPAR</text>
              </justification>
              <result>ok</result>
            </message>
            <message file="CryIf.c" msgId="6080" msgText="Maximum nesting of control structures too high (HIS: STMIF = 0..4) %1s" occurence="4" deviations="4" suppressed="4" suppressed_justified="4">
              <justification count="4" file="CryIf.c" line="294">
                <text>MD_MSR_STMIF</text>
              </justification>
              <result>ok</result>
            </message>
          </mcm>
        </log_QACSummary>
        <log_QACMetrics>
          <file name="CryIf.c">
            <VAR>210</VAR>
            <DIF>21.78</DIF>
            <BME>6.882</BME>
            <FCO>10</FCO>
            <BMO>4.231</BMO>
            <HAL>1996</HAL>
            <ZIP>1660</ZIP>
            <BMS>5.493</BMS>
            <ECT>3</ECT>
            <SCT>8</SCT>
            <TPP>1716</TPP>
            <M33>321</M33>
            <TOT>4420</TOT>
            <DEV>129.48</DEV>
            <OPN>224</OPN>
            <VOL>35676</VOL>
            <EFF>776874</EFF>
            <TDS>4.538</TDS>
            <OPT>45</OPT>
            <BUG>8</BUG>
            <CDN>1.508</CDN>
            <TLN>694</TLN>
            <SHN>7402</SHN>
            <FNC>27</FNC>
            <M21>2819</M21>
            <M20>1594</M20>
            <M22>246</M22>
            <TDE>4.635</TDE>
            <M28>405</M28>
            <TDO>4.325</TDO>
          </file>
          <function name="CryIf_CallbackNotification">
            <NPATH>1</NPATH>
            <PDN>1.00</PDN>
            <XLN>1</XLN>
            <FN2>3</FN2>
            <FN1>6</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>1</CAL>
            <KNT>0</KNT>
            <M19>0</M19>
            <AV1>9</AV1>
            <CYC>1</CYC>
            <AV3>9</AV3>
            <AV2>9</AV2>
            <PTH>1</PTH>
            <RET>1</RET>
            <FDT>6</FDT>
            <MIF>0</MIF>
            <AKI>2</AKI>
            <ST1>1</ST1>
            <ST3>1</ST3>
            <ST2>1</ST2>
            <M07>1</M07>
            <PAR>2</PAR>
            <ELF>0</ELF>
            <FDN>3</FDN>
            <MCC>0 (1:1)</MCC>
            <LIN>10</LIN>
            <GTO>0</GTO>
            <LCT>0</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>1</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_CancelJob">
            <NPATH>7</NPATH>
            <PDN>0.33</PDN>
            <XLN>21</XLN>
            <FN2>58</FN2>
            <FN1>174</FN1>
            <PBG>1</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>8</AV1>
            <CYC>7</CYC>
            <AV3>14</AV3>
            <AV2>12</AV2>
            <PTH>7</PTH>
            <RET>1</RET>
            <FDT>18</FDT>
            <MIF>6</MIF>
            <AKI>8</AKI>
            <ST1>28</ST1>
            <ST3>16</ST3>
            <ST2>18</ST2>
            <M07>1</M07>
            <PAR>2</PAR>
            <ELF>0</ELF>
            <FDN>23</FDN>
            <MCC>0 (7:7)</MCC>
            <LIN>79</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>1</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_CertificateParse">
            <NPATH>3</NPATH>
            <PDN>0.30</PDN>
            <XLN>10</XLN>
            <FN2>21</FN2>
            <FN1>66</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>7</AV1>
            <CYC>3</CYC>
            <AV3>12</AV3>
            <AV2>9</AV2>
            <PTH>3</PTH>
            <RET>1</RET>
            <FDT>14</FDT>
            <MIF>2</MIF>
            <AKI>4</AKI>
            <ST1>12</ST1>
            <ST3>7</ST3>
            <ST2>9</ST2>
            <M07>1</M07>
            <PAR>1</PAR>
            <ELF>0</ELF>
            <FDN>11</FDN>
            <MCC>0 (3:3)</MCC>
            <LIN>34</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>1</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_CertificateVerify">
            <NPATH>5</NPATH>
            <PDN>0.27</PDN>
            <XLN>15</XLN>
            <FN2>28</FN2>
            <FN1>87</FN1>
            <PBG>1</PBG>
            <LOP>1</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>7</AV1>
            <CYC>4</CYC>
            <AV3>12</AV3>
            <AV2>10</AV2>
            <PTH>4</PTH>
            <RET>1</RET>
            <FDT>15</FDT>
            <MIF>3</MIF>
            <AKI>5</AKI>
            <ST1>15</ST1>
            <ST3>9</ST3>
            <ST2>11</ST2>
            <M07>1</M07>
            <PAR>3</PAR>
            <ELF>0</ELF>
            <FDN>13</FDN>
            <MCC>1 (4:5)</MCC>
            <LIN>42</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>1</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_GetVersionInfo">
            <NPATH>2</NPATH>
            <PDN>0.20</PDN>
            <XLN>10</XLN>
            <FN2>16</FN2>
            <FN1>64</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>0</M19>
            <AV1>7</AV1>
            <CYC>2</CYC>
            <AV3>10</AV3>
            <AV2>8</AV2>
            <PTH>2</PTH>
            <RET>1</RET>
            <FDT>13</FDT>
            <MIF>1</MIF>
            <AKI>2</AKI>
            <ST1>11</ST1>
            <ST3>8</ST3>
            <ST2>9</ST2>
            <M07>1</M07>
            <PAR>1</PAR>
            <ELF>0</ELF>
            <FDN>8</FDN>
            <MCC>0 (2:2)</MCC>
            <LIN>29</LIN>
            <GTO>0</GTO>
            <LCT>1</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>0</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_Init">
            <NPATH>2</NPATH>
            <PDN>0.33</PDN>
            <XLN>6</XLN>
            <FN2>9</FN2>
            <FN1>48</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>0</M19>
            <AV1>8</AV1>
            <CYC>2</CYC>
            <AV3>14</AV3>
            <AV2>11</AV2>
            <PTH>2</PTH>
            <RET>1</RET>
            <FDT>12</FDT>
            <MIF>1</MIF>
            <AKI>2</AKI>
            <ST1>7</ST1>
            <ST3>4</ST3>
            <ST2>5</ST2>
            <M07>1</M07>
            <PAR>0</PAR>
            <ELF>0</ELF>
            <FDN>3</FDN>
            <MCC>0 (2:2)</MCC>
            <LIN>28</LIN>
            <GTO>0</GTO>
            <LCT>1</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>0</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_InitMemory">
            <NPATH>1</NPATH>
            <PDN>1.00</PDN>
            <XLN>1</XLN>
            <FN2>1</FN2>
            <FN1>7</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>0</M19>
            <AV1>8</AV1>
            <CYC>1</CYC>
            <AV3>8</AV3>
            <AV2>8</AV2>
            <PTH>1</PTH>
            <RET>1</RET>
            <FDT>7</FDT>
            <MIF>0</MIF>
            <AKI>1</AKI>
            <ST1>1</ST1>
            <ST3>1</ST3>
            <ST2>1</ST2>
            <M07>1</M07>
            <PAR>0</PAR>
            <ELF>0</ELF>
            <FDN>1</FDN>
            <MCC>0 (1:1)</MCC>
            <LIN>4</LIN>
            <GTO>0</GTO>
            <LCT>0</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>0</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyCopy">
            <NPATH>5</NPATH>
            <PDN>0.29</PDN>
            <XLN>14</XLN>
            <FN2>35</FN2>
            <FN1>95</FN1>
            <PBG>1</PBG>
            <LOP>1</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>1</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>8</AV1>
            <CYC>4</CYC>
            <AV3>14</AV3>
            <AV2>11</AV2>
            <PTH>4</PTH>
            <RET>1</RET>
            <FDT>15</FDT>
            <MIF>3</MIF>
            <AKI>6</AKI>
            <ST1>16</ST1>
            <ST3>9</ST3>
            <ST2>11</ST2>
            <M07>1</M07>
            <PAR>2</PAR>
            <ELF>0</ELF>
            <FDN>13</FDN>
            <MCC>1 (4:5)</MCC>
            <LIN>44</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>2</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyCopyForDifferentDrivers">
            <NPATH>8</NPATH>
            <PDN>0.47</PDN>
            <XLN>15</XLN>
            <FN2>85</FN2>
            <FN1>148</FN1>
            <PBG>1</PBG>
            <LOP>1</LOP>
            <BAK>0</BAK>
            <KDN>0.07</KDN>
            <CAL>0</CAL>
            <KNT>1</KNT>
            <M19>1</M19>
            <AV1>8</AV1>
            <CYC>7</CYC>
            <AV3>21</AV3>
            <AV2>10</AV2>
            <PTH>7</PTH>
            <RET>1</RET>
            <FDT>18</FDT>
            <MIF>6</MIF>
            <AKI>11</AKI>
            <ST1>28</ST1>
            <ST3>11</ST3>
            <ST2>22</ST2>
            <M07>5</M07>
            <PAR>2</PAR>
            <ELF>0</ELF>
            <FDN>25</FDN>
            <MCC>1 (7:8)</MCC>
            <LIN>39</LIN>
            <GTO>0</GTO>
            <LCT>11</LCT>
            <M29>1</M29>
            <UNV>0</UNV>
            <SUB>4</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyDerive">
            <NPATH>4</NPATH>
            <PDN>0.27</PDN>
            <XLN>11</XLN>
            <FN2>25</FN2>
            <FN1>77</FN1>
            <PBG>0</PBG>
            <LOP>1</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>8</AV1>
            <CYC>3</CYC>
            <AV3>14</AV3>
            <AV2>11</AV2>
            <PTH>3</PTH>
            <RET>1</RET>
            <FDT>15</FDT>
            <MIF>2</MIF>
            <AKI>4</AKI>
            <ST1>12</ST1>
            <ST3>7</ST3>
            <ST2>9</ST2>
            <M07>1</M07>
            <PAR>2</PAR>
            <ELF>0</ELF>
            <FDN>12</FDN>
            <MCC>1 (3:4)</MCC>
            <LIN>35</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>1</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyElementCopy">
            <NPATH>6</NPATH>
            <PDN>0.25</PDN>
            <XLN>20</XLN>
            <FN2>62</FN2>
            <FN1>130</FN1>
            <PBG>1</PBG>
            <LOP>1</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>8</AV1>
            <CYC>5</CYC>
            <AV3>19</AV3>
            <AV2>10</AV2>
            <PTH>5</PTH>
            <RET>1</RET>
            <FDT>18</FDT>
            <MIF>4</MIF>
            <AKI>8</AKI>
            <ST1>24</ST1>
            <ST3>10</ST3>
            <ST2>18</ST2>
            <M07>1</M07>
            <PAR>4</PAR>
            <ELF>0</ELF>
            <FDN>25</FDN>
            <MCC>1 (5:6)</MCC>
            <LIN>54</LIN>
            <GTO>0</GTO>
            <LCT>8</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>3</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyElementCopyPartial">
            <NPATH>6</NPATH>
            <PDN>0.22</PDN>
            <XLN>18</XLN>
            <FN2>60</FN2>
            <FN1>120</FN1>
            <PBG>1</PBG>
            <LOP>2</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>1</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>9</AV1>
            <CYC>4</CYC>
            <AV3>20</AV3>
            <AV2>12</AV2>
            <PTH>4</PTH>
            <RET>1</RET>
            <FDT>16</FDT>
            <MIF>3</MIF>
            <AKI>6</AKI>
            <ST1>20</ST1>
            <ST3>9</ST3>
            <ST2>15</ST2>
            <M07>1</M07>
            <PAR>7</PAR>
            <ELF>0</ELF>
            <FDN>25</FDN>
            <MCC>2 (4:6)</MCC>
            <LIN>49</LIN>
            <GTO>0</GTO>
            <LCT>6</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>2</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyElementCopyPartial_Internal">
            <NPATH>8</NPATH>
            <PDN>0.33</PDN>
            <XLN>24</XLN>
            <FN2>64</FN2>
            <FN1>142</FN1>
            <PBG>1</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>3</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>6</AV1>
            <CYC>7</CYC>
            <AV3>12</AV3>
            <AV2>9</AV2>
            <PTH>8</PTH>
            <RET>1</RET>
            <FDT>23</FDT>
            <MIF>5</MIF>
            <AKI>13</AKI>
            <ST1>34</ST1>
            <ST3>17</ST3>
            <ST2>22</ST2>
            <M07>6</M07>
            <PAR>9</PAR>
            <ELF>0</ELF>
            <FDN>24</FDN>
            <MCC>0 (7:7)</MCC>
            <LIN>64</LIN>
            <GTO>0</GTO>
            <LCT>5</LCT>
            <M29>1</M29>
            <UNV>0</UNV>
            <SUB>6</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyElementCopyPartial_Stub">
            <NPATH>1</NPATH>
            <PDN>0.13</PDN>
            <XLN>8</XLN>
            <FN2>14</FN2>
            <FN1>25</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>4</AV1>
            <CYC>1</CYC>
            <AV3>4</AV3>
            <AV2>4</AV2>
            <PTH>1</PTH>
            <RET>1</RET>
            <FDT>6</FDT>
            <MIF>0</MIF>
            <AKI>1</AKI>
            <ST1>8</ST1>
            <ST3>8</ST3>
            <ST2>8</ST2>
            <M07>1</M07>
            <PAR>7</PAR>
            <ELF>0</ELF>
            <FDN>7</FDN>
            <MCC>0 (1:1)</MCC>
            <LIN>9</LIN>
            <GTO>0</GTO>
            <LCT>0</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>0</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyElementGet">
            <NPATH>6</NPATH>
            <PDN>0.29</PDN>
            <XLN>17</XLN>
            <FN2>30</FN2>
            <FN1>94</FN1>
            <PBG>1</PBG>
            <LOP>1</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>6</AV1>
            <CYC>5</CYC>
            <AV3>11</AV3>
            <AV2>9</AV2>
            <PTH>5</PTH>
            <RET>1</RET>
            <FDT>16</FDT>
            <MIF>4</MIF>
            <AKI>6</AKI>
            <ST1>18</ST1>
            <ST3>11</ST3>
            <ST2>13</ST2>
            <M07>1</M07>
            <PAR>4</PAR>
            <ELF>0</ELF>
            <FDN>15</FDN>
            <MCC>1 (5:6)</MCC>
            <LIN>48</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>1</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyElementSet">
            <NPATH>5</NPATH>
            <PDN>0.29</PDN>
            <XLN>17</XLN>
            <FN2>29</FN2>
            <FN1>87</FN1>
            <PBG>1</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>6</AV1>
            <CYC>5</CYC>
            <AV3>10</AV3>
            <AV2>8</AV2>
            <PTH>5</PTH>
            <RET>1</RET>
            <FDT>14</FDT>
            <MIF>4</MIF>
            <AKI>6</AKI>
            <ST1>18</ST1>
            <ST3>11</ST3>
            <ST2>13</ST2>
            <M07>1</M07>
            <PAR>4</PAR>
            <ELF>0</ELF>
            <FDN>15</FDN>
            <MCC>0 (5:5)</MCC>
            <LIN>47</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>1</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyExchangeCalcPubVal">
            <NPATH>6</NPATH>
            <PDN>0.31</PDN>
            <XLN>16</XLN>
            <FN2>29</FN2>
            <FN1>93</FN1>
            <PBG>1</PBG>
            <LOP>1</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>6</AV1>
            <CYC>5</CYC>
            <AV3>11</AV3>
            <AV2>9</AV2>
            <PTH>5</PTH>
            <RET>1</RET>
            <FDT>16</FDT>
            <MIF>4</MIF>
            <AKI>6</AKI>
            <ST1>18</ST1>
            <ST3>11</ST3>
            <ST2>13</ST2>
            <M07>1</M07>
            <PAR>3</PAR>
            <ELF>0</ELF>
            <FDN>14</FDN>
            <MCC>1 (5:6)</MCC>
            <LIN>46</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>1</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyExchangeCalcSecret">
            <NPATH>5</NPATH>
            <PDN>0.31</PDN>
            <XLN>16</XLN>
            <FN2>28</FN2>
            <FN1>86</FN1>
            <PBG>1</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>6</AV1>
            <CYC>5</CYC>
            <AV3>10</AV3>
            <AV2>8</AV2>
            <PTH>5</PTH>
            <RET>1</RET>
            <FDT>14</FDT>
            <MIF>4</MIF>
            <AKI>6</AKI>
            <ST1>18</ST1>
            <ST3>11</ST3>
            <ST2>13</ST2>
            <M07>1</M07>
            <PAR>3</PAR>
            <ELF>0</ELF>
            <FDN>14</FDN>
            <MCC>0 (5:5)</MCC>
            <LIN>46</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>1</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyGenerate">
            <NPATH>3</NPATH>
            <PDN>0.30</PDN>
            <XLN>10</XLN>
            <FN2>21</FN2>
            <FN1>66</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>7</AV1>
            <CYC>3</CYC>
            <AV3>12</AV3>
            <AV2>9</AV2>
            <PTH>3</PTH>
            <RET>1</RET>
            <FDT>14</FDT>
            <MIF>2</MIF>
            <AKI>4</AKI>
            <ST1>12</ST1>
            <ST3>7</ST3>
            <ST2>9</ST2>
            <M07>1</M07>
            <PAR>1</PAR>
            <ELF>0</ELF>
            <FDN>11</FDN>
            <MCC>0 (3:3)</MCC>
            <LIN>34</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>1</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeySetValid">
            <NPATH>3</NPATH>
            <PDN>0.30</PDN>
            <XLN>10</XLN>
            <FN2>21</FN2>
            <FN1>66</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>7</AV1>
            <CYC>3</CYC>
            <AV3>12</AV3>
            <AV2>9</AV2>
            <PTH>3</PTH>
            <RET>1</RET>
            <FDT>14</FDT>
            <MIF>2</MIF>
            <AKI>4</AKI>
            <ST1>12</ST1>
            <ST3>7</ST3>
            <ST2>9</ST2>
            <M07>1</M07>
            <PAR>1</PAR>
            <ELF>0</ELF>
            <FDN>11</FDN>
            <MCC>0 (3:3)</MCC>
            <LIN>34</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>1</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_ProcessJob">
            <NPATH>10</NPATH>
            <PDN>0.43</PDN>
            <XLN>23</XLN>
            <FN2>62</FN2>
            <FN1>156</FN1>
            <PBG>1</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>1</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>7</AV1>
            <CYC>8</CYC>
            <AV3>12</AV3>
            <AV2>10</AV2>
            <PTH>10</PTH>
            <RET>1</RET>
            <FDT>17</FDT>
            <MIF>6</MIF>
            <AKI>10</AKI>
            <ST1>30</ST1>
            <ST3>18</ST3>
            <ST2>20</ST2>
            <M07>1</M07>
            <PAR>2</PAR>
            <ELF>0</ELF>
            <FDN>24</FDN>
            <MCC>0 (8:8)</MCC>
            <LIN>72</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>2</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_RandomSeed">
            <NPATH>5</NPATH>
            <PDN>0.31</PDN>
            <XLN>16</XLN>
            <FN2>28</FN2>
            <FN1>86</FN1>
            <PBG>1</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>6</AV1>
            <CYC>5</CYC>
            <AV3>10</AV3>
            <AV2>8</AV2>
            <PTH>5</PTH>
            <RET>1</RET>
            <FDT>14</FDT>
            <MIF>4</MIF>
            <AKI>6</AKI>
            <ST1>18</ST1>
            <ST3>11</ST3>
            <ST2>13</ST2>
            <M07>1</M07>
            <PAR>3</PAR>
            <ELF>0</ELF>
            <FDN>14</FDN>
            <MCC>0 (5:5)</MCC>
            <LIN>46</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>1</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_TranslateRedirectionKeys">
            <NPATH>2</NPATH>
            <PDN>0.33</PDN>
            <XLN>6</XLN>
            <FN2>9</FN2>
            <FN1>29</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>5</AV1>
            <CYC>2</CYC>
            <AV3>9</AV3>
            <AV2>7</AV2>
            <PTH>2</PTH>
            <RET>1</RET>
            <FDT>12</FDT>
            <MIF>1</MIF>
            <AKI>2</AKI>
            <ST1>7</ST1>
            <ST3>4</ST3>
            <ST2>5</ST2>
            <M07>1</M07>
            <PAR>1</PAR>
            <ELF>0</ELF>
            <FDN>5</FDN>
            <MCC>0 (2:2)</MCC>
            <LIN>15</LIN>
            <GTO>0</GTO>
            <LCT>1</LCT>
            <M29>1</M29>
            <UNV>0</UNV>
            <SUB>0</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_UpdateRedirectionInfo">
            <NPATH>66</NPATH>
            <PDN>3.67</PDN>
            <XLN>18</XLN>
            <FN2>56</FN2>
            <FN1>160</FN1>
            <PBG>2</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>1</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>8</AV1>
            <CYC>8</CYC>
            <AV3>14</AV3>
            <AV2>12</AV2>
            <PTH>66</PTH>
            <RET>1</RET>
            <FDT>15</FDT>
            <MIF>2</MIF>
            <AKI>13</AKI>
            <ST1>25</ST1>
            <ST3>15</ST3>
            <ST2>18</ST2>
            <M07>1</M07>
            <PAR>1</PAR>
            <ELF>0</ELF>
            <FDN>14</FDN>
            <MCC>0 (8:8)</MCC>
            <LIN>55</LIN>
            <GTO>0</GTO>
            <LCT>3</LCT>
            <M29>1</M29>
            <UNV>0</UNV>
            <SUB>5</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_Util_Max">
            <NPATH>1</NPATH>
            <PDN>1.00</PDN>
            <XLN>1</XLN>
            <FN2>4</FN2>
            <FN1>13</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>17</AV1>
            <CYC>1</CYC>
            <AV3>17</AV3>
            <AV2>17</AV2>
            <PTH>1</PTH>
            <RET>1</RET>
            <FDT>9</FDT>
            <MIF>0</MIF>
            <AKI>1</AKI>
            <ST1>1</ST1>
            <ST3>1</ST3>
            <ST2>1</ST2>
            <M07>1</M07>
            <PAR>2</PAR>
            <ELF>0</ELF>
            <FDN>2</FDN>
            <MCC>0 (1:1)</MCC>
            <LIN>1</LIN>
            <GTO>0</GTO>
            <LCT>0</LCT>
            <M29>1</M29>
            <UNV>0</UNV>
            <SUB>0</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_Util_MemCpy">
            <NPATH>2</NPATH>
            <PDN>1.00</PDN>
            <XLN>2</XLN>
            <FN2>11</FN2>
            <FN1>19</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>0</M19>
            <AV1>7</AV1>
            <CYC>2</CYC>
            <AV3>15</AV3>
            <AV2>10</AV2>
            <PTH>2</PTH>
            <RET>1</RET>
            <FDT>11</FDT>
            <MIF>1</MIF>
            <AKI>2</AKI>
            <ST1>4</ST1>
            <ST3>2</ST3>
            <ST2>3</ST2>
            <M07>1</M07>
            <PAR>3</PAR>
            <ELF>0</ELF>
            <FDN>6</FDN>
            <MCC>0 (2:2)</MCC>
            <LIN>6</LIN>
            <GTO>0</GTO>
            <LCT>1</LCT>
            <M29>1</M29>
            <UNV>0</UNV>
            <SUB>0</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_Util_MemSet">
            <NPATH>2</NPATH>
            <PDN>1.00</PDN>
            <XLN>2</XLN>
            <FN2>10</FN2>
            <FN1>17</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>0</M19>
            <AV1>6</AV1>
            <CYC>2</CYC>
            <AV3>13</AV3>
            <AV2>9</AV2>
            <PTH>2</PTH>
            <RET>1</RET>
            <FDT>11</FDT>
            <MIF>1</MIF>
            <AKI>2</AKI>
            <ST1>4</ST1>
            <ST3>2</ST3>
            <ST2>3</ST2>
            <M07>1</M07>
            <PAR>3</PAR>
            <ELF>0</ELF>
            <FDN>6</FDN>
            <MCC>0 (2:2)</MCC>
            <LIN>6</LIN>
            <GTO>0</GTO>
            <LCT>1</LCT>
            <M29>1</M29>
            <UNV>0</UNV>
            <SUB>0</SUB>
            <UNR>0</UNR>
          </function>
          <file name="CryIf_Cfg.c">
            <VAR>60</VAR>
            <DIF>4.67</DIF>
            <BME>0.576</BME>
            <FCO>0</FCO>
            <BMO>0.482</BMO>
            <HAL>531</HAL>
            <ZIP>463</ZIP>
            <BMS>0.542</BMS>
            <ECT>3</ECT>
            <SCT>0</SCT>
            <TPP>217</TPP>
            <M33>42</M33>
            <TOT>265</TOT>
            <DEV>1.34</DEV>
            <OPN>75</OPN>
            <VOL>1725</VOL>
            <EFF>8056</EFF>
            <TDS>2.018</TDS>
            <OPT>16</OPT>
            <BUG>0</BUG>
            <CDN>3.302</CDN>
            <TLN>18</TLN>
            <SHN>1765</SHN>
            <FNC>0</FNC>
            <M21>167</M21>
            <M20>88</M20>
            <M22>3</M22>
            <TDE>2.095</TDE>
            <M28>75</M28>
            <TDO>1.895</TDO>
          </file>
        </log_QACMetrics>
        <runtime>0</runtime>
      </testrun>
      <testrun date="2020-08-25 15:44" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4" config=".\Embedded\TestData_Storage\TestConfig4" CDK="20.08.25" execCnt="1">
        <testenv>
          <version>
Helix QAC 2019.2
Build: 2.6.0-10717 Oct 16 2019 for Windows 64-bit
Copyright (C) 2019 Programming Research Ltd., a Perforce company
</version>
          <option></option>
          <QACoption>
            <MISRA standard="2012" ruleset="2018-03-07" />
            <p_a>
acf: based on template acf file provided with CDK 20.08.25 
</p_a>
            <p_a_link>https://vistrpscsvn1.vi.vector.int/svn/zCommon/zCantate/zCantate_CDK/trunk/Scripts/Prj/QAC9/General2012.acf</p_a_link>
            <p_c>cct: based on template cct file provided with CDK 20.08.25 </p_c>
            <p_c_link>https://vistrpscsvn1.vi.vector.int/svn/zCommon/zCantate/zCantate_CDK/trunk/Scripts/Prj/QAC9/Standard.cct</p_c_link>
            <p_s>rcf: based on template rcf file provided with CDK 20.08.25 </p_s>
            <p_s_link>https://vistrpscsvn1.vi.vector.int/svn/zCommon/zCantate/zCantate_CDK/trunk/Scripts/Prj/QAC9/MISRA2012.rcf</p_s_link>
          </QACoption>
        </testenv>
        <log_build type="QAC" />
        <result>ok</result>
        <log_QACSummary version="9">
          <mcm active="0" msgId="Rule2.2" occurence="39">
            <message file="CryIf.c" msgId="2983" msgText="This assignment is redundant. The value of this object is never subsequently used." occurence="25" deviations="25" suppressed="25" suppressed_justified="25">
              <justification count="26" file="CryIf.c" line="382">
                <text>MD_MSR_DummyStmt</text>
              </justification>
              <result>ok</result>
            </message>
            <message file="CryIf.c" msgId="2981" msgText="This initialization is redundant. The value of this object is never used before being modified." occurence="14" deviations="14" suppressed="14" suppressed_justified="14">
              <justification count="14" file="CryIf.c" line="675">
                <text>MD_MSR_RetVal</text>
              </justification>
              <result>ok</result>
            </message>
          </mcm>
          <mcm active="0" msgId="Rule16.3" occurence="1">
            <message file="CryIf.c" msgId="2003" msgText="The preceding 'switch' clause is not empty and does not end with a 'jump' statement. Execution will fall through." occurence="1" deviations="1" suppressed="1" suppressed_justified="1">
              <justification count="1" file="CryIf.c" line="494">
                <text>MD_CRYIF_NO_BREAK_IN_SWITCH</text>
              </justification>
              <result>ok</result>
            </message>
          </mcm>
          <mcm active="0" msgId="Rule17.8" occurence="7">
            <message file="CryIf.c" msgId="1338" msgText="The parameter '%1s' is being modified." occurence="7" deviations="7" suppressed="7" suppressed_justified="7">
              <justification count="26" file="CryIf.c" line="382">
                <text>MD_MSR_DummyStmt</text>
              </justification>
              <result>ok</result>
            </message>
          </mcm>
          <mcm active="0" msgId="Rule20.1" occurence="6">
            <message file="CryIf.c" msgId="5087" msgText="Use of #include directive after code fragment." occurence="1" deviations="1" suppressed="1" suppressed_justified="1">
              <justification count="4" file="CryIf.c" line="81">
                <text>MD_MSR_MemMap</text>
              </justification>
              <result>ok</result>
            </message>
            <message file="CryIf_Cfg.c" msgId="5087" msgText="Use of #include directive after code fragment." occurence="5" deviations="5" suppressed="5" suppressed_justified="5">
              <justification count="6" file="CryIf_Cfg.c" line="117">
                <text>MD_MSR_MemMap</text>
              </justification>
              <result>ok</result>
            </message>
          </mcm>
          <mcm active="0" msgId="VectorMetrics" occurence="5">
            <message file="CryIf.c" msgId="6060" msgText="Number of function parameters too high (HIS: STPAR = 0..5) %1s" occurence="3" deviations="3" suppressed="3" suppressed_justified="3">
              <justification count="3" file="CryIf.c" line="530">
                <text>MD_CRYIF_STPAR</text>
              </justification>
              <result>ok</result>
            </message>
            <message file="CryIf.c" msgId="6080" msgText="Maximum nesting of control structures too high (HIS: STMIF = 0..4) %1s" occurence="2" deviations="2" suppressed="2" suppressed_justified="2">
              <justification count="4" file="CryIf.c" line="294">
                <text>MD_MSR_STMIF</text>
              </justification>
              <result>ok</result>
            </message>
          </mcm>
        </log_QACSummary>
        <log_QACMetrics>
          <file name="CryIf.c">
            <VAR>210</VAR>
            <DIF>21.78</DIF>
            <BME>6.882</BME>
            <FCO>10</FCO>
            <BMO>4.231</BMO>
            <HAL>1996</HAL>
            <ZIP>1660</ZIP>
            <BMS>5.493</BMS>
            <ECT>3</ECT>
            <SCT>7</SCT>
            <TPP>1716</TPP>
            <M33>321</M33>
            <TOT>4420</TOT>
            <DEV>129.48</DEV>
            <OPN>224</OPN>
            <VOL>35676</VOL>
            <EFF>776874</EFF>
            <TDS>4.538</TDS>
            <OPT>45</OPT>
            <BUG>8</BUG>
            <CDN>1.508</CDN>
            <TLN>479</TLN>
            <SHN>7402</SHN>
            <FNC>27</FNC>
            <M21>2819</M21>
            <M20>1594</M20>
            <M22>246</M22>
            <TDE>4.635</TDE>
            <M28>405</M28>
            <TDO>4.325</TDO>
          </file>
          <function name="CryIf_CallbackNotification">
            <NPATH>1</NPATH>
            <PDN>1.00</PDN>
            <XLN>1</XLN>
            <FN2>3</FN2>
            <FN1>6</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>1</CAL>
            <KNT>0</KNT>
            <M19>0</M19>
            <AV1>9</AV1>
            <CYC>1</CYC>
            <AV3>9</AV3>
            <AV2>9</AV2>
            <PTH>1</PTH>
            <RET>1</RET>
            <FDT>6</FDT>
            <MIF>0</MIF>
            <AKI>2</AKI>
            <ST1>1</ST1>
            <ST3>1</ST3>
            <ST2>1</ST2>
            <M07>1</M07>
            <PAR>2</PAR>
            <ELF>0</ELF>
            <FDN>3</FDN>
            <MCC>0 (1:1)</MCC>
            <LIN>10</LIN>
            <GTO>0</GTO>
            <LCT>0</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>1</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_CancelJob">
            <NPATH>4</NPATH>
            <PDN>0.29</PDN>
            <XLN>14</XLN>
            <FN2>51</FN2>
            <FN1>174</FN1>
            <PBG>1</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>11</AV1>
            <CYC>4</CYC>
            <AV3>22</AV3>
            <AV2>18</AV2>
            <PTH>4</PTH>
            <RET>1</RET>
            <FDT>18</FDT>
            <MIF>3</MIF>
            <AKI>5</AKI>
            <ST1>19</ST1>
            <ST3>10</ST3>
            <ST2>12</ST2>
            <M07>1</M07>
            <PAR>2</PAR>
            <ELF>0</ELF>
            <FDN>22</FDN>
            <MCC>0 (4:4)</MCC>
            <LIN>79</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>1</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_CertificateParse">
            <NPATH>1</NPATH>
            <PDN>0.20</PDN>
            <XLN>5</XLN>
            <FN2>16</FN2>
            <FN1>66</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>13</AV1>
            <CYC>1</CYC>
            <AV3>27</AV3>
            <AV2>16</AV2>
            <PTH>1</PTH>
            <RET>1</RET>
            <FDT>14</FDT>
            <MIF>0</MIF>
            <AKI>2</AKI>
            <ST1>6</ST1>
            <ST3>3</ST3>
            <ST2>5</ST2>
            <M07>1</M07>
            <PAR>1</PAR>
            <ELF>0</ELF>
            <FDN>10</FDN>
            <MCC>0 (1:1)</MCC>
            <LIN>34</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>1</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_CertificateVerify">
            <NPATH>1</NPATH>
            <PDN>0.14</PDN>
            <XLN>7</XLN>
            <FN2>20</FN2>
            <FN1>87</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>17</AV1>
            <CYC>1</CYC>
            <AV3>35</AV3>
            <AV2>21</AV2>
            <PTH>1</PTH>
            <RET>1</RET>
            <FDT>15</FDT>
            <MIF>0</MIF>
            <AKI>2</AKI>
            <ST1>6</ST1>
            <ST3>3</ST3>
            <ST2>5</ST2>
            <M07>1</M07>
            <PAR>3</PAR>
            <ELF>0</ELF>
            <FDN>12</FDN>
            <MCC>0 (1:1)</MCC>
            <LIN>42</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>1</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_GetVersionInfo">
            <NPATH>1</NPATH>
            <PDN>0.14</PDN>
            <XLN>7</XLN>
            <FN2>14</FN2>
            <FN1>64</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>0</M19>
            <AV1>9</AV1>
            <CYC>1</CYC>
            <AV3>13</AV3>
            <AV2>11</AV2>
            <PTH>1</PTH>
            <RET>1</RET>
            <FDT>13</FDT>
            <MIF>0</MIF>
            <AKI>1</AKI>
            <ST1>8</ST1>
            <ST3>6</ST3>
            <ST2>7</ST2>
            <M07>1</M07>
            <PAR>1</PAR>
            <ELF>0</ELF>
            <FDN>8</FDN>
            <MCC>0 (1:1)</MCC>
            <LIN>29</LIN>
            <GTO>0</GTO>
            <LCT>1</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>0</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_Init">
            <NPATH>1</NPATH>
            <PDN>0.50</PDN>
            <XLN>2</XLN>
            <FN2>4</FN2>
            <FN1>48</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>0</M19>
            <AV1>17</AV1>
            <CYC>1</CYC>
            <AV3>52</AV3>
            <AV2>26</AV2>
            <PTH>1</PTH>
            <RET>1</RET>
            <FDT>12</FDT>
            <MIF>0</MIF>
            <AKI>1</AKI>
            <ST1>3</ST1>
            <ST3>1</ST3>
            <ST2>2</ST2>
            <M07>1</M07>
            <PAR>0</PAR>
            <ELF>0</ELF>
            <FDN>2</FDN>
            <MCC>0 (1:1)</MCC>
            <LIN>28</LIN>
            <GTO>0</GTO>
            <LCT>1</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>0</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_InitMemory">
            <NPATH>1</NPATH>
            <PDN>0.00</PDN>
            <XLN>0</XLN>
            <FN2>0</FN2>
            <FN1>7</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>0</M19>
            <AV1>0</AV1>
            <CYC>1</CYC>
            <AV3>0</AV3>
            <AV2>0</AV2>
            <PTH>1</PTH>
            <RET>1</RET>
            <FDT>7</FDT>
            <MIF>0</MIF>
            <AKI>1</AKI>
            <ST1>0</ST1>
            <ST3>0</ST3>
            <ST2>0</ST2>
            <M07>1</M07>
            <PAR>0</PAR>
            <ELF>0</ELF>
            <FDN>0</FDN>
            <MCC>0 (1:1)</MCC>
            <LIN>4</LIN>
            <GTO>0</GTO>
            <LCT>0</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>0</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyCopy">
            <NPATH>2</NPATH>
            <PDN>0.25</PDN>
            <XLN>8</XLN>
            <FN2>29</FN2>
            <FN1>95</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>1</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>12</AV1>
            <CYC>2</CYC>
            <AV3>24</AV3>
            <AV2>17</AV2>
            <PTH>2</PTH>
            <RET>1</RET>
            <FDT>15</FDT>
            <MIF>1</MIF>
            <AKI>4</AKI>
            <ST1>10</ST1>
            <ST3>5</ST3>
            <ST2>7</ST2>
            <M07>1</M07>
            <PAR>2</PAR>
            <ELF>0</ELF>
            <FDN>12</FDN>
            <MCC>0 (2:2)</MCC>
            <LIN>44</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>2</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyCopyForDifferentDrivers">
            <NPATH>8</NPATH>
            <PDN>0.47</PDN>
            <XLN>15</XLN>
            <FN2>85</FN2>
            <FN1>148</FN1>
            <PBG>1</PBG>
            <LOP>1</LOP>
            <BAK>0</BAK>
            <KDN>0.07</KDN>
            <CAL>0</CAL>
            <KNT>1</KNT>
            <M19>1</M19>
            <AV1>8</AV1>
            <CYC>7</CYC>
            <AV3>21</AV3>
            <AV2>10</AV2>
            <PTH>7</PTH>
            <RET>1</RET>
            <FDT>18</FDT>
            <MIF>6</MIF>
            <AKI>11</AKI>
            <ST1>28</ST1>
            <ST3>11</ST3>
            <ST2>22</ST2>
            <M07>5</M07>
            <PAR>2</PAR>
            <ELF>0</ELF>
            <FDN>25</FDN>
            <MCC>1 (7:8)</MCC>
            <LIN>39</LIN>
            <GTO>0</GTO>
            <LCT>11</LCT>
            <M29>1</M29>
            <UNV>0</UNV>
            <SUB>4</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyDerive">
            <NPATH>1</NPATH>
            <PDN>0.20</PDN>
            <XLN>5</XLN>
            <FN2>19</FN2>
            <FN1>77</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>16</AV1>
            <CYC>1</CYC>
            <AV3>32</AV3>
            <AV2>19</AV2>
            <PTH>1</PTH>
            <RET>1</RET>
            <FDT>15</FDT>
            <MIF>0</MIF>
            <AKI>2</AKI>
            <ST1>6</ST1>
            <ST3>3</ST3>
            <ST2>5</ST2>
            <M07>1</M07>
            <PAR>2</PAR>
            <ELF>0</ELF>
            <FDN>11</FDN>
            <MCC>0 (1:1)</MCC>
            <LIN>35</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>1</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyElementCopy">
            <NPATH>3</NPATH>
            <PDN>0.21</PDN>
            <XLN>14</XLN>
            <FN2>56</FN2>
            <FN1>130</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>10</AV1>
            <CYC>3</CYC>
            <AV3>31</AV3>
            <AV2>13</AV2>
            <PTH>3</PTH>
            <RET>1</RET>
            <FDT>18</FDT>
            <MIF>2</MIF>
            <AKI>6</AKI>
            <ST1>18</ST1>
            <ST3>6</ST3>
            <ST2>14</ST2>
            <M07>1</M07>
            <PAR>4</PAR>
            <ELF>0</ELF>
            <FDN>24</FDN>
            <MCC>0 (3:3)</MCC>
            <LIN>54</LIN>
            <GTO>0</GTO>
            <LCT>8</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>3</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyElementCopyPartial">
            <NPATH>3</NPATH>
            <PDN>0.17</PDN>
            <XLN>12</XLN>
            <FN2>54</FN2>
            <FN1>120</FN1>
            <PBG>0</PBG>
            <LOP>1</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>1</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>12</AV1>
            <CYC>2</CYC>
            <AV3>34</AV3>
            <AV2>15</AV2>
            <PTH>2</PTH>
            <RET>1</RET>
            <FDT>16</FDT>
            <MIF>1</MIF>
            <AKI>4</AKI>
            <ST1>14</ST1>
            <ST3>5</ST3>
            <ST2>11</ST2>
            <M07>1</M07>
            <PAR>7</PAR>
            <ELF>0</ELF>
            <FDN>24</FDN>
            <MCC>1 (2:3)</MCC>
            <LIN>49</LIN>
            <GTO>0</GTO>
            <LCT>6</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>2</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyElementCopyPartial_Internal">
            <NPATH>8</NPATH>
            <PDN>0.33</PDN>
            <XLN>24</XLN>
            <FN2>64</FN2>
            <FN1>142</FN1>
            <PBG>1</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>3</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>6</AV1>
            <CYC>7</CYC>
            <AV3>12</AV3>
            <AV2>9</AV2>
            <PTH>8</PTH>
            <RET>1</RET>
            <FDT>23</FDT>
            <MIF>5</MIF>
            <AKI>13</AKI>
            <ST1>34</ST1>
            <ST3>17</ST3>
            <ST2>22</ST2>
            <M07>6</M07>
            <PAR>9</PAR>
            <ELF>0</ELF>
            <FDN>24</FDN>
            <MCC>0 (7:7)</MCC>
            <LIN>64</LIN>
            <GTO>0</GTO>
            <LCT>5</LCT>
            <M29>1</M29>
            <UNV>0</UNV>
            <SUB>6</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyElementCopyPartial_Stub">
            <NPATH>1</NPATH>
            <PDN>0.13</PDN>
            <XLN>8</XLN>
            <FN2>14</FN2>
            <FN1>25</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>4</AV1>
            <CYC>1</CYC>
            <AV3>4</AV3>
            <AV2>4</AV2>
            <PTH>1</PTH>
            <RET>1</RET>
            <FDT>6</FDT>
            <MIF>0</MIF>
            <AKI>1</AKI>
            <ST1>8</ST1>
            <ST3>8</ST3>
            <ST2>8</ST2>
            <M07>1</M07>
            <PAR>7</PAR>
            <ELF>0</ELF>
            <FDN>7</FDN>
            <MCC>0 (1:1)</MCC>
            <LIN>9</LIN>
            <GTO>0</GTO>
            <LCT>0</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>0</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyElementGet">
            <NPATH>1</NPATH>
            <PDN>0.13</PDN>
            <XLN>8</XLN>
            <FN2>20</FN2>
            <FN1>94</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>19</AV1>
            <CYC>1</CYC>
            <AV3>38</AV3>
            <AV2>22</AV2>
            <PTH>1</PTH>
            <RET>1</RET>
            <FDT>16</FDT>
            <MIF>0</MIF>
            <AKI>2</AKI>
            <ST1>6</ST1>
            <ST3>3</ST3>
            <ST2>5</ST2>
            <M07>1</M07>
            <PAR>4</PAR>
            <ELF>0</ELF>
            <FDN>14</FDN>
            <MCC>0 (1:1)</MCC>
            <LIN>48</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>1</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyElementSet">
            <NPATH>1</NPATH>
            <PDN>0.13</PDN>
            <XLN>8</XLN>
            <FN2>20</FN2>
            <FN1>87</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>17</AV1>
            <CYC>1</CYC>
            <AV3>35</AV3>
            <AV2>21</AV2>
            <PTH>1</PTH>
            <RET>1</RET>
            <FDT>14</FDT>
            <MIF>0</MIF>
            <AKI>2</AKI>
            <ST1>6</ST1>
            <ST3>3</ST3>
            <ST2>5</ST2>
            <M07>1</M07>
            <PAR>4</PAR>
            <ELF>0</ELF>
            <FDN>14</FDN>
            <MCC>0 (1:1)</MCC>
            <LIN>47</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>1</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyExchangeCalcPubVal">
            <NPATH>1</NPATH>
            <PDN>0.14</PDN>
            <XLN>7</XLN>
            <FN2>19</FN2>
            <FN1>93</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>18</AV1>
            <CYC>1</CYC>
            <AV3>37</AV3>
            <AV2>22</AV2>
            <PTH>1</PTH>
            <RET>1</RET>
            <FDT>16</FDT>
            <MIF>0</MIF>
            <AKI>2</AKI>
            <ST1>6</ST1>
            <ST3>3</ST3>
            <ST2>5</ST2>
            <M07>1</M07>
            <PAR>3</PAR>
            <ELF>0</ELF>
            <FDN>13</FDN>
            <MCC>0 (1:1)</MCC>
            <LIN>46</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>1</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyExchangeCalcSecret">
            <NPATH>1</NPATH>
            <PDN>0.14</PDN>
            <XLN>7</XLN>
            <FN2>19</FN2>
            <FN1>86</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>17</AV1>
            <CYC>1</CYC>
            <AV3>35</AV3>
            <AV2>21</AV2>
            <PTH>1</PTH>
            <RET>1</RET>
            <FDT>14</FDT>
            <MIF>0</MIF>
            <AKI>2</AKI>
            <ST1>6</ST1>
            <ST3>3</ST3>
            <ST2>5</ST2>
            <M07>1</M07>
            <PAR>3</PAR>
            <ELF>0</ELF>
            <FDN>13</FDN>
            <MCC>0 (1:1)</MCC>
            <LIN>46</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>1</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeyGenerate">
            <NPATH>1</NPATH>
            <PDN>0.20</PDN>
            <XLN>5</XLN>
            <FN2>16</FN2>
            <FN1>66</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>13</AV1>
            <CYC>1</CYC>
            <AV3>27</AV3>
            <AV2>16</AV2>
            <PTH>1</PTH>
            <RET>1</RET>
            <FDT>14</FDT>
            <MIF>0</MIF>
            <AKI>2</AKI>
            <ST1>6</ST1>
            <ST3>3</ST3>
            <ST2>5</ST2>
            <M07>1</M07>
            <PAR>1</PAR>
            <ELF>0</ELF>
            <FDN>10</FDN>
            <MCC>0 (1:1)</MCC>
            <LIN>34</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>1</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_KeySetValid">
            <NPATH>1</NPATH>
            <PDN>0.20</PDN>
            <XLN>5</XLN>
            <FN2>16</FN2>
            <FN1>66</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>13</AV1>
            <CYC>1</CYC>
            <AV3>27</AV3>
            <AV2>16</AV2>
            <PTH>1</PTH>
            <RET>1</RET>
            <FDT>14</FDT>
            <MIF>0</MIF>
            <AKI>2</AKI>
            <ST1>6</ST1>
            <ST3>3</ST3>
            <ST2>5</ST2>
            <M07>1</M07>
            <PAR>1</PAR>
            <ELF>0</ELF>
            <FDN>10</FDN>
            <MCC>0 (1:1)</MCC>
            <LIN>34</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>1</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_ProcessJob">
            <NPATH>4</NPATH>
            <PDN>0.27</PDN>
            <XLN>15</XLN>
            <FN2>53</FN2>
            <FN1>156</FN1>
            <PBG>1</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>1</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>10</AV1>
            <CYC>4</CYC>
            <AV3>19</AV3>
            <AV2>16</AV2>
            <PTH>4</PTH>
            <RET>1</RET>
            <FDT>17</FDT>
            <MIF>3</MIF>
            <AKI>6</AKI>
            <ST1>20</ST1>
            <ST3>11</ST3>
            <ST2>13</ST2>
            <M07>1</M07>
            <PAR>2</PAR>
            <ELF>0</ELF>
            <FDN>23</FDN>
            <MCC>0 (4:4)</MCC>
            <LIN>72</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>2</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_RandomSeed">
            <NPATH>1</NPATH>
            <PDN>0.14</PDN>
            <XLN>7</XLN>
            <FN2>19</FN2>
            <FN1>86</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>17</AV1>
            <CYC>1</CYC>
            <AV3>35</AV3>
            <AV2>21</AV2>
            <PTH>1</PTH>
            <RET>1</RET>
            <FDT>14</FDT>
            <MIF>0</MIF>
            <AKI>2</AKI>
            <ST1>6</ST1>
            <ST3>3</ST3>
            <ST2>5</ST2>
            <M07>1</M07>
            <PAR>3</PAR>
            <ELF>0</ELF>
            <FDN>13</FDN>
            <MCC>0 (1:1)</MCC>
            <LIN>46</LIN>
            <GTO>0</GTO>
            <LCT>2</LCT>
            <M29>0</M29>
            <UNV>0</UNV>
            <SUB>1</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_TranslateRedirectionKeys">
            <NPATH>1</NPATH>
            <PDN>0.33</PDN>
            <XLN>3</XLN>
            <FN2>7</FN2>
            <FN1>29</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>9</AV1>
            <CYC>1</CYC>
            <AV3>18</AV3>
            <AV2>12</AV2>
            <PTH>1</PTH>
            <RET>1</RET>
            <FDT>12</FDT>
            <MIF>0</MIF>
            <AKI>1</AKI>
            <ST1>4</ST1>
            <ST3>2</ST3>
            <ST2>3</ST2>
            <M07>1</M07>
            <PAR>1</PAR>
            <ELF>0</ELF>
            <FDN>5</FDN>
            <MCC>0 (1:1)</MCC>
            <LIN>15</LIN>
            <GTO>0</GTO>
            <LCT>1</LCT>
            <M29>1</M29>
            <UNV>0</UNV>
            <SUB>0</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_UpdateRedirectionInfo">
            <NPATH>33</NPATH>
            <PDN>2.06</PDN>
            <XLN>16</XLN>
            <FN2>54</FN2>
            <FN1>160</FN1>
            <PBG>2</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>1</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>9</AV1>
            <CYC>7</CYC>
            <AV3>16</AV3>
            <AV2>13</AV2>
            <PTH>33</PTH>
            <RET>1</RET>
            <FDT>15</FDT>
            <MIF>2</MIF>
            <AKI>12</AKI>
            <ST1>22</ST1>
            <ST3>13</ST3>
            <ST2>16</ST2>
            <M07>1</M07>
            <PAR>1</PAR>
            <ELF>0</ELF>
            <FDN>14</FDN>
            <MCC>0 (7:7)</MCC>
            <LIN>55</LIN>
            <GTO>0</GTO>
            <LCT>3</LCT>
            <M29>1</M29>
            <UNV>0</UNV>
            <SUB>5</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_Util_Max">
            <NPATH>1</NPATH>
            <PDN>1.00</PDN>
            <XLN>1</XLN>
            <FN2>4</FN2>
            <FN1>13</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>1</M19>
            <AV1>17</AV1>
            <CYC>1</CYC>
            <AV3>17</AV3>
            <AV2>17</AV2>
            <PTH>1</PTH>
            <RET>1</RET>
            <FDT>9</FDT>
            <MIF>0</MIF>
            <AKI>1</AKI>
            <ST1>1</ST1>
            <ST3>1</ST3>
            <ST2>1</ST2>
            <M07>1</M07>
            <PAR>2</PAR>
            <ELF>0</ELF>
            <FDN>2</FDN>
            <MCC>0 (1:1)</MCC>
            <LIN>1</LIN>
            <GTO>0</GTO>
            <LCT>0</LCT>
            <M29>1</M29>
            <UNV>0</UNV>
            <SUB>0</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_Util_MemCpy">
            <NPATH>2</NPATH>
            <PDN>1.00</PDN>
            <XLN>2</XLN>
            <FN2>11</FN2>
            <FN1>19</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>0</M19>
            <AV1>7</AV1>
            <CYC>2</CYC>
            <AV3>15</AV3>
            <AV2>10</AV2>
            <PTH>2</PTH>
            <RET>1</RET>
            <FDT>11</FDT>
            <MIF>1</MIF>
            <AKI>2</AKI>
            <ST1>4</ST1>
            <ST3>2</ST3>
            <ST2>3</ST2>
            <M07>1</M07>
            <PAR>3</PAR>
            <ELF>0</ELF>
            <FDN>6</FDN>
            <MCC>0 (2:2)</MCC>
            <LIN>6</LIN>
            <GTO>0</GTO>
            <LCT>1</LCT>
            <M29>1</M29>
            <UNV>0</UNV>
            <SUB>0</SUB>
            <UNR>0</UNR>
          </function>
          <function name="CryIf_Util_MemSet">
            <NPATH>2</NPATH>
            <PDN>1.00</PDN>
            <XLN>2</XLN>
            <FN2>10</FN2>
            <FN1>17</FN1>
            <PBG>0</PBG>
            <LOP>0</LOP>
            <BAK>0</BAK>
            <KDN>0.00</KDN>
            <CAL>0</CAL>
            <KNT>0</KNT>
            <M19>0</M19>
            <AV1>6</AV1>
            <CYC>2</CYC>
            <AV3>13</AV3>
            <AV2>9</AV2>
            <PTH>2</PTH>
            <RET>1</RET>
            <FDT>11</FDT>
            <MIF>1</MIF>
            <AKI>2</AKI>
            <ST1>4</ST1>
            <ST3>2</ST3>
            <ST2>3</ST2>
            <M07>1</M07>
            <PAR>3</PAR>
            <ELF>0</ELF>
            <FDN>6</FDN>
            <MCC>0 (2:2)</MCC>
            <LIN>6</LIN>
            <GTO>0</GTO>
            <LCT>1</LCT>
            <M29>1</M29>
            <UNV>0</UNV>
            <SUB>0</SUB>
            <UNR>0</UNR>
          </function>
          <file name="CryIf_Cfg.c">
            <VAR>60</VAR>
            <DIF>4.67</DIF>
            <BME>0.576</BME>
            <FCO>0</FCO>
            <BMO>0.482</BMO>
            <HAL>531</HAL>
            <ZIP>463</ZIP>
            <BMS>0.542</BMS>
            <ECT>3</ECT>
            <SCT>0</SCT>
            <TPP>217</TPP>
            <M33>42</M33>
            <TOT>265</TOT>
            <DEV>1.34</DEV>
            <OPN>75</OPN>
            <VOL>1725</VOL>
            <EFF>8056</EFF>
            <TDS>2.018</TDS>
            <OPT>16</OPT>
            <BUG>0</BUG>
            <CDN>3.302</CDN>
            <TLN>18</TLN>
            <SHN>1765</SHN>
            <FNC>0</FNC>
            <M21>167</M21>
            <M20>88</M20>
            <M22>3</M22>
            <TDE>2.095</TDE>
            <M28>75</M28>
            <TDO>1.895</TDO>
          </file>
        </log_QACMetrics>
        <runtime>0</runtime>
      </testrun>
    </testcase>
    <testcase id="[TC:Standard_Embedded.QACJustification]" name="QAC Justification" ExecPlan="x">
      <description>Justification of QAC rule deviations.  </description>
      <testrun date="2020-08-25 15:44" executor="vismxe" parameter="" config="Overall" CDK="20.08.25" execCnt="4">
        <QacJustificationMarkerList>
          <ruleJustification name="MD_CRYIF_STPAR" module="CRYIF" rule="STPAR" reason="Number of parameters is too high." risk="None" prevention="None" />
          <ruleJustification name="MD_CRYIF_NO_BREAK_IN_SWITCH" module="CRYIF" rule="SWITCH" reason="No break in a single case of a switch statement. Both cases only differ in one statement. Otherwise, the code must be duplicated or a function call must occur here." risk="If the code is refactored or adapted, this may lead to a problem if it is not considered." prevention="Code Review." />
        </QacJustificationMarkerList>
        <log_build type="QAC_Annotation"></log_build>
        <result>ok</result>
        <QacMarkerMetrics>
          <NrOfMarker count="2" />
          <RefMarker name="MD_MSR_MemMap" count="20" />
          <RefMarker name="MD_MSR_STMIF" count="4" />
          <RefMarker name="MD_MSR_DummyStmt" count="26" />
          <RefMarker name="MD_CRYIF_NO_BREAK_IN_SWITCH" count="1" />
          <RefMarker name="MD_CRYIF_STPAR" count="3" />
          <RefMarker name="MD_MSR_RetVal" count="14" />
          <RefMarker name="MD_CSL_ObjectOnlyAccessedOnce" count="3" />
          <RefMarker name="MD_MSR_FctLikeMacro" count="4" />
        </QacMarkerMetrics>
        <runtime>1</runtime>
      </testrun>
    </testcase>
    <testcase id="[TC:Standard_Embedded.CheckPClint]" name="PClint Analysis" ExecPlan="x">
      <description>Perform an analysis with PClint.</description>
      <testrun date="2020-08-25 15:44" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1, option=VisualC" config=".\Embedded\TestData_Storage\TestConfig1" CDK="20.08.25" execCnt="1">
        <testenv>
          <version>
PC-lint for C/C++ (NT) Vers. 9.00L, Copyright Gimpel Software 1985-2014
  </version>
          <option>
 -e46 -e123 -w2                                              -wlib(1) -u -si4 -sp4 +v +fan                                             +fbo                                             +fdi                                             -fdh                                             -ffb                                             -ffn                                             +fll                                             +fcu                                             +fce                                             -e322                                            +linebuf -hsb^4 -format4a=File\s%f\s%l\s%c\n -format4b=Message\s%t\s%n\s%m\n\n -width(0) -cmsc                                            -t2                                              +rw(_inline)                                     +rw(__inline)                                    +rw(__interrupt)                                 +rw(using)                                       +ppw(import)                                     -d_M_IX86=300 -d_declspec=__declspec -d_M_IX86=300 -d_INTEGRAL_MAX_BITS=64 -d_MSC_VER=1400 -d__STDC__=0 -dWIN32 -d_WIN32 -d_WINDOWS -d_MBCS -d_USRDLL -d_BUILDNODELAYERDLL -d_GEN_EXPORTS -d_stdcall=__stdcall -d__interface=class -d__unaligned= -d__w64= -d__ptr64= -d_X86_ -$  // $ can be used in identifiers -i"C:\Program Files (x86)\Microsoft Visual Studio\2017\WDExpress\VC\include" -i"C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\Include" -e537 -e451 -e438 -e616 -dCRYPTOCV_AUTOSAR_ABSTRACTION_COMMENT -d__HARVARD -i"..\..\..\Implementation\trunk" -i"TestAppl" -i"TestData" -i"TestEnv_Tsc" -i"TestStub" -i"TestFw\zBte" -i"Common"
  </option>
        </testenv>
        <log_build type="CheckPClint">
          <message module="---" file="---" line="---" ID="---">
            <code>---</code>
            <text>no findings</text>
            <result>info</result>
          </message>
        </log_build>
        <result>ok</result>
        <runtime>1</runtime>
      </testrun>
      <testrun date="2020-08-25 15:44" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2, option=VisualC" config=".\Embedded\TestData_Storage\TestConfig2" CDK="20.08.25" execCnt="1">
        <testenv>
          <version>
PC-lint for C/C++ (NT) Vers. 9.00L, Copyright Gimpel Software 1985-2014
  </version>
          <option>
 -e46 -e123 -w2                                              -wlib(1) -u -si4 -sp4 +v +fan                                             +fbo                                             +fdi                                             -fdh                                             -ffb                                             -ffn                                             +fll                                             +fcu                                             +fce                                             -e322                                            +linebuf -hsb^4 -format4a=File\s%f\s%l\s%c\n -format4b=Message\s%t\s%n\s%m\n\n -width(0) -cmsc                                            -t2                                              +rw(_inline)                                     +rw(__inline)                                    +rw(__interrupt)                                 +rw(using)                                       +ppw(import)                                     -d_M_IX86=300 -d_declspec=__declspec -d_M_IX86=300 -d_INTEGRAL_MAX_BITS=64 -d_MSC_VER=1400 -d__STDC__=0 -dWIN32 -d_WIN32 -d_WINDOWS -d_MBCS -d_USRDLL -d_BUILDNODELAYERDLL -d_GEN_EXPORTS -d_stdcall=__stdcall -d__interface=class -d__unaligned= -d__w64= -d__ptr64= -d_X86_ -$  // $ can be used in identifiers -i"C:\Program Files (x86)\Microsoft Visual Studio\2017\WDExpress\VC\include" -i"C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\Include" -e537 -e451 -e438 -e616 -dCRYPTOCV_AUTOSAR_ABSTRACTION_COMMENT -d__HARVARD -i"..\..\..\Implementation\trunk" -i"TestAppl" -i"TestData" -i"TestEnv_Tsc" -i"TestStub" -i"TestFw\zBte" -i"Common"
  </option>
        </testenv>
        <log_build type="CheckPClint">
          <message module="---" file="---" line="---" ID="---">
            <code>---</code>
            <text>no findings</text>
            <result>info</result>
          </message>
        </log_build>
        <result>ok</result>
        <runtime>0</runtime>
      </testrun>
      <testrun date="2020-08-25 15:44" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3, option=VisualC" config=".\Embedded\TestData_Storage\TestConfig3" CDK="20.08.25" execCnt="1">
        <testenv>
          <version>
PC-lint for C/C++ (NT) Vers. 9.00L, Copyright Gimpel Software 1985-2014
  </version>
          <option>
 -e46 -e123 -w2                                              -wlib(1) -u -si4 -sp4 +v +fan                                             +fbo                                             +fdi                                             -fdh                                             -ffb                                             -ffn                                             +fll                                             +fcu                                             +fce                                             -e322                                            +linebuf -hsb^4 -format4a=File\s%f\s%l\s%c\n -format4b=Message\s%t\s%n\s%m\n\n -width(0) -cmsc                                            -t2                                              +rw(_inline)                                     +rw(__inline)                                    +rw(__interrupt)                                 +rw(using)                                       +ppw(import)                                     -d_M_IX86=300 -d_declspec=__declspec -d_M_IX86=300 -d_INTEGRAL_MAX_BITS=64 -d_MSC_VER=1400 -d__STDC__=0 -dWIN32 -d_WIN32 -d_WINDOWS -d_MBCS -d_USRDLL -d_BUILDNODELAYERDLL -d_GEN_EXPORTS -d_stdcall=__stdcall -d__interface=class -d__unaligned= -d__w64= -d__ptr64= -d_X86_ -$  // $ can be used in identifiers -i"C:\Program Files (x86)\Microsoft Visual Studio\2017\WDExpress\VC\include" -i"C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\Include" -e537 -e451 -e438 -e616 -dCRYPTOCV_AUTOSAR_ABSTRACTION_COMMENT -d__HARVARD -i"..\..\..\Implementation\trunk" -i"TestAppl" -i"TestData" -i"TestEnv_Tsc" -i"TestStub" -i"TestFw\zBte" -i"Common"
  </option>
        </testenv>
        <log_build type="CheckPClint">
          <message module="---" file="---" line="---" ID="---">
            <code>---</code>
            <text>no findings</text>
            <result>info</result>
          </message>
        </log_build>
        <result>ok</result>
        <runtime>0</runtime>
      </testrun>
      <testrun date="2020-08-25 15:44" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4, option=VisualC" config=".\Embedded\TestData_Storage\TestConfig4" CDK="20.08.25" execCnt="1">
        <testenv>
          <version>
PC-lint for C/C++ (NT) Vers. 9.00L, Copyright Gimpel Software 1985-2014
  </version>
          <option>
 -e46 -e123 -w2                                              -wlib(1) -u -si4 -sp4 +v +fan                                             +fbo                                             +fdi                                             -fdh                                             -ffb                                             -ffn                                             +fll                                             +fcu                                             +fce                                             -e322                                            +linebuf -hsb^4 -format4a=File\s%f\s%l\s%c\n -format4b=Message\s%t\s%n\s%m\n\n -width(0) -cmsc                                            -t2                                              +rw(_inline)                                     +rw(__inline)                                    +rw(__interrupt)                                 +rw(using)                                       +ppw(import)                                     -d_M_IX86=300 -d_declspec=__declspec -d_M_IX86=300 -d_INTEGRAL_MAX_BITS=64 -d_MSC_VER=1400 -d__STDC__=0 -dWIN32 -d_WIN32 -d_WINDOWS -d_MBCS -d_USRDLL -d_BUILDNODELAYERDLL -d_GEN_EXPORTS -d_stdcall=__stdcall -d__interface=class -d__unaligned= -d__w64= -d__ptr64= -d_X86_ -$  // $ can be used in identifiers -i"C:\Program Files (x86)\Microsoft Visual Studio\2017\WDExpress\VC\include" -i"C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\Include" -e537 -e451 -e438 -e616 -dCRYPTOCV_AUTOSAR_ABSTRACTION_COMMENT -d__HARVARD -i"..\..\..\Implementation\trunk" -i"TestAppl" -i"TestData" -i"TestEnv_Tsc" -i"TestStub" -i"TestFw\zBte" -i"Common"
  </option>
        </testenv>
        <log_build type="CheckPClint">
          <message module="---" file="---" line="---" ID="---">
            <code>---</code>
            <text>no findings</text>
            <result>info</result>
          </message>
        </log_build>
        <result>ok</result>
        <runtime>1</runtime>
      </testrun>
    </testcase>
    <testcase id="[TC:Standard_Embedded.BuildMetrowerks]" name="Build Metrowerks" ExecPlan="x">
      <description>Build with embedded compiler Metrowerks.</description>
      <testrun date="2020-08-25 15:44" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1, compileFlags=Default" config=".\Embedded\TestData_Storage\TestConfig1" CDK="20.08.25" execCnt="1">
        <testenv>
          <version>
ANSI-C/cC++ Compiler for HC12 V-5.0.46 Build 15249, Sep  7 2015

Project file: 
GENPATH=
LIBPATH=
OBJPATH=
ABSPATH=
TEXTPATH=

Common Module V-5.0.8, Date Sep  7 2015
User Interface Module, V-5.0.25, Date Sep  7 2015
ANSI-C/cC++ Front End, V-5.0.6, Date Sep  7 2015
Tree CSE Optimizer, V-5.0.1, Date Sep  7 2015
Compiler Common Module, V-5.0.1, Date Sep  7 2015
Generic ICG Back End V-5.0.2, Date Sep  7 2015
Compiler Back Common, V-5.0.2, Date Sep  7 2015
HC12 Back End V-5.0.46, Date Sep  7 2015
Encryption Module, V-5.0.3, Date Sep  7 2015
</version>
          <option>   (Default)</option>
        </testenv>
        <log_build type="EmbeddedCompiler">
          <message file="---" line="---" ID="---">
            <text>no findings</text>
            <result>ok</result>
          </message>
        </log_build>
        <result>ok</result>
        <result>ok</result>
        <runtime>1</runtime>
      </testrun>
      <testrun date="2020-08-25 15:44" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2, compileFlags=Default" config=".\Embedded\TestData_Storage\TestConfig2" CDK="20.08.25" execCnt="1">
        <testenv>
          <version>
ANSI-C/cC++ Compiler for HC12 V-5.0.46 Build 15249, Sep  7 2015

Project file: 
GENPATH=
LIBPATH=
OBJPATH=
ABSPATH=
TEXTPATH=

Common Module V-5.0.8, Date Sep  7 2015
User Interface Module, V-5.0.25, Date Sep  7 2015
ANSI-C/cC++ Front End, V-5.0.6, Date Sep  7 2015
Tree CSE Optimizer, V-5.0.1, Date Sep  7 2015
Compiler Common Module, V-5.0.1, Date Sep  7 2015
Generic ICG Back End V-5.0.2, Date Sep  7 2015
Compiler Back Common, V-5.0.2, Date Sep  7 2015
HC12 Back End V-5.0.46, Date Sep  7 2015
Encryption Module, V-5.0.3, Date Sep  7 2015
</version>
          <option>   (Default)</option>
        </testenv>
        <log_build type="EmbeddedCompiler">
          <message file="---" line="---" ID="---">
            <text>no findings</text>
            <result>ok</result>
          </message>
        </log_build>
        <result>ok</result>
        <result>ok</result>
        <runtime>0</runtime>
      </testrun>
      <testrun date="2020-08-25 15:44" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3, compileFlags=Default" config=".\Embedded\TestData_Storage\TestConfig3" CDK="20.08.25" execCnt="1">
        <testenv>
          <version>
ANSI-C/cC++ Compiler for HC12 V-5.0.46 Build 15249, Sep  7 2015

Project file: 
GENPATH=
LIBPATH=
OBJPATH=
ABSPATH=
TEXTPATH=

Common Module V-5.0.8, Date Sep  7 2015
User Interface Module, V-5.0.25, Date Sep  7 2015
ANSI-C/cC++ Front End, V-5.0.6, Date Sep  7 2015
Tree CSE Optimizer, V-5.0.1, Date Sep  7 2015
Compiler Common Module, V-5.0.1, Date Sep  7 2015
Generic ICG Back End V-5.0.2, Date Sep  7 2015
Compiler Back Common, V-5.0.2, Date Sep  7 2015
HC12 Back End V-5.0.46, Date Sep  7 2015
Encryption Module, V-5.0.3, Date Sep  7 2015
</version>
          <option>   (Default)</option>
        </testenv>
        <log_build type="EmbeddedCompiler">
          <message file="---" line="---" ID="---">
            <text>no findings</text>
            <result>ok</result>
          </message>
        </log_build>
        <result>ok</result>
        <result>ok</result>
        <runtime>0</runtime>
      </testrun>
      <testrun date="2020-08-25 15:44" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4, compileFlags=Default" config=".\Embedded\TestData_Storage\TestConfig4" CDK="20.08.25" execCnt="1">
        <testenv>
          <version>
ANSI-C/cC++ Compiler for HC12 V-5.0.46 Build 15249, Sep  7 2015

Project file: 
GENPATH=
LIBPATH=
OBJPATH=
ABSPATH=
TEXTPATH=

Common Module V-5.0.8, Date Sep  7 2015
User Interface Module, V-5.0.25, Date Sep  7 2015
ANSI-C/cC++ Front End, V-5.0.6, Date Sep  7 2015
Tree CSE Optimizer, V-5.0.1, Date Sep  7 2015
Compiler Common Module, V-5.0.1, Date Sep  7 2015
Generic ICG Back End V-5.0.2, Date Sep  7 2015
Compiler Back Common, V-5.0.2, Date Sep  7 2015
HC12 Back End V-5.0.46, Date Sep  7 2015
Encryption Module, V-5.0.3, Date Sep  7 2015
</version>
          <option>   (Default)</option>
        </testenv>
        <log_build type="EmbeddedCompiler">
          <message file="---" line="---" ID="---">
            <text>no findings</text>
            <result>ok</result>
          </message>
        </log_build>
        <result>ok</result>
        <result>ok</result>
        <runtime>0</runtime>
      </testrun>
    </testcase>
    <testcase id="[TC:Standard_Embedded.BuildGreenHills]" name="Build GreenHills" ExecPlan="x">
      <description>Build with embedded compiler GreenHills.</description>
      <testrun date="2020-08-25 15:44" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1, compileFlags=Default" config=".\Embedded\TestData_Storage\TestConfig1" CDK="20.08.25" execCnt="1">
        <testenv>
          <version>
This Green Hills compiler uses the
Edison Design Group C/C++ Front End, version 4.9 (Oct 20 2016 21:32:21)
Copyright 1988-2014 Edison Design Group, Inc.

C-V850 2016.5.5 RELEASE VERSION: Copyright (C) 1983-2016 Green Hills Software.  All Rights Reserved.
Release: Compiler v2016.5.5
Build Directory: [Directory] BTOWINBOX:c:/build_2015_5_bto/2016-10-20.2030-2015_5_bto/win32-comp-ecom
Revision: [VCInfo] http://toolsvc/branches/release-branch-2015-5-bto/src@577807 (built by build)
Revision Date: Fri Oct 21 06:36:40 2016

Release Date: Fri Oct 21 08:06:01 2016

Elan License Manager Copyright 1989-1998 Elan Computer Group, Inc.
ELXR: Copyright (C) 1983-2016 Green Hills Software.  All Rights Reserved.
Release: Compiler v2016.5.5
Build Directory: [Directory] BTOWINBOX:c:/build_2015_5_bto/2016-10-20.2030-2015_5_bto/win64-comp
Revision: [VCInfo] http://toolsvc/branches/release-branch-2015-5-bto/src@577807 (built by build)
Revision Date: Fri Oct 21 06:53:04 2016

Release Date: Fri Oct 21 08:02:35 2016

</version>
          <option>   (Default)</option>
        </testenv>
        <log_build type="EmbeddedCompiler">
          <message file="---" line="---" ID="---">
            <text>no findings</text>
            <result>ok</result>
          </message>
        </log_build>
        <result>ok</result>
        <result>ok</result>
        <runtime>0</runtime>
      </testrun>
      <testrun date="2020-08-25 15:44" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2, compileFlags=Default" config=".\Embedded\TestData_Storage\TestConfig2" CDK="20.08.25" execCnt="1">
        <testenv>
          <version>
This Green Hills compiler uses the
Edison Design Group C/C++ Front End, version 4.9 (Oct 20 2016 21:32:21)
Copyright 1988-2014 Edison Design Group, Inc.

C-V850 2016.5.5 RELEASE VERSION: Copyright (C) 1983-2016 Green Hills Software.  All Rights Reserved.
Release: Compiler v2016.5.5
Build Directory: [Directory] BTOWINBOX:c:/build_2015_5_bto/2016-10-20.2030-2015_5_bto/win32-comp-ecom
Revision: [VCInfo] http://toolsvc/branches/release-branch-2015-5-bto/src@577807 (built by build)
Revision Date: Fri Oct 21 06:36:40 2016

Release Date: Fri Oct 21 08:06:01 2016

Elan License Manager Copyright 1989-1998 Elan Computer Group, Inc.
ELXR: Copyright (C) 1983-2016 Green Hills Software.  All Rights Reserved.
Release: Compiler v2016.5.5
Build Directory: [Directory] BTOWINBOX:c:/build_2015_5_bto/2016-10-20.2030-2015_5_bto/win64-comp
Revision: [VCInfo] http://toolsvc/branches/release-branch-2015-5-bto/src@577807 (built by build)
Revision Date: Fri Oct 21 06:53:04 2016

Release Date: Fri Oct 21 08:02:35 2016

</version>
          <option>   (Default)</option>
        </testenv>
        <log_build type="EmbeddedCompiler">
          <message file="---" line="---" ID="---">
            <text>no findings</text>
            <result>ok</result>
          </message>
        </log_build>
        <result>ok</result>
        <result>ok</result>
        <runtime>0</runtime>
      </testrun>
      <testrun date="2020-08-25 15:44" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3, compileFlags=Default" config=".\Embedded\TestData_Storage\TestConfig3" CDK="20.08.25" execCnt="1">
        <testenv>
          <version>
This Green Hills compiler uses the
Edison Design Group C/C++ Front End, version 4.9 (Oct 20 2016 21:32:21)
Copyright 1988-2014 Edison Design Group, Inc.

C-V850 2016.5.5 RELEASE VERSION: Copyright (C) 1983-2016 Green Hills Software.  All Rights Reserved.
Release: Compiler v2016.5.5
Build Directory: [Directory] BTOWINBOX:c:/build_2015_5_bto/2016-10-20.2030-2015_5_bto/win32-comp-ecom
Revision: [VCInfo] http://toolsvc/branches/release-branch-2015-5-bto/src@577807 (built by build)
Revision Date: Fri Oct 21 06:36:40 2016

Release Date: Fri Oct 21 08:06:01 2016

Elan License Manager Copyright 1989-1998 Elan Computer Group, Inc.
ELXR: Copyright (C) 1983-2016 Green Hills Software.  All Rights Reserved.
Release: Compiler v2016.5.5
Build Directory: [Directory] BTOWINBOX:c:/build_2015_5_bto/2016-10-20.2030-2015_5_bto/win64-comp
Revision: [VCInfo] http://toolsvc/branches/release-branch-2015-5-bto/src@577807 (built by build)
Revision Date: Fri Oct 21 06:53:04 2016

Release Date: Fri Oct 21 08:02:35 2016

</version>
          <option>   (Default)</option>
        </testenv>
        <log_build type="EmbeddedCompiler">
          <message file="---" line="---" ID="---">
            <text>no findings</text>
            <result>ok</result>
          </message>
        </log_build>
        <result>ok</result>
        <result>ok</result>
        <runtime>0</runtime>
      </testrun>
      <testrun date="2020-08-25 15:44" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4, compileFlags=Default" config=".\Embedded\TestData_Storage\TestConfig4" CDK="20.08.25" execCnt="1">
        <testenv>
          <version>
This Green Hills compiler uses the
Edison Design Group C/C++ Front End, version 4.9 (Oct 20 2016 21:32:21)
Copyright 1988-2014 Edison Design Group, Inc.

C-V850 2016.5.5 RELEASE VERSION: Copyright (C) 1983-2016 Green Hills Software.  All Rights Reserved.
Release: Compiler v2016.5.5
Build Directory: [Directory] BTOWINBOX:c:/build_2015_5_bto/2016-10-20.2030-2015_5_bto/win32-comp-ecom
Revision: [VCInfo] http://toolsvc/branches/release-branch-2015-5-bto/src@577807 (built by build)
Revision Date: Fri Oct 21 06:36:40 2016

Release Date: Fri Oct 21 08:06:01 2016

Elan License Manager Copyright 1989-1998 Elan Computer Group, Inc.
ELXR: Copyright (C) 1983-2016 Green Hills Software.  All Rights Reserved.
Release: Compiler v2016.5.5
Build Directory: [Directory] BTOWINBOX:c:/build_2015_5_bto/2016-10-20.2030-2015_5_bto/win64-comp
Revision: [VCInfo] http://toolsvc/branches/release-branch-2015-5-bto/src@577807 (built by build)
Revision Date: Fri Oct 21 06:53:04 2016

Release Date: Fri Oct 21 08:02:35 2016

</version>
          <option>   (Default)</option>
        </testenv>
        <log_build type="EmbeddedCompiler">
          <message file="---" line="---" ID="---">
            <text>no findings</text>
            <result>ok</result>
          </message>
        </log_build>
        <result>ok</result>
        <result>ok</result>
        <runtime>0</runtime>
      </testrun>
    </testcase>
    <testcase id="[TC:Standard_Embedded.MemoryResourcesGreenHills]" name="MemoryResource GreenHills" ExecPlan="x">
      <description>Determine memory resources</description>
      <testrun date="2020-08-25 15:44" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1, compileFlags=Default" CDK="20.08.25" execCnt="1">
        <testenv>
          <version>
This Green Hills compiler uses the
Edison Design Group C/C++ Front End, version 4.9 (Oct 20 2016 21:32:21)
Copyright 1988-2014 Edison Design Group, Inc.

C-V850 2016.5.5 RELEASE VERSION: Copyright (C) 1983-2016 Green Hills Software.  All Rights Reserved.
Release: Compiler v2016.5.5
Build Directory: [Directory] BTOWINBOX:c:/build_2015_5_bto/2016-10-20.2030-2015_5_bto/win32-comp-ecom
Revision: [VCInfo] http://toolsvc/branches/release-branch-2015-5-bto/src@577807 (built by build)
Revision Date: Fri Oct 21 06:36:40 2016

Release Date: Fri Oct 21 08:06:01 2016

Elan License Manager Copyright 1989-1998 Elan Computer Group, Inc.
ELXR: Copyright (C) 1983-2016 Green Hills Software.  All Rights Reserved.
Release: Compiler v2016.5.5
Build Directory: [Directory] BTOWINBOX:c:/build_2015_5_bto/2016-10-20.2030-2015_5_bto/win64-comp
Revision: [VCInfo] http://toolsvc/branches/release-branch-2015-5-bto/src@577807 (built by build)
Revision Date: Fri Oct 21 06:53:04 2016

Release Date: Fri Oct 21 08:02:35 2016

</version>
          <option> (Default)</option>
        </testenv>
        <log_MemoryResources compiler="GreenHills">
          <module name="CryIf.c">
            <code>5120</code>
            <const>0</const>
            <ram>0</ram>
            <iram>1</iram>
          </module>
          <module name="CryIf_Cfg.c">
            <code>0</code>
            <const>224</const>
            <ram>0</ram>
            <iram>0</iram>
          </module>
        </log_MemoryResources>
        <result>ok</result>
        <runtime>0</runtime>
      </testrun>
      <testrun date="2020-08-25 15:44" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2, compileFlags=Default" CDK="20.08.25" execCnt="1">
        <testenv>
          <version>
This Green Hills compiler uses the
Edison Design Group C/C++ Front End, version 4.9 (Oct 20 2016 21:32:21)
Copyright 1988-2014 Edison Design Group, Inc.

C-V850 2016.5.5 RELEASE VERSION: Copyright (C) 1983-2016 Green Hills Software.  All Rights Reserved.
Release: Compiler v2016.5.5
Build Directory: [Directory] BTOWINBOX:c:/build_2015_5_bto/2016-10-20.2030-2015_5_bto/win32-comp-ecom
Revision: [VCInfo] http://toolsvc/branches/release-branch-2015-5-bto/src@577807 (built by build)
Revision Date: Fri Oct 21 06:36:40 2016

Release Date: Fri Oct 21 08:06:01 2016

Elan License Manager Copyright 1989-1998 Elan Computer Group, Inc.
ELXR: Copyright (C) 1983-2016 Green Hills Software.  All Rights Reserved.
Release: Compiler v2016.5.5
Build Directory: [Directory] BTOWINBOX:c:/build_2015_5_bto/2016-10-20.2030-2015_5_bto/win64-comp
Revision: [VCInfo] http://toolsvc/branches/release-branch-2015-5-bto/src@577807 (built by build)
Revision Date: Fri Oct 21 06:53:04 2016

Release Date: Fri Oct 21 08:02:35 2016

</version>
          <option> (Default)</option>
        </testenv>
        <log_MemoryResources compiler="GreenHills">
          <module name="CryIf.c">
            <code>4760</code>
            <const>0</const>
            <ram>0</ram>
            <iram>1</iram>
          </module>
          <module name="CryIf_Cfg.c">
            <code>0</code>
            <const>224</const>
            <ram>0</ram>
            <iram>0</iram>
          </module>
        </log_MemoryResources>
        <result>ok</result>
        <runtime>0</runtime>
      </testrun>
      <testrun date="2020-08-25 15:44" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3, compileFlags=Default" CDK="20.08.25" execCnt="1">
        <testenv>
          <version>
This Green Hills compiler uses the
Edison Design Group C/C++ Front End, version 4.9 (Oct 20 2016 21:32:21)
Copyright 1988-2014 Edison Design Group, Inc.

C-V850 2016.5.5 RELEASE VERSION: Copyright (C) 1983-2016 Green Hills Software.  All Rights Reserved.
Release: Compiler v2016.5.5
Build Directory: [Directory] BTOWINBOX:c:/build_2015_5_bto/2016-10-20.2030-2015_5_bto/win32-comp-ecom
Revision: [VCInfo] http://toolsvc/branches/release-branch-2015-5-bto/src@577807 (built by build)
Revision Date: Fri Oct 21 06:36:40 2016

Release Date: Fri Oct 21 08:06:01 2016

Elan License Manager Copyright 1989-1998 Elan Computer Group, Inc.
ELXR: Copyright (C) 1983-2016 Green Hills Software.  All Rights Reserved.
Release: Compiler v2016.5.5
Build Directory: [Directory] BTOWINBOX:c:/build_2015_5_bto/2016-10-20.2030-2015_5_bto/win64-comp
Revision: [VCInfo] http://toolsvc/branches/release-branch-2015-5-bto/src@577807 (built by build)
Revision Date: Fri Oct 21 06:53:04 2016

Release Date: Fri Oct 21 08:02:35 2016

</version>
          <option> (Default)</option>
        </testenv>
        <log_MemoryResources compiler="GreenHills">
          <module name="CryIf.c">
            <code>4598</code>
            <const>0</const>
            <ram>0</ram>
            <iram>1</iram>
          </module>
          <module name="CryIf_Cfg.c">
            <code>0</code>
            <const>216</const>
            <ram>0</ram>
            <iram>0</iram>
          </module>
        </log_MemoryResources>
        <result>ok</result>
        <runtime>0</runtime>
      </testrun>
      <testrun date="2020-08-25 15:44" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4, compileFlags=Default" CDK="20.08.25" execCnt="1">
        <testenv>
          <version>
This Green Hills compiler uses the
Edison Design Group C/C++ Front End, version 4.9 (Oct 20 2016 21:32:21)
Copyright 1988-2014 Edison Design Group, Inc.

C-V850 2016.5.5 RELEASE VERSION: Copyright (C) 1983-2016 Green Hills Software.  All Rights Reserved.
Release: Compiler v2016.5.5
Build Directory: [Directory] BTOWINBOX:c:/build_2015_5_bto/2016-10-20.2030-2015_5_bto/win32-comp-ecom
Revision: [VCInfo] http://toolsvc/branches/release-branch-2015-5-bto/src@577807 (built by build)
Revision Date: Fri Oct 21 06:36:40 2016

Release Date: Fri Oct 21 08:06:01 2016

Elan License Manager Copyright 1989-1998 Elan Computer Group, Inc.
ELXR: Copyright (C) 1983-2016 Green Hills Software.  All Rights Reserved.
Release: Compiler v2016.5.5
Build Directory: [Directory] BTOWINBOX:c:/build_2015_5_bto/2016-10-20.2030-2015_5_bto/win64-comp
Revision: [VCInfo] http://toolsvc/branches/release-branch-2015-5-bto/src@577807 (built by build)
Revision Date: Fri Oct 21 06:53:04 2016

Release Date: Fri Oct 21 08:02:35 2016

</version>
          <option> (Default)</option>
        </testenv>
        <log_MemoryResources compiler="GreenHills">
          <module name="CryIf.c">
            <code>3858</code>
            <const>0</const>
            <ram>0</ram>
            <iram>0</iram>
          </module>
          <module name="CryIf_Cfg.c">
            <code>0</code>
            <const>216</const>
            <ram>0</ram>
            <iram>0</iram>
          </module>
        </log_MemoryResources>
        <result>ok</result>
        <runtime>0</runtime>
      </testrun>
    </testcase>
    <testcase id="[TC:Standard_Embedded.BuildTasking]" name="Build Tasking" ExecPlan="x">
      <description>Build with embedded compiler Tasking.</description>
      <testrun date="2020-08-25 15:44" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1, compileFlags=Default" config=".\Embedded\TestData_Storage\TestConfig1" CDK="20.08.25" execCnt="1">
        <testenv>
          <version>
TASKING VX-toolset for TriCore: C compiler   v4.0r1 Build 616
Copyright 2002-2012 Altium BV                
TASKING VX-toolset for TriCore: object linker   v4.0r1 Build 210
Copyright 2002-2012 Altium BV                   
</version>
          <option>   (Default)</option>
        </testenv>
        <log_build>
          <message file="---" line="---" ID="---">
            <text>no findings</text>
            <result>ok</result>
          </message>
        </log_build>
        <result>ok</result>
        <result>ok</result>
        <runtime>0</runtime>
      </testrun>
      <testrun date="2020-08-25 15:44" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2, compileFlags=Default" config=".\Embedded\TestData_Storage\TestConfig2" CDK="20.08.25" execCnt="1">
        <testenv>
          <version>
TASKING VX-toolset for TriCore: C compiler   v4.0r1 Build 616
Copyright 2002-2012 Altium BV                
TASKING VX-toolset for TriCore: object linker   v4.0r1 Build 210
Copyright 2002-2012 Altium BV                   
</version>
          <option>   (Default)</option>
        </testenv>
        <log_build>
          <message file="---" line="---" ID="---">
            <text>no findings</text>
            <result>ok</result>
          </message>
        </log_build>
        <result>ok</result>
        <result>ok</result>
        <runtime>0</runtime>
      </testrun>
      <testrun date="2020-08-25 15:44" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3, compileFlags=Default" config=".\Embedded\TestData_Storage\TestConfig3" CDK="20.08.25" execCnt="1">
        <testenv>
          <version>
TASKING VX-toolset for TriCore: C compiler   v4.0r1 Build 616
Copyright 2002-2012 Altium BV                
TASKING VX-toolset for TriCore: object linker   v4.0r1 Build 210
Copyright 2002-2012 Altium BV                   
</version>
          <option>   (Default)</option>
        </testenv>
        <log_build>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="572" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="613" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="693" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="688" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="683" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="780" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="775" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="770" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="881" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="876" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="871" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="866" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="932" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="927" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="994" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="989" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="984" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="979" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="1050" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="1044" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="1152" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="1146" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="1217" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="1211" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="1286" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="1281" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="1276" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="1271" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="1336" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="1331" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="1386" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="1380" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="1446" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="1441" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="1436" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="1431" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="1508" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="1503" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="1498" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="1493" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="1558" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="1553" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="1614" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="1608" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="1603" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
        </log_build>
        <result>warn</result>
        <result>ok</result>
        <runtime>0</runtime>
        <justification date="2020-08-25 15:48:03">
          <text>Dead assignments to errorId when DEV_ERROR_DETECT is on and DEV_ERROR_REPORT is off are mandated by API pattern.
</text>
        </justification>
      </testrun>
      <testrun date="2021-05-07 08:14:53" executor="jtchiazekenn" parameter="config=.\Embedded\TestData_Storage\TestConfig4, compileFlags=Default" config=".\Embedded\TestData_Storage\TestConfig4" CDK="20.08.25" execCnt="2">
        <testenv>
          <version>
TASKING VX-toolset for TriCore: C compiler   v4.0r1 Build 616
Copyright 2002-2012 Altium BV                
TASKING VX-toolset for TriCore: object linker   v4.0r1 Build 210
Copyright 2002-2012 Altium BV                   
</version>
          <option>   (Default)</option>
        </testenv>
        <log_build>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="366" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="361" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="356" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="351" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
          <message file="CryIf.c (D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk\CryIf.c)" line="346" ID="W588">
            <text>dead assignment to "errorId" eliminated</text>
            <result>warn</result>
          </message>
        </log_build>
        <result>ok</result>
        <result>ok</result>
        <runtime>0</runtime>
        <justification date="2020-08-25 15:48:03">
          <text>Dead assignments to errorId when DEV_ERROR_DETECT is on and DEV_ERROR_REPORT is off are mandated by API pattern.
</text>
        </justification>
      </testrun>
    </testcase>
    <testcase id="[TC:Standard_Embedded.CheckCodingRules]" name="CheckVectorCodingRules" ExecPlan="x">
      <description>Check code according to Vector coding rules.</description>
      <testrun date="2020-08-25 15:45" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1" config=".\Embedded\TestData_Storage\TestConfig1" CDK="20.08.25" execCnt="1">
        <testenv>
          <version>Vector analysis script 3.00.00</version>
          <option>-v15</option>
        </testenv>
        <log_build type="CheckVectorRulesCode">
          <message file="CryIf.c" line="806" ID="14">
            <text>incorrect comment at end</text>
            <result>info</result>
          </message>
        </log_build>
        <result>ok</result>
        <testenv>
          <version>Vector Autosar analysis script 2.00.00</version>
          <option />
        </testenv>
        <log_build>
          <message file="---" line="---" ID="---">
            <text>no findings</text>
            <result>info</result>
          </message>
        </log_build>
        <result>ok</result>
        <runtime>0</runtime>
      </testrun>
      <testrun date="2020-08-25 15:45" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2" config=".\Embedded\TestData_Storage\TestConfig2" CDK="20.08.25" execCnt="1">
        <testenv>
          <version>Vector analysis script 3.00.00</version>
          <option>-v15</option>
        </testenv>
        <log_build type="CheckVectorRulesCode">
          <message file="CryIf.c" line="806" ID="14">
            <text>incorrect comment at end</text>
            <result>info</result>
          </message>
        </log_build>
        <result>ok</result>
        <testenv>
          <version>Vector Autosar analysis script 2.00.00</version>
          <option />
        </testenv>
        <log_build>
          <message file="---" line="---" ID="---">
            <text>no findings</text>
            <result>info</result>
          </message>
        </log_build>
        <result>ok</result>
        <runtime>0</runtime>
      </testrun>
      <testrun date="2020-08-25 15:45" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3" config=".\Embedded\TestData_Storage\TestConfig3" CDK="20.08.25" execCnt="1">
        <testenv>
          <version>Vector analysis script 3.00.00</version>
          <option>-v15</option>
        </testenv>
        <log_build type="CheckVectorRulesCode">
          <message file="CryIf.c" line="806" ID="14">
            <text>incorrect comment at end</text>
            <result>info</result>
          </message>
        </log_build>
        <result>ok</result>
        <testenv>
          <version>Vector Autosar analysis script 2.00.00</version>
          <option />
        </testenv>
        <log_build>
          <message file="---" line="---" ID="---">
            <text>no findings</text>
            <result>info</result>
          </message>
        </log_build>
        <result>ok</result>
        <runtime>0</runtime>
      </testrun>
      <testrun date="2020-08-25 15:45" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4" config=".\Embedded\TestData_Storage\TestConfig4" CDK="20.08.25" execCnt="1">
        <testenv>
          <version>Vector analysis script 3.00.00</version>
          <option>-v15</option>
        </testenv>
        <log_build type="CheckVectorRulesCode">
          <message file="CryIf.c" line="806" ID="14">
            <text>incorrect comment at end</text>
            <result>info</result>
          </message>
        </log_build>
        <result>ok</result>
        <testenv>
          <version>Vector Autosar analysis script 2.00.00</version>
          <option />
        </testenv>
        <log_build>
          <message file="---" line="---" ID="---">
            <text>no findings</text>
            <result>info</result>
          </message>
        </log_build>
        <result>ok</result>
        <runtime>0</runtime>
      </testrun>
    </testcase>
    <testcase id="[TC:Standard_Embedded.CheckDoxygen]" name="CheckDoxygen" ExecPlan="x">
      <description>Check doxygen rules.</description>
      <testrun date="2020-08-25 15:45" executor="vismxe" parameter="Overall" config="Overall" CDK="20.08.25" execCnt="1">
        <testenv>
          <version>Doxygen analysis script 1.00.00 </version>
          <option></option>
        </testenv>
        <log_build type="DoxygenRules">
          <message file="CryIf.c" line="14" ID="Dox-001">
            <text>/** found as doxygen marker</text>
            <result>info</result>
          </message>
          <message file="CryIf.h" line="14" ID="Dox-001">
            <text>/** found as doxygen marker</text>
            <result>info</result>
          </message>
          <message file="CryIf_Cbk.h" line="14" ID="Dox-001">
            <text>/** found as doxygen marker</text>
            <result>info</result>
          </message>
        </log_build>
        <result>ok</result>
        <runtime>0</runtime>
      </testrun>
    </testcase>
    <testcase id="[TC:Standard_Embedded.VariantCoverage]" name="Preprocessor Coverage" ExecPlan="x">
      <description>Check if the used test data covers all preprocessor variants.</description>
      <testrun date="2020-08-25 15:45" executor="vismxe" parameter="rootDir=[TscPath]\Embedded\TestData_Storage" config="Overall" CDK="20.08.25" execCnt="1">
see 
<link name="TestReport_VariantCoverage.html">TestReport_VariantCoverage.html</link>
for details
<varCoverage>100%</varCoverage><result>ok</result><runtime>0</runtime></testrun>
    </testcase>
    <testcase id="[TC:Standard_Embedded.ReviewHelper]" name="ReviewHelper" ExecPlan="x">
      <description>Check with review helper</description>
      <testrun date="2020-08-25 15:45" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1" config=".\Embedded\TestData_Storage\TestConfig1" CDK="20.08.25" execCnt="1">
        <log_build type="ReviewHelper">
          <message file="" line="-" ID="---">
            <text>multiple locations for file 'cdvg.c' found, keeping first location</text>
            <result>info</result>
          </message>
          <message file="" line="-" ID="---">
            <text>multiple locations for file 'cryif_cfg.c' found, keeping first location</text>
            <result>info</result>
          </message>
          <message file="" line="-" ID="---">
            <text>multiple locations for file 'cryif_pbcfg.c' found, keeping first location</text>
            <result>info</result>
          </message>
          <message file="" line="-" ID="---">
            <text>multiple locations for file 'crypto_30_crywrapper_cfg.c' found, keeping first location</text>
            <result>info</result>
          </message>
          <message file="" line="-" ID="---">
            <text>multiple locations for file 'crypto_30_crywrapper_pbcfg.c' found, keeping first location</text>
            <result>info</result>
          </message>
          <message file="" line="-" ID="---">
            <text>multiple locations for file 'crypto_30_libcv_cfg.c' found, keeping first location</text>
            <result>info</result>
          </message>
          <message file="" line="-" ID="---">
            <text>multiple locations for file 'crypto_30_libcv_pbcfg.c' found, keeping first location</text>
            <result>info</result>
          </message>
          <message file="" line="-" ID="---">
            <text>multiple locations for file 'csm_cfg.c' found, keeping first location</text>
            <result>info</result>
          </message>
          <message file="" line="-" ID="---">
            <text>multiple locations for file 'csm_pbcfg.c' found, keeping first location</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="477" ID="---">
            <text>unused SBSW reference found.</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="485" ID="---">
            <text>unused SBSW reference found.</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="508" ID="---">
            <text>unused SBSW reference found.</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="267,15" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyElementIdsGetOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey), elementIdsSrc, &amp;elementIdsSrcSize) CryIf_KeyCopyForDifferentDrivers</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="268,15" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(targetCryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyElementIdsGetOfCryptoFunctions)((CryIf_Key[(targetCryIfKeyId)].RefOfKey), elementIdsDst, &amp;elementIdsDstSize) CryIf_KeyCopyForDifferentDrivers</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="280,23" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyElementGetOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey), elementIdsSrc[i], buffer, &amp;bufferSize) CryIf_KeyCopyForDifferentDrivers</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="282,25" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(targetCryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyElementSetOfCryptoFunctions)((CryIf_Key[(targetCryIfKeyId)].RefOfKey), elementIdsDst[j], buffer, bufferSize) CryIf_KeyCopyForDifferentDrivers</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="319,5" ID="---">
            <text>Pointer Write Access CryIf_TranslateRedirectionKeys</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="346,17" ID="---">
            <text>Function Call: CryIf_TranslateRedirectionKeys CryIf_UpdateRedirectionInfo</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="351,18" ID="---">
            <text>Function Call: CryIf_TranslateRedirectionKeys CryIf_UpdateRedirectionInfo</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="356,18" ID="---">
            <text>Function Call: CryIf_TranslateRedirectionKeys CryIf_UpdateRedirectionInfo</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="361,18" ID="---">
            <text>Function Call: CryIf_TranslateRedirectionKeys CryIf_UpdateRedirectionInfo</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="366,18" ID="---">
            <text>Function Call: CryIf_TranslateRedirectionKeys CryIf_UpdateRedirectionInfo</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="420,12" ID="---">
            <text>Array Write Access CryIf_Util_MemSet</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="438,12" ID="---">
            <text>Array Write Access CryIf_Util_MemCpy</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="477,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[(cryptoFctIdxSrc)].KeyElementGetOfCryptoFunctions)(cryptoKeyId, keyElementId, bufferSrc, &amp;bufferSizeSrc) CryIf_KeyElementCopyPartial_Internal</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="485,18" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[(cryptoFctIdxDst)].KeyElementGetOfCryptoFunctions)(targetCryptoKeyId, targetKeyElementId, bufferDst, &amp;bufferSizeDst) CryIf_KeyElementCopyPartial_Internal</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="499,13" ID="---">
            <text>Function Call: CryIf_Util_MemSet CryIf_KeyElementCopyPartial_Internal</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="503,11" ID="---">
            <text>Function Call: CryIf_Util_MemCpy CryIf_KeyElementCopyPartial_Internal</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="508,20" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[(cryptoFctIdxDst)].KeyElementSetOfCryptoFunctions)(targetCryptoKeyId, targetKeyElementId, bufferDst, bufferSizeDst) CryIf_KeyElementCopyPartial_Internal</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="619,5" ID="---">
            <text>Pointer Write Access CryIf_GetVersionInfo</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="620,5" ID="---">
            <text>Pointer Write Access CryIf_GetVersionInfo</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="621,5" ID="---">
            <text>Pointer Write Access CryIf_GetVersionInfo</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="622,5" ID="---">
            <text>Pointer Write Access CryIf_GetVersionInfo</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="623,5" ID="---">
            <text>Pointer Write Access CryIf_GetVersionInfo</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="658,3" ID="---">
            <text>Function Call: Csm_CallbackNotification CryIf_CallbackNotification</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="706,9" ID="---">
            <text>Pointer Write Access CryIf_ProcessJob</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="710,9" ID="---">
            <text>Pointer Write Access CryIf_ProcessJob</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="715,11" ID="---">
            <text>Pointer Write Access CryIf_ProcessJob</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="720,16" ID="---">
            <text>Function Call: CryIf_UpdateRedirectionInfo CryIf_ProcessJob</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="727,18" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Channel[(channelId)].CryptoFunctionsIdxOfChannel))].ProcessJobOfCryptoFunctions)((CryIf_Channel[(channelId)].DriverObjectRefOfChannel), job) CryIf_ProcessJob</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="793,9" ID="---">
            <text>Pointer Write Access CryIf_CancelJob</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="797,9" ID="---">
            <text>Pointer Write Access CryIf_CancelJob</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="802,11" ID="---">
            <text>Pointer Write Access CryIf_CancelJob</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="815,18" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Channel[(channelId)].CryptoFunctionsIdxOfChannel))].CancelJobWithInfoTypeOfCryptoFunctions)((CryIf_Channel[(channelId)].DriverObjectRefOfChannel), &amp;jobInfo) CryIf_CancelJob</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="820,18" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Channel[(channelId)].CryptoFunctionsIdxOfChannel))].CancelJobOfCryptoFunctions)((CryIf_Channel[(channelId)].DriverObjectRefOfChannel), job) CryIf_CancelJob</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="887,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyElementSetOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey), keyElementId, keyPtr, keyLength) CryIf_KeyElementSet</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="938,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyValidSetOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey)) CryIf_KeySetValid</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1000,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyElementGetOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey), keyElementId, resultPtr, resultLengthPtr) CryIf_KeyElementGet</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1064,16" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[(cryptoFctIdxSrc)].KeyElementCopyOfCryptoFunctions)(cryptoKeyIdSrc, keyElementId, cryptoKeyIdDst, targetKeyElementId) CryIf_KeyElementCopy</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1071,11" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[(cryptoFctIdxSrc)].KeyElementGetOfCryptoFunctions)(cryptoKeyIdSrc, keyElementId, buffer, &amp;bufferSize) CryIf_KeyElementCopy</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1073,18" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[(cryptoFctIdxDst)].KeyElementSetOfCryptoFunctions)(cryptoKeyIdDst, targetKeyElementId, buffer, bufferSize) CryIf_KeyElementCopy</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1167,16" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[(cryptoFctIdxSrc)].KeyElementCopyPartialOfCryptoFunctions)(cryptoKeyIdSrc, keyElementId, keyElementSourceOffset, keyElementTargetOffset, keyElementCopyLength, cryptoKeyIdDst, targetKeyElementId) CryIf_KeyElementCopyPartial</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1226,16" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyCopyOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey), (CryIf_Key[(targetCryIfKeyId)].RefOfKey)) CryIf_KeyCopy</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1292,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].RandomSeedOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey), seedPtr, seedLength) CryIf_RandomSeed</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1342,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyGenerateOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey)) CryIf_KeyGenerate</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1392,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyDeriveOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey), (CryIf_Key[(targetCryIfKeyId)].RefOfKey)) CryIf_KeyDerive</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1452,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyExchangeCalcPubValOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey), publicValuePtr, publicValueLengthPtr) CryIf_KeyExchangeCalcPubVal</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1514,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyExchangeCalcSecretOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey), partnerPublicValuePtr, partnerPublicValueLength) CryIf_KeyExchangeCalcSecret</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1564,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].CertificateParseOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey)) CryIf_CertificateParse</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1620,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].CertificateVerifyOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey), (CryIf_Key[(verifyCryIfKeyId)].RefOfKey), verifyPtr) CryIf_CertificateVerify</text>
            <result>info</result>
          </message>
        </log_build>
        <result>ok</result>
        <runtime>0</runtime>
      </testrun>
      <testrun date="2020-08-25 15:45" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2" config=".\Embedded\TestData_Storage\TestConfig2" CDK="20.08.25" execCnt="1">
        <log_build type="ReviewHelper">
          <message file="" line="-" ID="---">
            <text>multiple locations for file 'cryif_cfg.c' found, keeping first location</text>
            <result>info</result>
          </message>
          <message file="" line="-" ID="---">
            <text>multiple locations for file 'cryif_pbcfg.c' found, keeping first location</text>
            <result>info</result>
          </message>
          <message file="" line="-" ID="---">
            <text>multiple locations for file 'crypto_30_crywrapper_cfg.c' found, keeping first location</text>
            <result>info</result>
          </message>
          <message file="" line="-" ID="---">
            <text>multiple locations for file 'crypto_30_crywrapper_pbcfg.c' found, keeping first location</text>
            <result>info</result>
          </message>
          <message file="" line="-" ID="---">
            <text>multiple locations for file 'crypto_30_libcv_cfg.c' found, keeping first location</text>
            <result>info</result>
          </message>
          <message file="" line="-" ID="---">
            <text>multiple locations for file 'crypto_30_libcv_pbcfg.c' found, keeping first location</text>
            <result>info</result>
          </message>
          <message file="" line="-" ID="---">
            <text>multiple locations for file 'csm_cfg.c' found, keeping first location</text>
            <result>info</result>
          </message>
          <message file="" line="-" ID="---">
            <text>multiple locations for file 'csm_pbcfg.c' found, keeping first location</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="477" ID="---">
            <text>unused SBSW reference found.</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="485" ID="---">
            <text>unused SBSW reference found.</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="508" ID="---">
            <text>unused SBSW reference found.</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="267,15" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyElementIdsGetOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey), elementIdsSrc, &amp;elementIdsSrcSize) CryIf_KeyCopyForDifferentDrivers</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="268,15" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(targetCryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyElementIdsGetOfCryptoFunctions)((CryIf_Key[(targetCryIfKeyId)].RefOfKey), elementIdsDst, &amp;elementIdsDstSize) CryIf_KeyCopyForDifferentDrivers</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="280,23" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyElementGetOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey), elementIdsSrc[i], buffer, &amp;bufferSize) CryIf_KeyCopyForDifferentDrivers</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="282,25" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(targetCryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyElementSetOfCryptoFunctions)((CryIf_Key[(targetCryIfKeyId)].RefOfKey), elementIdsDst[j], buffer, bufferSize) CryIf_KeyCopyForDifferentDrivers</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="420,12" ID="---">
            <text>Array Write Access CryIf_Util_MemSet</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="438,12" ID="---">
            <text>Array Write Access CryIf_Util_MemCpy</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="477,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[(cryptoFctIdxSrc)].KeyElementGetOfCryptoFunctions)(cryptoKeyId, keyElementId, bufferSrc, &amp;bufferSizeSrc) CryIf_KeyElementCopyPartial_Internal</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="485,18" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[(cryptoFctIdxDst)].KeyElementGetOfCryptoFunctions)(targetCryptoKeyId, targetKeyElementId, bufferDst, &amp;bufferSizeDst) CryIf_KeyElementCopyPartial_Internal</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="499,13" ID="---">
            <text>Function Call: CryIf_Util_MemSet CryIf_KeyElementCopyPartial_Internal</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="503,11" ID="---">
            <text>Function Call: CryIf_Util_MemCpy CryIf_KeyElementCopyPartial_Internal</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="508,20" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[(cryptoFctIdxDst)].KeyElementSetOfCryptoFunctions)(targetCryptoKeyId, targetKeyElementId, bufferDst, bufferSizeDst) CryIf_KeyElementCopyPartial_Internal</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="658,3" ID="---">
            <text>Function Call: Csm_CallbackNotification CryIf_CallbackNotification</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="706,9" ID="---">
            <text>Pointer Write Access CryIf_ProcessJob</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="710,9" ID="---">
            <text>Pointer Write Access CryIf_ProcessJob</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="715,11" ID="---">
            <text>Pointer Write Access CryIf_ProcessJob</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="727,18" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Channel[(channelId)].CryptoFunctionsIdxOfChannel))].ProcessJobOfCryptoFunctions)((CryIf_Channel[(channelId)].DriverObjectRefOfChannel), job) CryIf_ProcessJob</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="793,9" ID="---">
            <text>Pointer Write Access CryIf_CancelJob</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="797,9" ID="---">
            <text>Pointer Write Access CryIf_CancelJob</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="802,11" ID="---">
            <text>Pointer Write Access CryIf_CancelJob</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="815,18" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Channel[(channelId)].CryptoFunctionsIdxOfChannel))].CancelJobWithInfoTypeOfCryptoFunctions)((CryIf_Channel[(channelId)].DriverObjectRefOfChannel), &amp;jobInfo) CryIf_CancelJob</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="820,18" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Channel[(channelId)].CryptoFunctionsIdxOfChannel))].CancelJobOfCryptoFunctions)((CryIf_Channel[(channelId)].DriverObjectRefOfChannel), job) CryIf_CancelJob</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="887,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyElementSetOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey), keyElementId, keyPtr, keyLength) CryIf_KeyElementSet</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="938,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyValidSetOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey)) CryIf_KeySetValid</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1000,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyElementGetOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey), keyElementId, resultPtr, resultLengthPtr) CryIf_KeyElementGet</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1064,16" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[(cryptoFctIdxSrc)].KeyElementCopyOfCryptoFunctions)(cryptoKeyIdSrc, keyElementId, cryptoKeyIdDst, targetKeyElementId) CryIf_KeyElementCopy</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1071,11" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[(cryptoFctIdxSrc)].KeyElementGetOfCryptoFunctions)(cryptoKeyIdSrc, keyElementId, buffer, &amp;bufferSize) CryIf_KeyElementCopy</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1073,18" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[(cryptoFctIdxDst)].KeyElementSetOfCryptoFunctions)(cryptoKeyIdDst, targetKeyElementId, buffer, bufferSize) CryIf_KeyElementCopy</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1167,16" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[(cryptoFctIdxSrc)].KeyElementCopyPartialOfCryptoFunctions)(cryptoKeyIdSrc, keyElementId, keyElementSourceOffset, keyElementTargetOffset, keyElementCopyLength, cryptoKeyIdDst, targetKeyElementId) CryIf_KeyElementCopyPartial</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1226,16" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyCopyOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey), (CryIf_Key[(targetCryIfKeyId)].RefOfKey)) CryIf_KeyCopy</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1292,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].RandomSeedOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey), seedPtr, seedLength) CryIf_RandomSeed</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1342,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyGenerateOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey)) CryIf_KeyGenerate</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1392,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyDeriveOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey), (CryIf_Key[(targetCryIfKeyId)].RefOfKey)) CryIf_KeyDerive</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1452,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyExchangeCalcPubValOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey), publicValuePtr, publicValueLengthPtr) CryIf_KeyExchangeCalcPubVal</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1514,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyExchangeCalcSecretOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey), partnerPublicValuePtr, partnerPublicValueLength) CryIf_KeyExchangeCalcSecret</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1564,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].CertificateParseOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey)) CryIf_CertificateParse</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1620,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].CertificateVerifyOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey), (CryIf_Key[(verifyCryIfKeyId)].RefOfKey), verifyPtr) CryIf_CertificateVerify</text>
            <result>info</result>
          </message>
        </log_build>
        <result>ok</result>
        <runtime>0</runtime>
      </testrun>
      <testrun date="2020-08-25 15:45" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3" config=".\Embedded\TestData_Storage\TestConfig3" CDK="20.08.25" execCnt="1">
        <log_build type="ReviewHelper">
          <message file="" line="-" ID="---">
            <text>multiple locations for file 'cryif_cfg.c' found, keeping first location</text>
            <result>info</result>
          </message>
          <message file="" line="-" ID="---">
            <text>multiple locations for file 'cryif_pbcfg.c' found, keeping first location</text>
            <result>info</result>
          </message>
          <message file="" line="-" ID="---">
            <text>multiple locations for file 'crypto_30_crywrapper_cfg.c' found, keeping first location</text>
            <result>info</result>
          </message>
          <message file="" line="-" ID="---">
            <text>multiple locations for file 'crypto_30_crywrapper_pbcfg.c' found, keeping first location</text>
            <result>info</result>
          </message>
          <message file="" line="-" ID="---">
            <text>multiple locations for file 'crypto_30_libcv_cfg.c' found, keeping first location</text>
            <result>info</result>
          </message>
          <message file="" line="-" ID="---">
            <text>multiple locations for file 'crypto_30_libcv_pbcfg.c' found, keeping first location</text>
            <result>info</result>
          </message>
          <message file="" line="-" ID="---">
            <text>multiple locations for file 'csm_cfg.c' found, keeping first location</text>
            <result>info</result>
          </message>
          <message file="" line="-" ID="---">
            <text>multiple locations for file 'csm_pbcfg.c' found, keeping first location</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="477" ID="---">
            <text>unused SBSW reference found.</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="485" ID="---">
            <text>unused SBSW reference found.</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="508" ID="---">
            <text>unused SBSW reference found.</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="267,15" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyElementIdsGetOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey), elementIdsSrc, &amp;elementIdsSrcSize) CryIf_KeyCopyForDifferentDrivers</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="268,15" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(targetCryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyElementIdsGetOfCryptoFunctions)((CryIf_Key[(targetCryIfKeyId)].RefOfKey), elementIdsDst, &amp;elementIdsDstSize) CryIf_KeyCopyForDifferentDrivers</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="280,23" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyElementGetOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey), elementIdsSrc[i], buffer, &amp;bufferSize) CryIf_KeyCopyForDifferentDrivers</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="282,25" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(targetCryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyElementSetOfCryptoFunctions)((CryIf_Key[(targetCryIfKeyId)].RefOfKey), elementIdsDst[j], buffer, bufferSize) CryIf_KeyCopyForDifferentDrivers</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="319,5" ID="---">
            <text>Pointer Write Access CryIf_TranslateRedirectionKeys</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="346,17" ID="---">
            <text>Function Call: CryIf_TranslateRedirectionKeys CryIf_UpdateRedirectionInfo</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="351,18" ID="---">
            <text>Function Call: CryIf_TranslateRedirectionKeys CryIf_UpdateRedirectionInfo</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="356,18" ID="---">
            <text>Function Call: CryIf_TranslateRedirectionKeys CryIf_UpdateRedirectionInfo</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="361,18" ID="---">
            <text>Function Call: CryIf_TranslateRedirectionKeys CryIf_UpdateRedirectionInfo</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="366,18" ID="---">
            <text>Function Call: CryIf_TranslateRedirectionKeys CryIf_UpdateRedirectionInfo</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="420,12" ID="---">
            <text>Array Write Access CryIf_Util_MemSet</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="438,12" ID="---">
            <text>Array Write Access CryIf_Util_MemCpy</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="477,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[(cryptoFctIdxSrc)].KeyElementGetOfCryptoFunctions)(cryptoKeyId, keyElementId, bufferSrc, &amp;bufferSizeSrc) CryIf_KeyElementCopyPartial_Internal</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="485,18" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[(cryptoFctIdxDst)].KeyElementGetOfCryptoFunctions)(targetCryptoKeyId, targetKeyElementId, bufferDst, &amp;bufferSizeDst) CryIf_KeyElementCopyPartial_Internal</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="499,13" ID="---">
            <text>Function Call: CryIf_Util_MemSet CryIf_KeyElementCopyPartial_Internal</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="503,11" ID="---">
            <text>Function Call: CryIf_Util_MemCpy CryIf_KeyElementCopyPartial_Internal</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="508,20" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[(cryptoFctIdxDst)].KeyElementSetOfCryptoFunctions)(targetCryptoKeyId, targetKeyElementId, bufferDst, bufferSizeDst) CryIf_KeyElementCopyPartial_Internal</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="619,5" ID="---">
            <text>Pointer Write Access CryIf_GetVersionInfo</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="620,5" ID="---">
            <text>Pointer Write Access CryIf_GetVersionInfo</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="621,5" ID="---">
            <text>Pointer Write Access CryIf_GetVersionInfo</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="622,5" ID="---">
            <text>Pointer Write Access CryIf_GetVersionInfo</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="623,5" ID="---">
            <text>Pointer Write Access CryIf_GetVersionInfo</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="658,3" ID="---">
            <text>Function Call: Csm_CallbackNotification CryIf_CallbackNotification</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="706,9" ID="---">
            <text>Pointer Write Access CryIf_ProcessJob</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="710,9" ID="---">
            <text>Pointer Write Access CryIf_ProcessJob</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="715,11" ID="---">
            <text>Pointer Write Access CryIf_ProcessJob</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="720,16" ID="---">
            <text>Function Call: CryIf_UpdateRedirectionInfo CryIf_ProcessJob</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="727,18" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Channel[(channelId)].CryptoFunctionsIdxOfChannel))].ProcessJobOfCryptoFunctions)((CryIf_Channel[(channelId)].DriverObjectRefOfChannel), job) CryIf_ProcessJob</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="793,9" ID="---">
            <text>Pointer Write Access CryIf_CancelJob</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="797,9" ID="---">
            <text>Pointer Write Access CryIf_CancelJob</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="802,11" ID="---">
            <text>Pointer Write Access CryIf_CancelJob</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="820,18" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Channel[(channelId)].CryptoFunctionsIdxOfChannel))].CancelJobOfCryptoFunctions)((CryIf_Channel[(channelId)].DriverObjectRefOfChannel), job) CryIf_CancelJob</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="887,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyElementSetOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey), keyElementId, keyPtr, keyLength) CryIf_KeyElementSet</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="938,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyValidSetOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey)) CryIf_KeySetValid</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1000,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyElementGetOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey), keyElementId, resultPtr, resultLengthPtr) CryIf_KeyElementGet</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1064,16" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[(cryptoFctIdxSrc)].KeyElementCopyOfCryptoFunctions)(cryptoKeyIdSrc, keyElementId, cryptoKeyIdDst, targetKeyElementId) CryIf_KeyElementCopy</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1071,11" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[(cryptoFctIdxSrc)].KeyElementGetOfCryptoFunctions)(cryptoKeyIdSrc, keyElementId, buffer, &amp;bufferSize) CryIf_KeyElementCopy</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1073,18" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[(cryptoFctIdxDst)].KeyElementSetOfCryptoFunctions)(cryptoKeyIdDst, targetKeyElementId, buffer, bufferSize) CryIf_KeyElementCopy</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1167,16" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[(cryptoFctIdxSrc)].KeyElementCopyPartialOfCryptoFunctions)(cryptoKeyIdSrc, keyElementId, keyElementSourceOffset, keyElementTargetOffset, keyElementCopyLength, cryptoKeyIdDst, targetKeyElementId) CryIf_KeyElementCopyPartial</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1226,16" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyCopyOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey), (CryIf_Key[(targetCryIfKeyId)].RefOfKey)) CryIf_KeyCopy</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1292,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].RandomSeedOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey), seedPtr, seedLength) CryIf_RandomSeed</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1342,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyGenerateOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey)) CryIf_KeyGenerate</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1392,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyDeriveOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey), (CryIf_Key[(targetCryIfKeyId)].RefOfKey)) CryIf_KeyDerive</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1452,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyExchangeCalcPubValOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey), publicValuePtr, publicValueLengthPtr) CryIf_KeyExchangeCalcPubVal</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1514,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyExchangeCalcSecretOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey), partnerPublicValuePtr, partnerPublicValueLength) CryIf_KeyExchangeCalcSecret</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1564,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].CertificateParseOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey)) CryIf_CertificateParse</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1620,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].CertificateVerifyOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey), (CryIf_Key[(verifyCryIfKeyId)].RefOfKey), verifyPtr) CryIf_CertificateVerify</text>
            <result>info</result>
          </message>
        </log_build>
        <result>ok</result>
        <runtime>0</runtime>
      </testrun>
      <testrun date="2020-08-25 15:45" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4" config=".\Embedded\TestData_Storage\TestConfig4" CDK="20.08.25" execCnt="1">
        <log_build type="ReviewHelper">
          <message file="" line="-" ID="---">
            <text>multiple locations for file 'cryif_cfg.c' found, keeping first location</text>
            <result>info</result>
          </message>
          <message file="" line="-" ID="---">
            <text>multiple locations for file 'cryif_pbcfg.c' found, keeping first location</text>
            <result>info</result>
          </message>
          <message file="" line="-" ID="---">
            <text>multiple locations for file 'crypto_30_crywrapper_cfg.c' found, keeping first location</text>
            <result>info</result>
          </message>
          <message file="" line="-" ID="---">
            <text>multiple locations for file 'crypto_30_crywrapper_pbcfg.c' found, keeping first location</text>
            <result>info</result>
          </message>
          <message file="" line="-" ID="---">
            <text>multiple locations for file 'crypto_30_libcv_cfg.c' found, keeping first location</text>
            <result>info</result>
          </message>
          <message file="" line="-" ID="---">
            <text>multiple locations for file 'crypto_30_libcv_pbcfg.c' found, keeping first location</text>
            <result>info</result>
          </message>
          <message file="" line="-" ID="---">
            <text>multiple locations for file 'csm_cfg.c' found, keeping first location</text>
            <result>info</result>
          </message>
          <message file="" line="-" ID="---">
            <text>multiple locations for file 'csm_pbcfg.c' found, keeping first location</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="477" ID="---">
            <text>unused SBSW reference found.</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="485" ID="---">
            <text>unused SBSW reference found.</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="508" ID="---">
            <text>unused SBSW reference found.</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="267,15" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyElementIdsGetOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey), elementIdsSrc, &amp;elementIdsSrcSize) CryIf_KeyCopyForDifferentDrivers</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="268,15" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(targetCryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyElementIdsGetOfCryptoFunctions)((CryIf_Key[(targetCryIfKeyId)].RefOfKey), elementIdsDst, &amp;elementIdsDstSize) CryIf_KeyCopyForDifferentDrivers</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="280,23" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyElementGetOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey), elementIdsSrc[i], buffer, &amp;bufferSize) CryIf_KeyCopyForDifferentDrivers</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="282,25" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(targetCryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyElementSetOfCryptoFunctions)((CryIf_Key[(targetCryIfKeyId)].RefOfKey), elementIdsDst[j], buffer, bufferSize) CryIf_KeyCopyForDifferentDrivers</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="319,5" ID="---">
            <text>Pointer Write Access CryIf_TranslateRedirectionKeys</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="346,17" ID="---">
            <text>Function Call: CryIf_TranslateRedirectionKeys CryIf_UpdateRedirectionInfo</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="351,18" ID="---">
            <text>Function Call: CryIf_TranslateRedirectionKeys CryIf_UpdateRedirectionInfo</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="356,18" ID="---">
            <text>Function Call: CryIf_TranslateRedirectionKeys CryIf_UpdateRedirectionInfo</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="361,18" ID="---">
            <text>Function Call: CryIf_TranslateRedirectionKeys CryIf_UpdateRedirectionInfo</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="366,18" ID="---">
            <text>Function Call: CryIf_TranslateRedirectionKeys CryIf_UpdateRedirectionInfo</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="420,12" ID="---">
            <text>Array Write Access CryIf_Util_MemSet</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="438,12" ID="---">
            <text>Array Write Access CryIf_Util_MemCpy</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="477,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[(cryptoFctIdxSrc)].KeyElementGetOfCryptoFunctions)(cryptoKeyId, keyElementId, bufferSrc, &amp;bufferSizeSrc) CryIf_KeyElementCopyPartial_Internal</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="485,18" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[(cryptoFctIdxDst)].KeyElementGetOfCryptoFunctions)(targetCryptoKeyId, targetKeyElementId, bufferDst, &amp;bufferSizeDst) CryIf_KeyElementCopyPartial_Internal</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="499,13" ID="---">
            <text>Function Call: CryIf_Util_MemSet CryIf_KeyElementCopyPartial_Internal</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="503,11" ID="---">
            <text>Function Call: CryIf_Util_MemCpy CryIf_KeyElementCopyPartial_Internal</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="508,20" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[(cryptoFctIdxDst)].KeyElementSetOfCryptoFunctions)(targetCryptoKeyId, targetKeyElementId, bufferDst, bufferSizeDst) CryIf_KeyElementCopyPartial_Internal</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="619,5" ID="---">
            <text>Pointer Write Access CryIf_GetVersionInfo</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="620,5" ID="---">
            <text>Pointer Write Access CryIf_GetVersionInfo</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="621,5" ID="---">
            <text>Pointer Write Access CryIf_GetVersionInfo</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="622,5" ID="---">
            <text>Pointer Write Access CryIf_GetVersionInfo</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="623,5" ID="---">
            <text>Pointer Write Access CryIf_GetVersionInfo</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="658,3" ID="---">
            <text>Function Call: Csm_CallbackNotification CryIf_CallbackNotification</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="706,9" ID="---">
            <text>Pointer Write Access CryIf_ProcessJob</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="710,9" ID="---">
            <text>Pointer Write Access CryIf_ProcessJob</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="715,11" ID="---">
            <text>Pointer Write Access CryIf_ProcessJob</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="723,13" ID="---">
            <text>Function Call: CryIf_UpdateRedirectionInfo CryIf_ProcessJob</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="727,18" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Channel[(channelId)].CryptoFunctionsIdxOfChannel))].ProcessJobOfCryptoFunctions)((CryIf_Channel[(channelId)].DriverObjectRefOfChannel), job) CryIf_ProcessJob</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="793,9" ID="---">
            <text>Pointer Write Access CryIf_CancelJob</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="797,9" ID="---">
            <text>Pointer Write Access CryIf_CancelJob</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="802,11" ID="---">
            <text>Pointer Write Access CryIf_CancelJob</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="820,18" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Channel[(channelId)].CryptoFunctionsIdxOfChannel))].CancelJobOfCryptoFunctions)((CryIf_Channel[(channelId)].DriverObjectRefOfChannel), job) CryIf_CancelJob</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="887,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyElementSetOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey), keyElementId, keyPtr, keyLength) CryIf_KeyElementSet</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="938,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyValidSetOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey)) CryIf_KeySetValid</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1000,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyElementGetOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey), keyElementId, resultPtr, resultLengthPtr) CryIf_KeyElementGet</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1064,16" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[(cryptoFctIdxSrc)].KeyElementCopyOfCryptoFunctions)(cryptoKeyIdSrc, keyElementId, cryptoKeyIdDst, targetKeyElementId) CryIf_KeyElementCopy</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1071,11" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[(cryptoFctIdxSrc)].KeyElementGetOfCryptoFunctions)(cryptoKeyIdSrc, keyElementId, buffer, &amp;bufferSize) CryIf_KeyElementCopy</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1073,18" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[(cryptoFctIdxDst)].KeyElementSetOfCryptoFunctions)(cryptoKeyIdDst, targetKeyElementId, buffer, bufferSize) CryIf_KeyElementCopy</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1167,16" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[(cryptoFctIdxSrc)].KeyElementCopyPartialOfCryptoFunctions)(cryptoKeyIdSrc, keyElementId, keyElementSourceOffset, keyElementTargetOffset, keyElementCopyLength, cryptoKeyIdDst, targetKeyElementId) CryIf_KeyElementCopyPartial</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1226,16" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyCopyOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey), (CryIf_Key[(targetCryIfKeyId)].RefOfKey)) CryIf_KeyCopy</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1292,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].RandomSeedOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey), seedPtr, seedLength) CryIf_RandomSeed</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1342,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyGenerateOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey)) CryIf_KeyGenerate</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1392,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyDeriveOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey), (CryIf_Key[(targetCryIfKeyId)].RefOfKey)) CryIf_KeyDerive</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1452,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyExchangeCalcPubValOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey), publicValuePtr, publicValueLengthPtr) CryIf_KeyExchangeCalcPubVal</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1514,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].KeyExchangeCalcSecretOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey), partnerPublicValuePtr, partnerPublicValueLength) CryIf_KeyExchangeCalcSecret</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1564,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].CertificateParseOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey)) CryIf_CertificateParse</text>
            <result>info</result>
          </message>
          <message file="CryIf.c" line="1620,14" ID="---">
            <text>Function Pointer Call: (CryIf_CryptoFunctions[((CryIf_Key[(cryIfKeyId)].CryptoFunctionsIdxOfKey))].CertificateVerifyOfCryptoFunctions)((CryIf_Key[(cryIfKeyId)].RefOfKey), (CryIf_Key[(verifyCryIfKeyId)].RefOfKey), verifyPtr) CryIf_CertificateVerify</text>
            <result>info</result>
          </message>
        </log_build>
        <result>ok</result>
        <runtime>0</runtime>
      </testrun>
    </testcase>
    <testgroup name="Dynamic">
      <testcase id="[TC:Standard_Embedded.BuildVisual]" name="Build VC" ExecPlan="x">
        <description>Build code with VisualStudio compiler.</description>
        <testrun date="2020-08-25 15:41" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1, prj=TscCryIf, trg=Debug" config=".\Embedded\TestData_Storage\TestConfig1" CDK="20.08.25" execCnt="1">
          <testenv>
            <version>Visual</version>
            <option>N/A</option>
          </testenv>
          <log_build type="Visual">
            <message file="---" line="---" ID="---">
              <text>no findings</text>
              <result>ok</result>
            </message>
          </log_build>
          <result>ok</result>
          <runtime>0</runtime>
        </testrun>
        <testrun date="2020-08-25 15:42" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2, prj=TscCryIf, trg=Debug" config=".\Embedded\TestData_Storage\TestConfig2" CDK="20.08.25" execCnt="1">
          <testenv>
            <version>Visual</version>
            <option>N/A</option>
          </testenv>
          <log_build type="Visual">
            <message file="---" line="---" ID="---">
              <text>no findings</text>
              <result>ok</result>
            </message>
          </log_build>
          <result>ok</result>
          <runtime>0</runtime>
        </testrun>
        <testrun date="2020-08-25 15:42" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3, prj=TscCryIf, trg=Debug" config=".\Embedded\TestData_Storage\TestConfig3" CDK="20.08.25" execCnt="1">
          <testenv>
            <version>Visual</version>
            <option>N/A</option>
          </testenv>
          <log_build type="Visual">
            <message file="---" line="---" ID="---">
              <text>no findings</text>
              <result>ok</result>
            </message>
          </log_build>
          <result>ok</result>
          <runtime>0</runtime>
        </testrun>
        <testrun date="2020-08-25 15:42" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4, prj=TscCryIf, trg=Debug" config=".\Embedded\TestData_Storage\TestConfig4" CDK="20.08.25" execCnt="1">
          <testenv>
            <version>Visual</version>
            <option>N/A</option>
          </testenv>
          <log_build type="Visual">
            <message file="---" line="---" ID="---">
              <text>no findings</text>
              <result>ok</result>
            </message>
          </log_build>
          <result>ok</result>
          <runtime>0</runtime>
        </testrun>
      </testcase>
      <testcase id="[TC:Standard_Embedded.ResourceVisual]" name="MemoryResource Visual" ExecPlan="x">
        <description>Determine memory resources</description>
        <testrun date="2020-08-25 15:41" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1" config=".\Embedded\TestData_Storage\TestConfig1" CDK="20.08.25" execCnt="1">
          <testenv>
            <version>Sizer</version>
            <option>none</option>
          </testenv>
          <log_MemoryResources compiler="VisualStudio">
            <module name="CryIf_Cfg">
              <code>0</code>
              <const>0</const>
              <ram>0</ram>
              <iram>0</iram>
            </module>
            <module name="CryIf">
              <code>11879</code>
              <const>0</const>
              <ram>0</ram>
              <iram>0</iram>
              <function name="CryIf_CallbackNotification" size="63" />
              <function name="CryIf_CancelJob" size="832" />
              <function name="CryIf_CertificateParse" size="333" />
              <function name="CryIf_CertificateVerify" size="519" />
              <function name="CryIf_GetVersionInfo" size="235" />
              <function name="CryIf_Init" size="205" />
              <function name="CryIf_InitMemory" size="53" />
              <function name="CryIf_KeyCopy" size="549" />
              <function name="CryIf_KeyCopyForDifferentDrivers" size="1066" />
              <function name="CryIf_KeyDerive" size="450" />
              <function name="CryIf_KeyElementCopy" size="834" />
              <function name="CryIf_KeyElementCopyPartial" size="748" />
              <function name="CryIf_KeyElementCopyPartial_Internal" size="896" />
              <function name="CryIf_KeyElementCopyPartial_Stub" size="96" />
              <function name="CryIf_KeyElementGet" size="549" />
              <function name="CryIf_KeyElementSet" size="437" />
              <function name="CryIf_KeyExchangeCalcPubVal" size="575" />
              <function name="CryIf_KeyExchangeCalcSecret" size="468" />
              <function name="CryIf_KeyGenerate" size="333" />
              <function name="CryIf_KeySetValid" size="309" />
              <function name="CryIf_ProcessJob" size="691" />
              <function name="CryIf_RandomSeed" size="468" />
              <function name="CryIf_TranslateRedirectionKeys" size="140" />
              <function name="CryIf_UpdateRedirectionInfo" size="616" />
              <function name="CryIf_Util_Max" size="127" />
              <function name="CryIf_Util_MemCpy" size="146" />
              <function name="CryIf_Util_MemSet" size="141" />
            </module>
          </log_MemoryResources>
          <result>ok</result>
          <runtime>4</runtime>
        </testrun>
        <testrun date="2020-08-25 15:42" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2" config=".\Embedded\TestData_Storage\TestConfig2" CDK="20.08.25" execCnt="1">
          <testenv>
            <version>Sizer</version>
            <option>none</option>
          </testenv>
          <log_MemoryResources compiler="VisualStudio">
            <module name="CryIf_Cfg">
              <code>0</code>
              <const>0</const>
              <ram>0</ram>
              <iram>0</iram>
            </module>
            <module name="CryIf">
              <code>10740</code>
              <const>0</const>
              <ram>0</ram>
              <iram>0</iram>
              <function name="CryIf_CallbackNotification" size="63" />
              <function name="CryIf_CancelJob" size="832" />
              <function name="CryIf_CertificateParse" size="333" />
              <function name="CryIf_CertificateVerify" size="519" />
              <function name="CryIf_Init" size="205" />
              <function name="CryIf_InitMemory" size="53" />
              <function name="CryIf_KeyCopy" size="549" />
              <function name="CryIf_KeyCopyForDifferentDrivers" size="1066" />
              <function name="CryIf_KeyDerive" size="450" />
              <function name="CryIf_KeyElementCopy" size="786" />
              <function name="CryIf_KeyElementCopyPartial" size="737" />
              <function name="CryIf_KeyElementCopyPartial_Internal" size="896" />
              <function name="CryIf_KeyElementCopyPartial_Stub" size="90" />
              <function name="CryIf_KeyElementGet" size="531" />
              <function name="CryIf_KeyElementSet" size="437" />
              <function name="CryIf_KeyExchangeCalcPubVal" size="575" />
              <function name="CryIf_KeyExchangeCalcSecret" size="468" />
              <function name="CryIf_KeyGenerate" size="333" />
              <function name="CryIf_KeySetValid" size="309" />
              <function name="CryIf_ProcessJob" size="626" />
              <function name="CryIf_RandomSeed" size="468" />
              <function name="CryIf_Util_Max" size="127" />
              <function name="CryIf_Util_MemCpy" size="146" />
              <function name="CryIf_Util_MemSet" size="141" />
            </module>
          </log_MemoryResources>
          <result>ok</result>
          <runtime>5</runtime>
        </testrun>
        <testrun date="2020-08-25 15:42" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3" config=".\Embedded\TestData_Storage\TestConfig3" CDK="20.08.25" execCnt="1">
          <testenv>
            <version>Sizer</version>
            <option>none</option>
          </testenv>
          <log_MemoryResources compiler="VisualStudio">
            <module name="CryIf_Cfg">
              <code>0</code>
              <const>0</const>
              <ram>0</ram>
              <iram>0</iram>
            </module>
            <module name="CryIf">
              <code>10403</code>
              <const>0</const>
              <ram>0</ram>
              <iram>0</iram>
              <function name="CryIf_CallbackNotification" size="63" />
              <function name="CryIf_CancelJob" size="558" />
              <function name="CryIf_CertificateParse" size="259" />
              <function name="CryIf_CertificateVerify" size="445" />
              <function name="CryIf_GetVersionInfo" size="168" />
              <function name="CryIf_Init" size="137" />
              <function name="CryIf_InitMemory" size="53" />
              <function name="CryIf_KeyCopy" size="476" />
              <function name="CryIf_KeyCopyForDifferentDrivers" size="1066" />
              <function name="CryIf_KeyDerive" size="377" />
              <function name="CryIf_KeyElementCopy" size="730" />
              <function name="CryIf_KeyElementCopyPartial" size="675" />
              <function name="CryIf_KeyElementCopyPartial_Internal" size="896" />
              <function name="CryIf_KeyElementCopyPartial_Stub" size="96" />
              <function name="CryIf_KeyElementGet" size="463" />
              <function name="CryIf_KeyElementSet" size="369" />
              <function name="CryIf_KeyExchangeCalcPubVal" size="501" />
              <function name="CryIf_KeyExchangeCalcSecret" size="395" />
              <function name="CryIf_KeyGenerate" size="259" />
              <function name="CryIf_KeySetValid" size="241" />
              <function name="CryIf_ProcessJob" size="624" />
              <function name="CryIf_RandomSeed" size="395" />
              <function name="CryIf_TranslateRedirectionKeys" size="140" />
              <function name="CryIf_UpdateRedirectionInfo" size="603" />
              <function name="CryIf_Util_Max" size="127" />
              <function name="CryIf_Util_MemCpy" size="146" />
              <function name="CryIf_Util_MemSet" size="141" />
            </module>
          </log_MemoryResources>
          <result>ok</result>
          <runtime>5</runtime>
        </testrun>
        <testrun date="2020-08-25 15:42" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4" config=".\Embedded\TestData_Storage\TestConfig4" CDK="20.08.25" execCnt="1">
          <testenv>
            <version>Sizer</version>
            <option>none</option>
          </testenv>
          <log_MemoryResources compiler="VisualStudio">
            <module name="CryIf_Cfg">
              <code>0</code>
              <const>0</const>
              <ram>0</ram>
              <iram>0</iram>
            </module>
            <module name="CryIf">
              <code>6635</code>
              <const>0</const>
              <ram>0</ram>
              <iram>0</iram>
              <function name="CryIf_CallbackNotification" size="63" />
              <function name="CryIf_CancelJob" size="379" />
              <function name="CryIf_CertificateParse" size="126" />
              <function name="CryIf_CertificateVerify" size="141" />
              <function name="CryIf_GetVersionInfo" size="113" />
              <function name="CryIf_Init" size="69" />
              <function name="CryIf_InitMemory" size="46" />
              <function name="CryIf_KeyCopy" size="227" />
              <function name="CryIf_KeyCopyForDifferentDrivers" size="1066" />
              <function name="CryIf_KeyDerive" size="137" />
              <function name="CryIf_KeyElementCopy" size="506" />
              <function name="CryIf_KeyElementCopyPartial" size="414" />
              <function name="CryIf_KeyElementCopyPartial_Internal" size="896" />
              <function name="CryIf_KeyElementCopyPartial_Stub" size="90" />
              <function name="CryIf_KeyElementGet" size="138" />
              <function name="CryIf_KeyElementSet" size="138" />
              <function name="CryIf_KeyExchangeCalcPubVal" size="134" />
              <function name="CryIf_KeyExchangeCalcSecret" size="134" />
              <function name="CryIf_KeyGenerate" size="126" />
              <function name="CryIf_KeySetValid" size="126" />
              <function name="CryIf_ProcessJob" size="391" />
              <function name="CryIf_RandomSeed" size="134" />
              <function name="CryIf_TranslateRedirectionKeys" size="83" />
              <function name="CryIf_UpdateRedirectionInfo" size="544" />
              <function name="CryIf_Util_Max" size="127" />
              <function name="CryIf_Util_MemCpy" size="146" />
              <function name="CryIf_Util_MemSet" size="141" />
            </module>
          </log_MemoryResources>
          <result>ok</result>
          <runtime>5</runtime>
        </testrun>
      </testcase>
      <testcase id="[TC:Standard_Embedded.CodeCoverage]" name="Code Coverage" ExecPlan="x">
        <description>Determine code coverage </description>
        <testrun date="2020-08-25 15:42" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1" config=".\Embedded\TestData_Storage\TestConfig1" CDK="20.08.25" execCnt="1">
See <link name="Coverage_Vector.html">CodeCoverage\.\Embedded\TestData_Storage\TestConfig1\\Coverage_Vector.html</link> for details. 
<testenv><version>1.9.0</version><option>n/a</option></testenv><log_build type="Coverage" version="2" /><log_RuntimeCoverage version="1"><justification id="COV_CRYIF_ALWAYS_ON"><reason><![CDATA[CRYIF_LOCAL is always defined externally.]]></reason><accept>tx</accept></justification><justification id="COV_MSR_COMPATIBILITY"><reason><![CDATA[The condition checks whether a switch is defined and conditionally assigns a default value. This is used to ensure compatibility to older AUTOSAR/Component versions.]]></reason><accept>XF</accept></justification><justification id="COV_MSR_CONFIG"><reason><![CDATA[The condition is for optional plausibility checks of the configuration. The uncovered code only contains #error directives used to abort compilation.]]></reason><accept>XF</accept></justification><justification id="COV_MSR_CONSISTENCYCHECK"><reason><![CDATA[This condition is used for consistency checking.]]></reason></justification><justification id="COV_MSR_DEV_ERROR_DETECT"><reason><![CDATA[SafeBSW requires DEV_ERROR_DETECT to be always on. A MSSV Plugin enforces this configuration]]></reason></justification><justification id="COV_MSR_ERRORDIRECTIVE"><reason><![CDATA[The else branch contains an #error directive.]]></reason></justification><justification id="COV_MSR_HEADERGUARD"><reason><![CDATA[The condition is used as headerguard and cannot be tested.]]></reason></justification><justification id="COV_MSR_INACTIVE"><reason><![CDATA[This code is inactive and will not be used.]]></reason></justification><justification id="COV_MSR_IRRELEVANT"><reason><![CDATA[This code part only contains comments and white spaces.]]></reason></justification><justification id="COV_MSR_UNSUPPORTED"><reason><![CDATA[The feature is not supported in SafeBSW. A MSSV Plugin enforces this configuration.]]></reason><accept>XF</accept></justification><file abspath="d:\usr\development\components\if\if_asrifcry\base\implementation\trunk\cryif.c" checksum="e6febbf169068b6479210d4f31ef4b67"><name>cryif.c</name><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>27</modFctCovered><modFctCoveredJust>27</modFctCoveredJust><modFctCnt>27</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>229</modDecCovered><modDecCoveredJust>229</modDecCoveredJust><modDecCnt>229</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>211</condCnt><condCovered>211</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>193</decisionCnt><decisionCovered>193</decisionCovered><decisionCoveredJust>193</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>1</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust><function><name>CryIf_KeyCopyForDifferentDrivers(uint32,uint32)</name><file /><line>253</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>16</modDecCovered><modDecCoveredJust>16</modDecCoveredJust><modDecCnt>16</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>14</condCnt><condCovered>14</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>12</decisionCnt><decisionCovered>12</decisionCovered><decisionCoveredJust>12</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>7</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_TranslateRedirectionKeys(uint32*)</name><file /><line>306</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>2</modDecCovered><modDecCoveredJust>2</modDecCoveredJust><modDecCnt>2</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>2</condCnt><condCovered>2</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>2</decisionCnt><decisionCovered>2</decisionCovered><decisionCoveredJust>2</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>2</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_UpdateRedirectionInfo(const Crypto_JobType*)</name><file /><line>333</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>14</modDecCovered><modDecCoveredJust>14</modDecCoveredJust><modDecCnt>14</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>14</condCnt><condCovered>14</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>14</decisionCnt><decisionCovered>14</decisionCovered><decisionCoveredJust>14</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>8</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_Util_Max(uint32,uint32)</name><file /><line>401</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>2</modDecCovered><modDecCoveredJust>2</modDecCoveredJust><modDecCnt>2</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>2</condCnt><condCovered>2</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>2</decisionCnt><decisionCovered>2</decisionCovered><decisionCoveredJust>2</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>2</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_Util_MemSet(uint8*,uint8,uint32)</name><file /><line>414</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>2</modDecCovered><modDecCoveredJust>2</modDecCoveredJust><modDecCnt>2</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>2</condCnt><condCovered>2</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>2</decisionCnt><decisionCovered>2</decisionCovered><decisionCoveredJust>2</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>2</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_Util_MemCpy(uint8*,const uint8*,uint32)</name><file /><line>432</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>2</modDecCovered><modDecCoveredJust>2</modDecCoveredJust><modDecCnt>2</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>2</condCnt><condCovered>2</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>2</decisionCnt><decisionCovered>2</decisionCovered><decisionCoveredJust>2</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>2</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyElementCopyPartial_Internal(CryIf_CryptoFunctionsIdxOfKeyType,CryIf_CryptoFunctionsIdxOfKeyType,uint32,uint32,uint32,uint32,uint32,uint32,uint32)</name><file /><line>455</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>11</modDecCovered><modDecCoveredJust>11</modDecCoveredJust><modDecCnt>11</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>11</condCnt><condCovered>11</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>11</decisionCnt><decisionCovered>11</decisionCovered><decisionCoveredJust>11</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>7</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_InitMemory(void)</name><file /><line>545</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>N/A</dec_fct><decJust_fct>N/A</decJust_fct><modDecCovered>0</modDecCovered><modDecCoveredJust>0</modDecCoveredJust><modDecCnt>0</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>0</condCnt><condCovered>0</condCovered><cond_fct>0%</cond_fct><cond_fct>N/A</cond_fct><decisionCnt>0</decisionCnt><decisionCovered>0</decisionCovered><decisionCoveredJust>0</decisionCoveredJust><decision_fct>N/A</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>1</CYC></function><function><name>CryIf_Init(void)</name><file /><line>562</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>4</modDecCovered><modDecCoveredJust>4</modDecCoveredJust><modDecCnt>4</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>4</condCnt><condCovered>4</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>4</decisionCnt><decisionCovered>4</decisionCovered><decisionCoveredJust>4</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>3</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_GetVersionInfo(Std_VersionInfoType*)</name><file /><line>604</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>4</modDecCovered><modDecCoveredJust>4</modDecCoveredJust><modDecCnt>4</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>4</condCnt><condCovered>4</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>4</decisionCnt><decisionCovered>4</decisionCovered><decisionCoveredJust>4</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>3</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_CallbackNotification(Crypto_JobType*,Std_ReturnType)</name><file /><line>646</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>N/A</dec_fct><decJust_fct>N/A</decJust_fct><modDecCovered>0</modDecCovered><modDecCoveredJust>0</modDecCoveredJust><modDecCnt>0</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>0</condCnt><condCovered>0</condCovered><cond_fct>0%</cond_fct><cond_fct>N/A</cond_fct><decisionCnt>0</decisionCnt><decisionCovered>0</decisionCovered><decisionCoveredJust>0</decisionCoveredJust><decision_fct>N/A</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>1</CYC></function><function><name>CryIf_ProcessJob(uint32,Crypto_JobType*)</name><file /><line>671</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>16</modDecCovered><modDecCoveredJust>16</modDecCoveredJust><modDecCnt>16</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>16</condCnt><condCovered>16</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>16</decisionCnt><decisionCovered>16</decisionCovered><decisionCoveredJust>16</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>9</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_CancelJob(uint32,Crypto_JobType*)</name><file /><line>758</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>16</modDecCovered><modDecCoveredJust>16</modDecCoveredJust><modDecCnt>16</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>16</condCnt><condCovered>16</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>16</decisionCnt><decisionCovered>16</decisionCovered><decisionCoveredJust>16</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>9</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyElementSet(uint32,uint32,const uint8*,uint32)</name><file /><line>852</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>10</modDecCovered><modDecCoveredJust>10</modDecCoveredJust><modDecCnt>10</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>10</condCnt><condCovered>10</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>10</decisionCnt><decisionCovered>10</decisionCovered><decisionCoveredJust>10</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>6</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeySetValid(uint32)</name><file /><line>916</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>6</modDecCovered><modDecCoveredJust>6</modDecCoveredJust><modDecCnt>6</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>6</condCnt><condCovered>6</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>6</decisionCnt><decisionCovered>6</decisionCovered><decisionCoveredJust>6</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>4</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyElementGet(uint32,uint32,uint8*,uint32*)</name><file /><line>964</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>14</modDecCovered><modDecCoveredJust>14</modDecCoveredJust><modDecCnt>14</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>12</condCnt><condCovered>12</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>10</decisionCnt><decisionCovered>10</decisionCovered><decisionCoveredJust>10</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>6</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyElementCopy(uint32,uint32,uint32,uint32)</name><file /><line>1030</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>14</modDecCovered><modDecCoveredJust>14</modDecCoveredJust><modDecCnt>14</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>12</condCnt><condCovered>12</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>10</decisionCnt><decisionCovered>10</decisionCovered><decisionCoveredJust>10</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>6</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyElementCopyPartial_Stub(uint32,uint32,uint32,uint32,uint32,uint32,uint32)</name><file /><line>1099</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>N/A</dec_fct><decJust_fct>N/A</decJust_fct><modDecCovered>0</modDecCovered><modDecCoveredJust>0</modDecCoveredJust><modDecCnt>0</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>0</condCnt><condCovered>0</condCovered><cond_fct>0%</cond_fct><cond_fct>N/A</cond_fct><decisionCnt>0</decisionCnt><decisionCovered>0</decisionCovered><decisionCoveredJust>0</decisionCoveredJust><decision_fct>N/A</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>1</CYC></function><function><name>CryIf_KeyElementCopyPartial(uint32,uint32,uint32,uint32,uint32,uint32,uint32)</name><file /><line>1129</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>16</modDecCovered><modDecCoveredJust>16</modDecCoveredJust><modDecCnt>16</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>12</condCnt><condCovered>12</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>8</decisionCnt><decisionCovered>8</decisionCovered><decisionCoveredJust>8</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>5</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyCopy(uint32,uint32)</name><file /><line>1199</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>12</modDecCovered><modDecCoveredJust>12</modDecCoveredJust><modDecCnt>12</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>10</condCnt><condCovered>10</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>8</decisionCnt><decisionCovered>8</decisionCovered><decisionCoveredJust>8</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>5</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_RandomSeed(uint32,const uint8*,uint32)</name><file /><line>1258</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>10</modDecCovered><modDecCoveredJust>10</modDecCoveredJust><modDecCnt>10</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>10</condCnt><condCovered>10</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>10</decisionCnt><decisionCovered>10</decisionCovered><decisionCoveredJust>10</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>6</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyGenerate(uint32)</name><file /><line>1320</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>6</modDecCovered><modDecCoveredJust>6</modDecCoveredJust><modDecCnt>6</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>6</condCnt><condCovered>6</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>6</decisionCnt><decisionCovered>6</decisionCovered><decisionCoveredJust>6</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>4</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyDerive(uint32,uint32)</name><file /><line>1368</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>10</modDecCovered><modDecCoveredJust>10</modDecCoveredJust><modDecCnt>10</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>8</condCnt><condCovered>8</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>6</decisionCnt><decisionCovered>6</decisionCovered><decisionCoveredJust>6</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>4</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyExchangeCalcPubVal(uint32,uint8*,uint32*)</name><file /><line>1418</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>14</modDecCovered><modDecCoveredJust>14</modDecCoveredJust><modDecCnt>14</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>12</condCnt><condCovered>12</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>10</decisionCnt><decisionCovered>10</decisionCovered><decisionCoveredJust>10</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>6</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyExchangeCalcSecret(uint32,const uint8*,uint32)</name><file /><line>1480</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>10</modDecCovered><modDecCoveredJust>10</modDecCoveredJust><modDecCnt>10</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>10</condCnt><condCovered>10</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>10</decisionCnt><decisionCovered>10</decisionCovered><decisionCoveredJust>10</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>6</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_CertificateParse(uint32)</name><file /><line>1542</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>6</modDecCovered><modDecCoveredJust>6</modDecCoveredJust><modDecCnt>6</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>6</condCnt><condCovered>6</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>6</decisionCnt><decisionCovered>6</decisionCovered><decisionCoveredJust>6</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>4</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_CertificateVerify(uint32,uint32,Crypto_VerifyResultType*)</name><file /><line>1590</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>12</modDecCovered><modDecCoveredJust>12</modDecCoveredJust><modDecCnt>12</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>10</condCnt><condCovered>10</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>8</decisionCnt><decisionCovered>8</decisionCovered><decisionCoveredJust>8</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>5</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function></file><summary><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>27</modFctCovered><modFctCoveredJust>27</modFctCoveredJust><modFctCnt>27</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>229</modDecCovered><modDecCoveredJust>229</modDecCoveredJust><modDecCnt>229</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>211</condCnt><condCovered>211</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>193</decisionCnt><decisionCovered>193</decisionCovered><decisionCoveredJust>193</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>1</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></summary></log_RuntimeCoverage><result>ok</result><runtime>0</runtime></testrun>
        <testrun date="2020-08-25 15:42" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2" config=".\Embedded\TestData_Storage\TestConfig2" CDK="20.08.25" execCnt="1">
See <link name="Coverage_Vector.html">CodeCoverage\.\Embedded\TestData_Storage\TestConfig2\\Coverage_Vector.html</link> for details. 
<testenv><version>1.9.0</version><option>n/a</option></testenv><log_build type="Coverage" version="2" /><log_RuntimeCoverage version="1"><justification id="COV_CRYIF_ALWAYS_ON"><reason><![CDATA[CRYIF_LOCAL is always defined externally.]]></reason><accept>tx</accept></justification><justification id="COV_MSR_COMPATIBILITY"><reason><![CDATA[The condition checks whether a switch is defined and conditionally assigns a default value. This is used to ensure compatibility to older AUTOSAR/Component versions.]]></reason><accept>XF</accept></justification><justification id="COV_MSR_CONFIG"><reason><![CDATA[The condition is for optional plausibility checks of the configuration. The uncovered code only contains #error directives used to abort compilation.]]></reason><accept>XF</accept></justification><justification id="COV_MSR_CONSISTENCYCHECK"><reason><![CDATA[This condition is used for consistency checking.]]></reason></justification><justification id="COV_MSR_DEV_ERROR_DETECT"><reason><![CDATA[SafeBSW requires DEV_ERROR_DETECT to be always on. A MSSV Plugin enforces this configuration]]></reason></justification><justification id="COV_MSR_ERRORDIRECTIVE"><reason><![CDATA[The else branch contains an #error directive.]]></reason></justification><justification id="COV_MSR_HEADERGUARD"><reason><![CDATA[The condition is used as headerguard and cannot be tested.]]></reason></justification><justification id="COV_MSR_INACTIVE"><reason><![CDATA[This code is inactive and will not be used.]]></reason></justification><justification id="COV_MSR_IRRELEVANT"><reason><![CDATA[This code part only contains comments and white spaces.]]></reason></justification><justification id="COV_MSR_UNSUPPORTED"><reason><![CDATA[The feature is not supported in SafeBSW. A MSSV Plugin enforces this configuration.]]></reason><accept>XF</accept></justification><file abspath="d:\usr\development\components\if\if_asrifcry\base\implementation\trunk\cryif.c" checksum="e6febbf169068b6479210d4f31ef4b67"><name>cryif.c</name><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>24</modFctCovered><modFctCoveredJust>24</modFctCoveredJust><modFctCnt>24</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>207</modDecCovered><modDecCoveredJust>207</modDecCoveredJust><modDecCnt>207</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>189</condCnt><condCovered>189</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>171</decisionCnt><decisionCovered>171</decisionCovered><decisionCoveredJust>171</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>1</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust><function><name>CryIf_KeyCopyForDifferentDrivers(uint32,uint32)</name><file /><line>253</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>16</modDecCovered><modDecCoveredJust>16</modDecCoveredJust><modDecCnt>16</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>14</condCnt><condCovered>14</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>12</decisionCnt><decisionCovered>12</decisionCovered><decisionCoveredJust>12</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>7</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_Util_Max(uint32,uint32)</name><file /><line>401</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>2</modDecCovered><modDecCoveredJust>2</modDecCoveredJust><modDecCnt>2</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>2</condCnt><condCovered>2</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>2</decisionCnt><decisionCovered>2</decisionCovered><decisionCoveredJust>2</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>2</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_Util_MemSet(uint8*,uint8,uint32)</name><file /><line>414</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>2</modDecCovered><modDecCoveredJust>2</modDecCoveredJust><modDecCnt>2</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>2</condCnt><condCovered>2</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>2</decisionCnt><decisionCovered>2</decisionCovered><decisionCoveredJust>2</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>2</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_Util_MemCpy(uint8*,const uint8*,uint32)</name><file /><line>432</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>2</modDecCovered><modDecCoveredJust>2</modDecCoveredJust><modDecCnt>2</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>2</condCnt><condCovered>2</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>2</decisionCnt><decisionCovered>2</decisionCovered><decisionCoveredJust>2</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>2</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyElementCopyPartial_Internal(CryIf_CryptoFunctionsIdxOfKeyType,CryIf_CryptoFunctionsIdxOfKeyType,uint32,uint32,uint32,uint32,uint32,uint32,uint32)</name><file /><line>455</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>11</modDecCovered><modDecCoveredJust>11</modDecCoveredJust><modDecCnt>11</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>11</condCnt><condCovered>11</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>11</decisionCnt><decisionCovered>11</decisionCovered><decisionCoveredJust>11</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>7</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_InitMemory(void)</name><file /><line>545</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>N/A</dec_fct><decJust_fct>N/A</decJust_fct><modDecCovered>0</modDecCovered><modDecCoveredJust>0</modDecCoveredJust><modDecCnt>0</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>0</condCnt><condCovered>0</condCovered><cond_fct>0%</cond_fct><cond_fct>N/A</cond_fct><decisionCnt>0</decisionCnt><decisionCovered>0</decisionCovered><decisionCoveredJust>0</decisionCoveredJust><decision_fct>N/A</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>1</CYC></function><function><name>CryIf_Init(void)</name><file /><line>562</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>4</modDecCovered><modDecCoveredJust>4</modDecCoveredJust><modDecCnt>4</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>4</condCnt><condCovered>4</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>4</decisionCnt><decisionCovered>4</decisionCovered><decisionCoveredJust>4</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>3</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_CallbackNotification(Crypto_JobType*,Std_ReturnType)</name><file /><line>646</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>N/A</dec_fct><decJust_fct>N/A</decJust_fct><modDecCovered>0</modDecCovered><modDecCoveredJust>0</modDecCoveredJust><modDecCnt>0</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>0</condCnt><condCovered>0</condCovered><cond_fct>0%</cond_fct><cond_fct>N/A</cond_fct><decisionCnt>0</decisionCnt><decisionCovered>0</decisionCovered><decisionCoveredJust>0</decisionCoveredJust><decision_fct>N/A</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>1</CYC></function><function><name>CryIf_ProcessJob(uint32,Crypto_JobType*)</name><file /><line>671</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>14</modDecCovered><modDecCoveredJust>14</modDecCoveredJust><modDecCnt>14</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>14</condCnt><condCovered>14</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>14</decisionCnt><decisionCovered>14</decisionCovered><decisionCoveredJust>14</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>8</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_CancelJob(uint32,Crypto_JobType*)</name><file /><line>758</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>16</modDecCovered><modDecCoveredJust>16</modDecCoveredJust><modDecCnt>16</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>16</condCnt><condCovered>16</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>16</decisionCnt><decisionCovered>16</decisionCovered><decisionCoveredJust>16</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>9</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyElementSet(uint32,uint32,const uint8*,uint32)</name><file /><line>852</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>10</modDecCovered><modDecCoveredJust>10</modDecCoveredJust><modDecCnt>10</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>10</condCnt><condCovered>10</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>10</decisionCnt><decisionCovered>10</decisionCovered><decisionCoveredJust>10</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>6</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeySetValid(uint32)</name><file /><line>916</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>6</modDecCovered><modDecCoveredJust>6</modDecCoveredJust><modDecCnt>6</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>6</condCnt><condCovered>6</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>6</decisionCnt><decisionCovered>6</decisionCovered><decisionCoveredJust>6</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>4</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyElementGet(uint32,uint32,uint8*,uint32*)</name><file /><line>964</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>14</modDecCovered><modDecCoveredJust>14</modDecCoveredJust><modDecCnt>14</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>12</condCnt><condCovered>12</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>10</decisionCnt><decisionCovered>10</decisionCovered><decisionCoveredJust>10</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>6</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyElementCopy(uint32,uint32,uint32,uint32)</name><file /><line>1030</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>14</modDecCovered><modDecCoveredJust>14</modDecCoveredJust><modDecCnt>14</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>12</condCnt><condCovered>12</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>10</decisionCnt><decisionCovered>10</decisionCovered><decisionCoveredJust>10</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>6</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyElementCopyPartial_Stub(uint32,uint32,uint32,uint32,uint32,uint32,uint32)</name><file /><line>1099</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>N/A</dec_fct><decJust_fct>N/A</decJust_fct><modDecCovered>0</modDecCovered><modDecCoveredJust>0</modDecCoveredJust><modDecCnt>0</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>0</condCnt><condCovered>0</condCovered><cond_fct>0%</cond_fct><cond_fct>N/A</cond_fct><decisionCnt>0</decisionCnt><decisionCovered>0</decisionCovered><decisionCoveredJust>0</decisionCoveredJust><decision_fct>N/A</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>1</CYC></function><function><name>CryIf_KeyElementCopyPartial(uint32,uint32,uint32,uint32,uint32,uint32,uint32)</name><file /><line>1129</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>16</modDecCovered><modDecCoveredJust>16</modDecCoveredJust><modDecCnt>16</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>12</condCnt><condCovered>12</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>8</decisionCnt><decisionCovered>8</decisionCovered><decisionCoveredJust>8</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>5</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyCopy(uint32,uint32)</name><file /><line>1199</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>12</modDecCovered><modDecCoveredJust>12</modDecCoveredJust><modDecCnt>12</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>10</condCnt><condCovered>10</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>8</decisionCnt><decisionCovered>8</decisionCovered><decisionCoveredJust>8</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>5</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_RandomSeed(uint32,const uint8*,uint32)</name><file /><line>1258</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>10</modDecCovered><modDecCoveredJust>10</modDecCoveredJust><modDecCnt>10</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>10</condCnt><condCovered>10</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>10</decisionCnt><decisionCovered>10</decisionCovered><decisionCoveredJust>10</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>6</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyGenerate(uint32)</name><file /><line>1320</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>6</modDecCovered><modDecCoveredJust>6</modDecCoveredJust><modDecCnt>6</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>6</condCnt><condCovered>6</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>6</decisionCnt><decisionCovered>6</decisionCovered><decisionCoveredJust>6</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>4</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyDerive(uint32,uint32)</name><file /><line>1368</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>10</modDecCovered><modDecCoveredJust>10</modDecCoveredJust><modDecCnt>10</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>8</condCnt><condCovered>8</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>6</decisionCnt><decisionCovered>6</decisionCovered><decisionCoveredJust>6</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>4</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyExchangeCalcPubVal(uint32,uint8*,uint32*)</name><file /><line>1418</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>14</modDecCovered><modDecCoveredJust>14</modDecCoveredJust><modDecCnt>14</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>12</condCnt><condCovered>12</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>10</decisionCnt><decisionCovered>10</decisionCovered><decisionCoveredJust>10</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>6</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyExchangeCalcSecret(uint32,const uint8*,uint32)</name><file /><line>1480</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>10</modDecCovered><modDecCoveredJust>10</modDecCoveredJust><modDecCnt>10</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>10</condCnt><condCovered>10</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>10</decisionCnt><decisionCovered>10</decisionCovered><decisionCoveredJust>10</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>6</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_CertificateParse(uint32)</name><file /><line>1542</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>6</modDecCovered><modDecCoveredJust>6</modDecCoveredJust><modDecCnt>6</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>6</condCnt><condCovered>6</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>6</decisionCnt><decisionCovered>6</decisionCovered><decisionCoveredJust>6</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>4</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_CertificateVerify(uint32,uint32,Crypto_VerifyResultType*)</name><file /><line>1590</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>12</modDecCovered><modDecCoveredJust>12</modDecCoveredJust><modDecCnt>12</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>10</condCnt><condCovered>10</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>8</decisionCnt><decisionCovered>8</decisionCovered><decisionCoveredJust>8</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>5</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function></file><summary><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>24</modFctCovered><modFctCoveredJust>24</modFctCoveredJust><modFctCnt>24</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>207</modDecCovered><modDecCoveredJust>207</modDecCoveredJust><modDecCnt>207</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>189</condCnt><condCovered>189</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>171</decisionCnt><decisionCovered>171</decisionCovered><decisionCoveredJust>171</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>1</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></summary></log_RuntimeCoverage><result>ok</result><runtime>0</runtime></testrun>
        <testrun date="2020-08-25 15:42" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3" config=".\Embedded\TestData_Storage\TestConfig3" CDK="20.08.25" execCnt="1">
See <link name="Coverage_Vector.html">CodeCoverage\.\Embedded\TestData_Storage\TestConfig3\\Coverage_Vector.html</link> for details. 
<testenv><version>1.9.0</version><option>n/a</option></testenv><log_build type="Coverage" version="2" /><log_RuntimeCoverage version="1"><justification id="COV_CRYIF_ALWAYS_ON"><reason><![CDATA[CRYIF_LOCAL is always defined externally.]]></reason><accept>tx</accept></justification><justification id="COV_MSR_COMPATIBILITY"><reason><![CDATA[The condition checks whether a switch is defined and conditionally assigns a default value. This is used to ensure compatibility to older AUTOSAR/Component versions.]]></reason><accept>XF</accept></justification><justification id="COV_MSR_CONFIG"><reason><![CDATA[The condition is for optional plausibility checks of the configuration. The uncovered code only contains #error directives used to abort compilation.]]></reason><accept>XF</accept></justification><justification id="COV_MSR_CONSISTENCYCHECK"><reason><![CDATA[This condition is used for consistency checking.]]></reason></justification><justification id="COV_MSR_DEV_ERROR_DETECT"><reason><![CDATA[SafeBSW requires DEV_ERROR_DETECT to be always on. A MSSV Plugin enforces this configuration]]></reason></justification><justification id="COV_MSR_ERRORDIRECTIVE"><reason><![CDATA[The else branch contains an #error directive.]]></reason></justification><justification id="COV_MSR_HEADERGUARD"><reason><![CDATA[The condition is used as headerguard and cannot be tested.]]></reason></justification><justification id="COV_MSR_INACTIVE"><reason><![CDATA[This code is inactive and will not be used.]]></reason></justification><justification id="COV_MSR_IRRELEVANT"><reason><![CDATA[This code part only contains comments and white spaces.]]></reason></justification><justification id="COV_MSR_UNSUPPORTED"><reason><![CDATA[The feature is not supported in SafeBSW. A MSSV Plugin enforces this configuration.]]></reason><accept>XF</accept></justification><file abspath="d:\usr\development\components\if\if_asrifcry\base\implementation\trunk\cryif.c" checksum="e6febbf169068b6479210d4f31ef4b67"><name>cryif.c</name><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>27</modFctCovered><modFctCoveredJust>27</modFctCoveredJust><modFctCnt>27</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>193</modDecCovered><modDecCoveredJust>193</modDecCoveredJust><modDecCnt>193</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>175</condCnt><condCovered>175</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>157</decisionCnt><decisionCovered>157</decisionCovered><decisionCoveredJust>157</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>1</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust><function><name>CryIf_KeyCopyForDifferentDrivers(uint32,uint32)</name><file /><line>253</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>16</modDecCovered><modDecCoveredJust>16</modDecCoveredJust><modDecCnt>16</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>14</condCnt><condCovered>14</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>12</decisionCnt><decisionCovered>12</decisionCovered><decisionCoveredJust>12</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>7</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_TranslateRedirectionKeys(uint32*)</name><file /><line>306</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>2</modDecCovered><modDecCoveredJust>2</modDecCoveredJust><modDecCnt>2</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>2</condCnt><condCovered>2</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>2</decisionCnt><decisionCovered>2</decisionCovered><decisionCoveredJust>2</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>2</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_UpdateRedirectionInfo(const Crypto_JobType*)</name><file /><line>333</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>14</modDecCovered><modDecCoveredJust>14</modDecCoveredJust><modDecCnt>14</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>14</condCnt><condCovered>14</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>14</decisionCnt><decisionCovered>14</decisionCovered><decisionCoveredJust>14</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>8</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_Util_Max(uint32,uint32)</name><file /><line>401</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>2</modDecCovered><modDecCoveredJust>2</modDecCoveredJust><modDecCnt>2</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>2</condCnt><condCovered>2</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>2</decisionCnt><decisionCovered>2</decisionCovered><decisionCoveredJust>2</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>2</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_Util_MemSet(uint8*,uint8,uint32)</name><file /><line>414</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>2</modDecCovered><modDecCoveredJust>2</modDecCoveredJust><modDecCnt>2</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>2</condCnt><condCovered>2</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>2</decisionCnt><decisionCovered>2</decisionCovered><decisionCoveredJust>2</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>2</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_Util_MemCpy(uint8*,const uint8*,uint32)</name><file /><line>432</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>2</modDecCovered><modDecCoveredJust>2</modDecCoveredJust><modDecCnt>2</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>2</condCnt><condCovered>2</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>2</decisionCnt><decisionCovered>2</decisionCovered><decisionCoveredJust>2</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>2</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyElementCopyPartial_Internal(CryIf_CryptoFunctionsIdxOfKeyType,CryIf_CryptoFunctionsIdxOfKeyType,uint32,uint32,uint32,uint32,uint32,uint32,uint32)</name><file /><line>455</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>11</modDecCovered><modDecCoveredJust>11</modDecCoveredJust><modDecCnt>11</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>11</condCnt><condCovered>11</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>11</decisionCnt><decisionCovered>11</decisionCovered><decisionCoveredJust>11</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>7</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_InitMemory(void)</name><file /><line>545</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>N/A</dec_fct><decJust_fct>N/A</decJust_fct><modDecCovered>0</modDecCovered><modDecCoveredJust>0</modDecCoveredJust><modDecCnt>0</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>0</condCnt><condCovered>0</condCovered><cond_fct>0%</cond_fct><cond_fct>N/A</cond_fct><decisionCnt>0</decisionCnt><decisionCovered>0</decisionCovered><decisionCoveredJust>0</decisionCoveredJust><decision_fct>N/A</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>1</CYC></function><function><name>CryIf_Init(void)</name><file /><line>562</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>2</modDecCovered><modDecCoveredJust>2</modDecCoveredJust><modDecCnt>2</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>2</condCnt><condCovered>2</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>2</decisionCnt><decisionCovered>2</decisionCovered><decisionCoveredJust>2</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>2</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_GetVersionInfo(Std_VersionInfoType*)</name><file /><line>604</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>2</modDecCovered><modDecCoveredJust>2</modDecCoveredJust><modDecCnt>2</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>2</condCnt><condCovered>2</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>2</decisionCnt><decisionCovered>2</decisionCovered><decisionCoveredJust>2</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>2</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_CallbackNotification(Crypto_JobType*,Std_ReturnType)</name><file /><line>646</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>N/A</dec_fct><decJust_fct>N/A</decJust_fct><modDecCovered>0</modDecCovered><modDecCoveredJust>0</modDecCoveredJust><modDecCnt>0</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>0</condCnt><condCovered>0</condCovered><cond_fct>0%</cond_fct><cond_fct>N/A</cond_fct><decisionCnt>0</decisionCnt><decisionCovered>0</decisionCovered><decisionCoveredJust>0</decisionCoveredJust><decision_fct>N/A</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>1</CYC></function><function><name>CryIf_ProcessJob(uint32,Crypto_JobType*)</name><file /><line>671</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>14</modDecCovered><modDecCoveredJust>14</modDecCoveredJust><modDecCnt>14</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>14</condCnt><condCovered>14</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>14</decisionCnt><decisionCovered>14</decisionCovered><decisionCoveredJust>14</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>8</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_CancelJob(uint32,Crypto_JobType*)</name><file /><line>758</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>12</modDecCovered><modDecCoveredJust>12</modDecCoveredJust><modDecCnt>12</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>12</condCnt><condCovered>12</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>12</decisionCnt><decisionCovered>12</decisionCovered><decisionCoveredJust>12</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>7</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyElementSet(uint32,uint32,const uint8*,uint32)</name><file /><line>852</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>8</modDecCovered><modDecCoveredJust>8</modDecCoveredJust><modDecCnt>8</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>8</condCnt><condCovered>8</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>8</decisionCnt><decisionCovered>8</decisionCovered><decisionCoveredJust>8</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>5</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeySetValid(uint32)</name><file /><line>916</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>4</modDecCovered><modDecCoveredJust>4</modDecCoveredJust><modDecCnt>4</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>4</condCnt><condCovered>4</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>4</decisionCnt><decisionCovered>4</decisionCovered><decisionCoveredJust>4</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>3</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyElementGet(uint32,uint32,uint8*,uint32*)</name><file /><line>964</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>12</modDecCovered><modDecCoveredJust>12</modDecCoveredJust><modDecCnt>12</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>10</condCnt><condCovered>10</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>8</decisionCnt><decisionCovered>8</decisionCovered><decisionCoveredJust>8</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>5</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyElementCopy(uint32,uint32,uint32,uint32)</name><file /><line>1030</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>12</modDecCovered><modDecCoveredJust>12</modDecCoveredJust><modDecCnt>12</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>10</condCnt><condCovered>10</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>8</decisionCnt><decisionCovered>8</decisionCovered><decisionCoveredJust>8</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>5</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyElementCopyPartial_Stub(uint32,uint32,uint32,uint32,uint32,uint32,uint32)</name><file /><line>1099</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>N/A</dec_fct><decJust_fct>N/A</decJust_fct><modDecCovered>0</modDecCovered><modDecCoveredJust>0</modDecCoveredJust><modDecCnt>0</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>0</condCnt><condCovered>0</condCovered><cond_fct>0%</cond_fct><cond_fct>N/A</cond_fct><decisionCnt>0</decisionCnt><decisionCovered>0</decisionCovered><decisionCoveredJust>0</decisionCoveredJust><decision_fct>N/A</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>1</CYC></function><function><name>CryIf_KeyElementCopyPartial(uint32,uint32,uint32,uint32,uint32,uint32,uint32)</name><file /><line>1129</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>14</modDecCovered><modDecCoveredJust>14</modDecCoveredJust><modDecCnt>14</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>10</condCnt><condCovered>10</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>6</decisionCnt><decisionCovered>6</decisionCovered><decisionCoveredJust>6</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>4</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyCopy(uint32,uint32)</name><file /><line>1199</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>10</modDecCovered><modDecCoveredJust>10</modDecCoveredJust><modDecCnt>10</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>8</condCnt><condCovered>8</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>6</decisionCnt><decisionCovered>6</decisionCovered><decisionCoveredJust>6</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>4</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_RandomSeed(uint32,const uint8*,uint32)</name><file /><line>1258</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>8</modDecCovered><modDecCoveredJust>8</modDecCoveredJust><modDecCnt>8</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>8</condCnt><condCovered>8</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>8</decisionCnt><decisionCovered>8</decisionCovered><decisionCoveredJust>8</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>5</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyGenerate(uint32)</name><file /><line>1320</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>4</modDecCovered><modDecCoveredJust>4</modDecCoveredJust><modDecCnt>4</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>4</condCnt><condCovered>4</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>4</decisionCnt><decisionCovered>4</decisionCovered><decisionCoveredJust>4</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>3</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyDerive(uint32,uint32)</name><file /><line>1368</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>8</modDecCovered><modDecCoveredJust>8</modDecCoveredJust><modDecCnt>8</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>6</condCnt><condCovered>6</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>4</decisionCnt><decisionCovered>4</decisionCovered><decisionCoveredJust>4</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>3</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyExchangeCalcPubVal(uint32,uint8*,uint32*)</name><file /><line>1418</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>12</modDecCovered><modDecCoveredJust>12</modDecCoveredJust><modDecCnt>12</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>10</condCnt><condCovered>10</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>8</decisionCnt><decisionCovered>8</decisionCovered><decisionCoveredJust>8</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>5</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyExchangeCalcSecret(uint32,const uint8*,uint32)</name><file /><line>1480</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>8</modDecCovered><modDecCoveredJust>8</modDecCoveredJust><modDecCnt>8</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>8</condCnt><condCovered>8</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>8</decisionCnt><decisionCovered>8</decisionCovered><decisionCoveredJust>8</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>5</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_CertificateParse(uint32)</name><file /><line>1542</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>4</modDecCovered><modDecCoveredJust>4</modDecCoveredJust><modDecCnt>4</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>4</condCnt><condCovered>4</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>4</decisionCnt><decisionCovered>4</decisionCovered><decisionCoveredJust>4</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>3</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_CertificateVerify(uint32,uint32,Crypto_VerifyResultType*)</name><file /><line>1590</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>10</modDecCovered><modDecCoveredJust>10</modDecCoveredJust><modDecCnt>10</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>8</condCnt><condCovered>8</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>6</decisionCnt><decisionCovered>6</decisionCovered><decisionCoveredJust>6</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>4</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function></file><summary><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>27</modFctCovered><modFctCoveredJust>27</modFctCoveredJust><modFctCnt>27</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>193</modDecCovered><modDecCoveredJust>193</modDecCoveredJust><modDecCnt>193</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>175</condCnt><condCovered>175</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>157</decisionCnt><decisionCovered>157</decisionCovered><decisionCoveredJust>157</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>1</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></summary></log_RuntimeCoverage><result>ok</result><runtime>0</runtime></testrun>
        <testrun date="2020-08-25 15:42" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4" config=".\Embedded\TestData_Storage\TestConfig4" CDK="20.08.25" execCnt="1">
See <link name="Coverage_Vector.html">CodeCoverage\.\Embedded\TestData_Storage\TestConfig4\\Coverage_Vector.html</link> for details. 
<testenv><version>1.9.0</version><option>n/a</option></testenv><log_build type="Coverage" version="2" /><log_RuntimeCoverage version="1"><justification id="COV_CRYIF_ALWAYS_ON"><reason><![CDATA[CRYIF_LOCAL is always defined externally.]]></reason><accept>tx</accept></justification><justification id="COV_MSR_COMPATIBILITY"><reason><![CDATA[The condition checks whether a switch is defined and conditionally assigns a default value. This is used to ensure compatibility to older AUTOSAR/Component versions.]]></reason><accept>XF</accept></justification><justification id="COV_MSR_CONFIG"><reason><![CDATA[The condition is for optional plausibility checks of the configuration. The uncovered code only contains #error directives used to abort compilation.]]></reason><accept>XF</accept></justification><justification id="COV_MSR_CONSISTENCYCHECK"><reason><![CDATA[This condition is used for consistency checking.]]></reason></justification><justification id="COV_MSR_DEV_ERROR_DETECT"><reason><![CDATA[SafeBSW requires DEV_ERROR_DETECT to be always on. A MSSV Plugin enforces this configuration]]></reason></justification><justification id="COV_MSR_ERRORDIRECTIVE"><reason><![CDATA[The else branch contains an #error directive.]]></reason></justification><justification id="COV_MSR_HEADERGUARD"><reason><![CDATA[The condition is used as headerguard and cannot be tested.]]></reason></justification><justification id="COV_MSR_INACTIVE"><reason><![CDATA[This code is inactive and will not be used.]]></reason></justification><justification id="COV_MSR_IRRELEVANT"><reason><![CDATA[This code part only contains comments and white spaces.]]></reason></justification><justification id="COV_MSR_UNSUPPORTED"><reason><![CDATA[The feature is not supported in SafeBSW. A MSSV Plugin enforces this configuration.]]></reason><accept>XF</accept></justification><file abspath="d:\usr\development\components\if\if_asrifcry\base\implementation\trunk\cryif.c" checksum="e6febbf169068b6479210d4f31ef4b67"><name>cryif.c</name><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>27</modFctCovered><modFctCoveredJust>27</modFctCoveredJust><modFctCnt>27</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>69</modDecCovered><modDecCoveredJust>69</modDecCoveredJust><modDecCnt>69</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>65</condCnt><condCovered>65</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>61</decisionCnt><decisionCovered>61</decisionCovered><decisionCoveredJust>61</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>1</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust><function><name>CryIf_KeyCopyForDifferentDrivers(uint32,uint32)</name><file /><line>253</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>16</modDecCovered><modDecCoveredJust>16</modDecCoveredJust><modDecCnt>16</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>14</condCnt><condCovered>14</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>12</decisionCnt><decisionCovered>12</decisionCovered><decisionCoveredJust>12</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>7</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_TranslateRedirectionKeys(uint32*)</name><file /><line>306</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>N/A</dec_fct><decJust_fct>N/A</decJust_fct><modDecCovered>0</modDecCovered><modDecCoveredJust>0</modDecCoveredJust><modDecCnt>0</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>0</condCnt><condCovered>0</condCovered><cond_fct>0%</cond_fct><cond_fct>N/A</cond_fct><decisionCnt>0</decisionCnt><decisionCovered>0</decisionCovered><decisionCoveredJust>0</decisionCoveredJust><decision_fct>N/A</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>1</CYC></function><function><name>CryIf_UpdateRedirectionInfo(const Crypto_JobType*)</name><file /><line>333</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>12</modDecCovered><modDecCoveredJust>12</modDecCoveredJust><modDecCnt>12</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>12</condCnt><condCovered>12</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>12</decisionCnt><decisionCovered>12</decisionCovered><decisionCoveredJust>12</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>7</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_Util_Max(uint32,uint32)</name><file /><line>401</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>2</modDecCovered><modDecCoveredJust>2</modDecCoveredJust><modDecCnt>2</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>2</condCnt><condCovered>2</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>2</decisionCnt><decisionCovered>2</decisionCovered><decisionCoveredJust>2</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>2</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_Util_MemSet(uint8*,uint8,uint32)</name><file /><line>414</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>2</modDecCovered><modDecCoveredJust>2</modDecCoveredJust><modDecCnt>2</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>2</condCnt><condCovered>2</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>2</decisionCnt><decisionCovered>2</decisionCovered><decisionCoveredJust>2</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>2</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_Util_MemCpy(uint8*,const uint8*,uint32)</name><file /><line>432</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>2</modDecCovered><modDecCoveredJust>2</modDecCoveredJust><modDecCnt>2</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>2</condCnt><condCovered>2</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>2</decisionCnt><decisionCovered>2</decisionCovered><decisionCoveredJust>2</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>2</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyElementCopyPartial_Internal(CryIf_CryptoFunctionsIdxOfKeyType,CryIf_CryptoFunctionsIdxOfKeyType,uint32,uint32,uint32,uint32,uint32,uint32,uint32)</name><file /><line>455</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>11</modDecCovered><modDecCoveredJust>11</modDecCoveredJust><modDecCnt>11</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>11</condCnt><condCovered>11</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>11</decisionCnt><decisionCovered>11</decisionCovered><decisionCoveredJust>11</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>7</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_InitMemory(void)</name><file /><line>545</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>N/A</dec_fct><decJust_fct>N/A</decJust_fct><modDecCovered>0</modDecCovered><modDecCoveredJust>0</modDecCoveredJust><modDecCnt>0</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>0</condCnt><condCovered>0</condCovered><cond_fct>0%</cond_fct><cond_fct>N/A</cond_fct><decisionCnt>0</decisionCnt><decisionCovered>0</decisionCovered><decisionCoveredJust>0</decisionCoveredJust><decision_fct>N/A</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>1</CYC></function><function><name>CryIf_Init(void)</name><file /><line>562</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>N/A</dec_fct><decJust_fct>N/A</decJust_fct><modDecCovered>0</modDecCovered><modDecCoveredJust>0</modDecCoveredJust><modDecCnt>0</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>0</condCnt><condCovered>0</condCovered><cond_fct>0%</cond_fct><cond_fct>N/A</cond_fct><decisionCnt>0</decisionCnt><decisionCovered>0</decisionCovered><decisionCoveredJust>0</decisionCoveredJust><decision_fct>N/A</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>1</CYC></function><function><name>CryIf_GetVersionInfo(Std_VersionInfoType*)</name><file /><line>604</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>N/A</dec_fct><decJust_fct>N/A</decJust_fct><modDecCovered>0</modDecCovered><modDecCoveredJust>0</modDecCoveredJust><modDecCnt>0</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>0</condCnt><condCovered>0</condCovered><cond_fct>0%</cond_fct><cond_fct>N/A</cond_fct><decisionCnt>0</decisionCnt><decisionCovered>0</decisionCovered><decisionCoveredJust>0</decisionCoveredJust><decision_fct>N/A</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>1</CYC></function><function><name>CryIf_CallbackNotification(Crypto_JobType*,Std_ReturnType)</name><file /><line>646</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>N/A</dec_fct><decJust_fct>N/A</decJust_fct><modDecCovered>0</modDecCovered><modDecCoveredJust>0</modDecCoveredJust><modDecCnt>0</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>0</condCnt><condCovered>0</condCovered><cond_fct>0%</cond_fct><cond_fct>N/A</cond_fct><decisionCnt>0</decisionCnt><decisionCovered>0</decisionCovered><decisionCoveredJust>0</decisionCoveredJust><decision_fct>N/A</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>1</CYC></function><function><name>CryIf_ProcessJob(uint32,Crypto_JobType*)</name><file /><line>671</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>6</modDecCovered><modDecCoveredJust>6</modDecCoveredJust><modDecCnt>6</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>6</condCnt><condCovered>6</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>6</decisionCnt><decisionCovered>6</decisionCovered><decisionCoveredJust>6</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>4</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_CancelJob(uint32,Crypto_JobType*)</name><file /><line>758</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>6</modDecCovered><modDecCoveredJust>6</modDecCoveredJust><modDecCnt>6</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>6</condCnt><condCovered>6</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>6</decisionCnt><decisionCovered>6</decisionCovered><decisionCoveredJust>6</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>4</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyElementSet(uint32,uint32,const uint8*,uint32)</name><file /><line>852</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>N/A</dec_fct><decJust_fct>N/A</decJust_fct><modDecCovered>0</modDecCovered><modDecCoveredJust>0</modDecCoveredJust><modDecCnt>0</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>0</condCnt><condCovered>0</condCovered><cond_fct>0%</cond_fct><cond_fct>N/A</cond_fct><decisionCnt>0</decisionCnt><decisionCovered>0</decisionCovered><decisionCoveredJust>0</decisionCoveredJust><decision_fct>N/A</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>1</CYC></function><function><name>CryIf_KeySetValid(uint32)</name><file /><line>916</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>N/A</dec_fct><decJust_fct>N/A</decJust_fct><modDecCovered>0</modDecCovered><modDecCoveredJust>0</modDecCoveredJust><modDecCnt>0</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>0</condCnt><condCovered>0</condCovered><cond_fct>0%</cond_fct><cond_fct>N/A</cond_fct><decisionCnt>0</decisionCnt><decisionCovered>0</decisionCovered><decisionCoveredJust>0</decisionCoveredJust><decision_fct>N/A</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>1</CYC></function><function><name>CryIf_KeyElementGet(uint32,uint32,uint8*,uint32*)</name><file /><line>964</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>N/A</dec_fct><decJust_fct>N/A</decJust_fct><modDecCovered>0</modDecCovered><modDecCoveredJust>0</modDecCoveredJust><modDecCnt>0</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>0</condCnt><condCovered>0</condCovered><cond_fct>0%</cond_fct><cond_fct>N/A</cond_fct><decisionCnt>0</decisionCnt><decisionCovered>0</decisionCovered><decisionCoveredJust>0</decisionCoveredJust><decision_fct>N/A</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>1</CYC></function><function><name>CryIf_KeyElementCopy(uint32,uint32,uint32,uint32)</name><file /><line>1030</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>4</modDecCovered><modDecCoveredJust>4</modDecCoveredJust><modDecCnt>4</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>4</condCnt><condCovered>4</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>4</decisionCnt><decisionCovered>4</decisionCovered><decisionCoveredJust>4</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>3</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyElementCopyPartial_Stub(uint32,uint32,uint32,uint32,uint32,uint32,uint32)</name><file /><line>1099</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>N/A</dec_fct><decJust_fct>N/A</decJust_fct><modDecCovered>0</modDecCovered><modDecCoveredJust>0</modDecCoveredJust><modDecCnt>0</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>0</condCnt><condCovered>0</condCovered><cond_fct>0%</cond_fct><cond_fct>N/A</cond_fct><decisionCnt>0</decisionCnt><decisionCovered>0</decisionCovered><decisionCoveredJust>0</decisionCoveredJust><decision_fct>N/A</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>1</CYC></function><function><name>CryIf_KeyElementCopyPartial(uint32,uint32,uint32,uint32,uint32,uint32,uint32)</name><file /><line>1129</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>6</modDecCovered><modDecCoveredJust>6</modDecCoveredJust><modDecCnt>6</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>4</condCnt><condCovered>4</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>2</decisionCnt><decisionCovered>2</decisionCovered><decisionCoveredJust>2</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>2</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_KeyCopy(uint32,uint32)</name><file /><line>1199</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>2</modDecCovered><modDecCoveredJust>2</modDecCoveredJust><modDecCnt>2</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>2</condCnt><condCovered>2</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>2</decisionCnt><decisionCovered>2</decisionCovered><decisionCoveredJust>2</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>2</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></function><function><name>CryIf_RandomSeed(uint32,const uint8*,uint32)</name><file /><line>1258</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>N/A</dec_fct><decJust_fct>N/A</decJust_fct><modDecCovered>0</modDecCovered><modDecCoveredJust>0</modDecCoveredJust><modDecCnt>0</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>0</condCnt><condCovered>0</condCovered><cond_fct>0%</cond_fct><cond_fct>N/A</cond_fct><decisionCnt>0</decisionCnt><decisionCovered>0</decisionCovered><decisionCoveredJust>0</decisionCoveredJust><decision_fct>N/A</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>1</CYC></function><function><name>CryIf_KeyGenerate(uint32)</name><file /><line>1320</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>N/A</dec_fct><decJust_fct>N/A</decJust_fct><modDecCovered>0</modDecCovered><modDecCoveredJust>0</modDecCoveredJust><modDecCnt>0</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>0</condCnt><condCovered>0</condCovered><cond_fct>0%</cond_fct><cond_fct>N/A</cond_fct><decisionCnt>0</decisionCnt><decisionCovered>0</decisionCovered><decisionCoveredJust>0</decisionCoveredJust><decision_fct>N/A</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>1</CYC></function><function><name>CryIf_KeyDerive(uint32,uint32)</name><file /><line>1368</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>N/A</dec_fct><decJust_fct>N/A</decJust_fct><modDecCovered>0</modDecCovered><modDecCoveredJust>0</modDecCoveredJust><modDecCnt>0</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>0</condCnt><condCovered>0</condCovered><cond_fct>0%</cond_fct><cond_fct>N/A</cond_fct><decisionCnt>0</decisionCnt><decisionCovered>0</decisionCovered><decisionCoveredJust>0</decisionCoveredJust><decision_fct>N/A</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>1</CYC></function><function><name>CryIf_KeyExchangeCalcPubVal(uint32,uint8*,uint32*)</name><file /><line>1418</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>N/A</dec_fct><decJust_fct>N/A</decJust_fct><modDecCovered>0</modDecCovered><modDecCoveredJust>0</modDecCoveredJust><modDecCnt>0</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>0</condCnt><condCovered>0</condCovered><cond_fct>0%</cond_fct><cond_fct>N/A</cond_fct><decisionCnt>0</decisionCnt><decisionCovered>0</decisionCovered><decisionCoveredJust>0</decisionCoveredJust><decision_fct>N/A</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>1</CYC></function><function><name>CryIf_KeyExchangeCalcSecret(uint32,const uint8*,uint32)</name><file /><line>1480</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>N/A</dec_fct><decJust_fct>N/A</decJust_fct><modDecCovered>0</modDecCovered><modDecCoveredJust>0</modDecCoveredJust><modDecCnt>0</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>0</condCnt><condCovered>0</condCovered><cond_fct>0%</cond_fct><cond_fct>N/A</cond_fct><decisionCnt>0</decisionCnt><decisionCovered>0</decisionCovered><decisionCoveredJust>0</decisionCoveredJust><decision_fct>N/A</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>1</CYC></function><function><name>CryIf_CertificateParse(uint32)</name><file /><line>1542</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>N/A</dec_fct><decJust_fct>N/A</decJust_fct><modDecCovered>0</modDecCovered><modDecCoveredJust>0</modDecCoveredJust><modDecCnt>0</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>0</condCnt><condCovered>0</condCovered><cond_fct>0%</cond_fct><cond_fct>N/A</cond_fct><decisionCnt>0</decisionCnt><decisionCovered>0</decisionCovered><decisionCoveredJust>0</decisionCoveredJust><decision_fct>N/A</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>1</CYC></function><function><name>CryIf_CertificateVerify(uint32,uint32,Crypto_VerifyResultType*)</name><file /><line>1590</line><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>1</modFctCovered><modFctCoveredJust>1</modFctCoveredJust><modFctCnt>1</modFctCnt><dec_fct>N/A</dec_fct><decJust_fct>N/A</decJust_fct><modDecCovered>0</modDecCovered><modDecCoveredJust>0</modDecCoveredJust><modDecCnt>0</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>0</condCnt><condCovered>0</condCovered><cond_fct>0%</cond_fct><cond_fct>N/A</cond_fct><decisionCnt>0</decisionCnt><decisionCovered>0</decisionCovered><decisionCoveredJust>0</decisionCoveredJust><decision_fct>N/A</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>1</CYC></function></file><summary><cov_fct>100%</cov_fct><covJust_fct>100%</covJust_fct><modFctCovered>27</modFctCovered><modFctCoveredJust>27</modFctCoveredJust><modFctCnt>27</modFctCnt><dec_fct>100%</dec_fct><decJust_fct>100%</decJust_fct><modDecCovered>69</modDecCovered><modDecCoveredJust>69</modDecCoveredJust><modDecCnt>69</modDecCnt><stmtCnt>0</stmtCnt><stmtCovered>0</stmtCovered><stmtCoveredJust>0</stmtCoveredJust><stmt_fct>N/A</stmt_fct><stmtJust_fct>N/A</stmtJust_fct><condCnt>65</condCnt><condCovered>65</condCovered><cond_fct>100%</cond_fct><cond_fct>100%</cond_fct><decisionCnt>61</decisionCnt><decisionCovered>61</decisionCovered><decisionCoveredJust>61</decisionCoveredJust><decision_fct>100%</decision_fct><callsCnt>0</callsCnt><callsCovered>0</callsCovered><callsCoveredJust>0</callsCoveredJust><callcov_fct>N/A</callcov_fct><callcovJust_fct>N/A</callcovJust_fct><CYC>1</CYC><riskCYC>0</riskCYC><riskCYCJust>0</riskCYCJust></summary></log_RuntimeCoverage><result>ok</result><runtime>0</runtime></testrun>
      </testcase>
      <testgroup name="Metrics">
        <testcase id="[TC:Standard_Embedded.FunctionCallContext]" name="Function Call Context" ExecPlan="x">
          <description />
          <testrun date="2020-08-25 15:42:05" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <FunctionCallContext>
              <function name="CryIf_Init" type="1" contextTask="1" contextIR="1" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_ProcessJob" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyElementCopyPartial" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyElementGet" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyElementCopy" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyElementSet" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyCopy" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyValidSet" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_CertificateParse" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_CertificateVerify" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyDerive" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyGenerate" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyExchangeCalcPubVal" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyExchangeCalcSecret" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_RandomSeed" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_GetVersionInfo" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_CancelJob" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_CallbackNotification" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="Csm_CallbackNotification" type="0" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="Det_ReportError" type="0" contextTask="1" contextIR="1" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyElementCopyPartial_Stub" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
            </FunctionCallContext>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:22" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <FunctionCallContext>
              <function name="CryIf_Init" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyElementCopyPartial" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyElementGet" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyElementCopy" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyElementSet" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyCopy" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyValidSet" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_CertificateParse" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_CertificateVerify" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyDerive" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyGenerate" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyExchangeCalcPubVal" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyExchangeCalcSecret" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_RandomSeed" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_CancelJob" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_ProcessJob" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_CallbackNotification" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="Csm_CallbackNotification" type="0" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyElementCopyPartial_Stub" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="Det_ReportError" type="0" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
            </FunctionCallContext>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:39" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <FunctionCallContext>
              <function name="CryIf_Init" type="1" contextTask="1" contextIR="1" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_ProcessJob" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyElementCopyPartial" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyElementGet" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyElementCopy" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyElementSet" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyCopy" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyValidSet" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_CertificateParse" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_CertificateVerify" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyDerive" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyGenerate" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyExchangeCalcPubVal" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyExchangeCalcSecret" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_RandomSeed" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_GetVersionInfo" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_CancelJob" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_CallbackNotification" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="Csm_CallbackNotification" type="0" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyElementCopyPartial_Stub" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
            </FunctionCallContext>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:55" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <FunctionCallContext>
              <function name="CryIf_Init" type="1" contextTask="1" contextIR="1" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_ProcessJob" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyElementCopyPartial" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyElementGet" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyElementCopy" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyElementSet" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyCopy" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyValidSet" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_CertificateParse" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_CertificateVerify" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyDerive" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyGenerate" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyExchangeCalcPubVal" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyExchangeCalcSecret" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_RandomSeed" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_GetVersionInfo" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_CancelJob" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_CallbackNotification" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="Csm_CallbackNotification" type="0" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
              <function name="CryIf_KeyElementCopyPartial_Stub" type="1" contextTask="1" contextIR="0" IRlocked="0" IRnotLocked="1" ExclusiveArea="notEA9 notEA8 notEA7 notEA6 notEA5 notEA4 notEA3 notEA2 notEA1 notEA0 " />
            </FunctionCallContext>
            <result>ok</result>
          </testrun>
        </testcase>
        <testcase id="[TC:Standard_Embedded.FunctionRuntime]" name="Function Runtime measurement" ExecPlan="x">
          <description />
          <testrun date="2020-08-25 15:42:05" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig1 " execCnt="1">
            <FunctionRuntime>
              <function name="CryIf_Init" min="0" max="120" occurrence="98" sum="149" avg="1" />
              <function name="CryIf_ProcessJob" min="1" max="175" occurrence="10" sum="1147" avg="114" />
              <function name="CryIf_KeyElementCopyPartial" min="2" max="912" occurrence="12" sum="4145" avg="345" />
              <function name="CryIf_KeyElementGet" min="121" max="417" occurrence="6" sum="1058" avg="176" />
              <function name="CryIf_KeyElementCopy" min="121" max="585" occurrence="7" sum="1546" avg="220" />
              <function name="CryIf_KeyElementSet" min="122" max="166" occurrence="5" sum="683" avg="136" />
              <function name="CryIf_KeyCopy" min="121" max="687" occurrence="9" sum="3108" avg="345" />
              <function name="CryIf_KeyValidSet" min="122" max="164" occurrence="3" sum="410" avg="136" />
              <function name="CryIf_CertificateParse" min="105" max="287" occurrence="3" sum="518" avg="172" />
              <function name="CryIf_CertificateVerify" min="122" max="135" occurrence="5" sum="633" avg="126" />
              <function name="CryIf_KeyDerive" min="120" max="125" occurrence="4" sum="490" avg="122" />
              <function name="CryIf_KeyGenerate" min="122" max="311" occurrence="3" sum="557" avg="185" />
              <function name="CryIf_KeyExchangeCalcPubVal" min="121" max="168" occurrence="6" sum="803" avg="133" />
              <function name="CryIf_KeyExchangeCalcSecret" min="119" max="267" occurrence="5" sum="787" avg="157" />
              <function name="CryIf_RandomSeed" min="118" max="354" occurrence="5" sum="893" avg="178" />
              <function name="CryIf_GetVersionInfo" min="1" max="123" occurrence="2" sum="124" avg="62" />
              <function name="CryIf_CancelJob" min="1" max="121" occurrence="7" sum="687" avg="98" />
              <function name="CryIf_CallbackNotification" min="112" max="112" occurrence="1" sum="112" avg="112" />
              <function name="CryIf_KeyElementCopyPartial_Stub" min="0" max="0" occurrence="1" sum="0" avg="0" />
            </FunctionRuntime>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:22" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig2 " execCnt="1">
            <FunctionRuntime>
              <function name="CryIf_Init" min="0" max="114" occurrence="98" sum="141" avg="1" />
              <function name="CryIf_KeyElementCopyPartial" min="2" max="738" occurrence="12" sum="3362" avg="280" />
              <function name="CryIf_KeyElementGet" min="111" max="136" occurrence="6" sum="721" avg="120" />
              <function name="CryIf_KeyElementCopy" min="112" max="488" occurrence="7" sum="1406" avg="200" />
              <function name="CryIf_KeyElementSet" min="114" max="137" occurrence="5" sum="625" avg="125" />
              <function name="CryIf_KeyCopy" min="122" max="605" occurrence="9" sum="2864" avg="318" />
              <function name="CryIf_KeyValidSet" min="109" max="122" occurrence="3" sum="351" avg="117" />
              <function name="CryIf_CertificateParse" min="109" max="118" occurrence="3" sum="339" avg="113" />
              <function name="CryIf_CertificateVerify" min="115" max="271" occurrence="5" sum="764" avg="152" />
              <function name="CryIf_KeyDerive" min="109" max="119" occurrence="4" sum="454" avg="113" />
              <function name="CryIf_KeyGenerate" min="99" max="120" occurrence="3" sum="329" avg="109" />
              <function name="CryIf_KeyExchangeCalcPubVal" min="118" max="145" occurrence="6" sum="753" avg="125" />
              <function name="CryIf_KeyExchangeCalcSecret" min="111" max="158" occurrence="5" sum="619" avg="123" />
              <function name="CryIf_RandomSeed" min="114" max="1691" occurrence="5" sum="2166" avg="433" />
              <function name="CryIf_CancelJob" min="1" max="239" occurrence="7" sum="869" avg="124" />
              <function name="CryIf_ProcessJob" min="2" max="130" occurrence="7" sum="694" avg="99" />
              <function name="CryIf_CallbackNotification" min="103" max="103" occurrence="1" sum="103" avg="103" />
              <function name="CryIf_KeyElementCopyPartial_Stub" min="1" max="1" occurrence="1" sum="1" avg="1" />
            </FunctionRuntime>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:39" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig3 " execCnt="1">
            <FunctionRuntime>
              <function name="CryIf_Init" min="0" max="1" occurrence="98" sum="29" avg="0" />
              <function name="CryIf_ProcessJob" min="0" max="183" occurrence="10" sum="632" avg="63" />
              <function name="CryIf_KeyElementCopyPartial" min="0" max="770" occurrence="12" sum="3033" avg="252" />
              <function name="CryIf_KeyElementGet" min="0" max="135" occurrence="6" sum="144" avg="24" />
              <function name="CryIf_KeyElementCopy" min="1" max="586" occurrence="7" sum="1146" avg="163" />
              <function name="CryIf_KeyElementSet" min="1" max="144" occurrence="5" sum="149" avg="29" />
              <function name="CryIf_KeyCopy" min="0" max="714" occurrence="9" sum="2545" avg="282" />
              <function name="CryIf_KeyValidSet" min="1" max="111" occurrence="3" sum="113" avg="37" />
              <function name="CryIf_CertificateParse" min="1" max="103" occurrence="3" sum="105" avg="35" />
              <function name="CryIf_CertificateVerify" min="0" max="135" occurrence="5" sum="138" avg="27" />
              <function name="CryIf_KeyDerive" min="1" max="116" occurrence="4" sum="119" avg="29" />
              <function name="CryIf_KeyGenerate" min="0" max="733" occurrence="3" sum="734" avg="244" />
              <function name="CryIf_KeyExchangeCalcPubVal" min="1" max="151" occurrence="6" sum="156" avg="26" />
              <function name="CryIf_KeyExchangeCalcSecret" min="1" max="159" occurrence="5" sum="163" avg="32" />
              <function name="CryIf_RandomSeed" min="0" max="130" occurrence="5" sum="135" avg="27" />
              <function name="CryIf_GetVersionInfo" min="0" max="1" occurrence="2" sum="1" avg="0" />
              <function name="CryIf_CancelJob" min="1" max="117" occurrence="7" sum="338" avg="48" />
              <function name="CryIf_CallbackNotification" min="109" max="109" occurrence="1" sum="109" avg="109" />
              <function name="CryIf_KeyElementCopyPartial_Stub" min="0" max="0" occurrence="1" sum="0" avg="0" />
            </FunctionRuntime>
            <result>ok</result>
          </testrun>
          <testrun date="2020-08-25 15:42:55" executor="vismxe" parameter="config=.\Embedded\TestData_Storage\TestConfig4 " execCnt="1">
            <FunctionRuntime>
              <function name="CryIf_Init" min="0" max="1" occurrence="96" sum="33" avg="0" />
              <function name="CryIf_ProcessJob" min="1" max="360" occurrence="6" sum="858" avg="143" />
              <function name="CryIf_KeyElementCopyPartial" min="1" max="676" occurrence="9" sum="3043" avg="338" />
              <function name="CryIf_KeyElementGet" min="135" max="135" occurrence="1" sum="135" avg="135" />
              <function name="CryIf_KeyElementCopy" min="157" max="606" occurrence="4" sum="1595" avg="398" />
              <function name="CryIf_KeyElementSet" min="144" max="144" occurrence="1" sum="144" avg="144" />
              <function name="CryIf_KeyCopy" min="118" max="724" occurrence="6" sum="2702" avg="450" />
              <function name="CryIf_KeyValidSet" min="107" max="107" occurrence="1" sum="107" avg="107" />
              <function name="CryIf_CertificateParse" min="109" max="109" occurrence="1" sum="109" avg="109" />
              <function name="CryIf_CertificateVerify" min="143" max="143" occurrence="1" sum="143" avg="143" />
              <function name="CryIf_KeyDerive" min="123" max="123" occurrence="1" sum="123" avg="123" />
              <function name="CryIf_KeyGenerate" min="313" max="313" occurrence="1" sum="313" avg="313" />
              <function name="CryIf_KeyExchangeCalcPubVal" min="161" max="161" occurrence="1" sum="161" avg="161" />
              <function name="CryIf_KeyExchangeCalcSecret" min="160" max="160" occurrence="1" sum="160" avg="160" />
              <function name="CryIf_RandomSeed" min="139" max="139" occurrence="1" sum="139" avg="139" />
              <function name="CryIf_GetVersionInfo" min="1" max="1" occurrence="1" sum="1" avg="1" />
              <function name="CryIf_CancelJob" min="1" max="111" occurrence="4" sum="331" avg="82" />
              <function name="CryIf_CallbackNotification" min="110" max="110" occurrence="1" sum="110" avg="110" />
              <function name="CryIf_KeyElementCopyPartial_Stub" min="2" max="2" occurrence="1" sum="2" avg="2" />
            </FunctionRuntime>
            <result>ok</result>
          </testrun>
        </testcase>
      </testgroup>
    </testgroup>
  </testgroup>
  <testelement name="Description" date="2020-08-25 15:41" executor="vismxe">
    <repository>
      <info>
        <entry path="." revision="481008" kind="dir">
          <url>https://vglobpessvn1.vg.vector.int/svn/CANbedded/If/If_AsrIfCry/base/Description/trunk</url>
          <relative-url>^/If/If_AsrIfCry/base/Description/trunk</relative-url>
          <repository>
            <root>https://vglobpessvn1.vg.vector.int/svn/CANbedded</root>
            <uuid>134c08b6-4c6f-da49-b378-d823a05eae69</uuid>
          </repository>
          <wc-info>
            <wcroot-abspath>D:/usr/development/Components/If/If_AsrIfCry/base</wcroot-abspath>
            <schedule>normal</schedule>
            <depth>infinity</depth>
          </wc-info>
          <commit revision="479166">
            <author>vismxe</author>
            <date>2020-08-19T09:50:22.577271Z</date>
          </commit>
        </entry>
      </info>
      <status>
        <target path="D:\usr\development\Components\If\If_AsrIfCry\base\Description\trunk"></target>
      </status>
    </repository>
    <fileversion name="CryIf_bswmd.arxml" version="5.01.00  for 5.01.00" />
    <fileversion name="CryIf_SafeBSW_pre.arxml" version="N/A  for .." />
  </testelement>
  <testelement name="Doc_TechRef" date="2020-08-25 15:41" executor="vismxe">
    <repository>
      <info>
        <entry path="." revision="481008" kind="dir">
          <url>https://vglobpessvn1.vg.vector.int/svn/CANbedded/If/If_AsrIfCry/base/Doc_TechRef/trunk</url>
          <relative-url>^/If/If_AsrIfCry/base/Doc_TechRef/trunk</relative-url>
          <repository>
            <root>https://vglobpessvn1.vg.vector.int/svn/CANbedded</root>
            <uuid>134c08b6-4c6f-da49-b378-d823a05eae69</uuid>
          </repository>
          <wc-info>
            <wcroot-abspath>D:/usr/development/Components/If/If_AsrIfCry/base</wcroot-abspath>
            <schedule>normal</schedule>
            <depth>infinity</depth>
          </wc-info>
          <commit revision="464748">
            <author>vismxe</author>
            <date>2020-07-09T14:25:13.093578Z</date>
          </commit>
        </entry>
      </info>
      <status>
        <target path="D:\usr\development\Components\If\If_AsrIfCry\base\Doc_TechRef\trunk"></target>
      </status>
    </repository>
    <fileversion name="TechnicalReference_CryIf.pdf" version="N/A" />
  </testelement>
  <testelement name="GenTool_Cfg5" date="2020-08-25 15:41" executor="vismxe">
    <repository>
      <info>
        <entry path="." revision="481008" kind="dir">
          <url>https://vglobpessvn1.vg.vector.int/svn/CANbedded/If/If_AsrIfCry/base/GenTool_GeneratorMsr/trunk</url>
          <relative-url>^/If/If_AsrIfCry/base/GenTool_GeneratorMsr/trunk</relative-url>
          <repository>
            <root>https://vglobpessvn1.vg.vector.int/svn/CANbedded</root>
            <uuid>134c08b6-4c6f-da49-b378-d823a05eae69</uuid>
          </repository>
          <wc-info>
            <wcroot-abspath>D:/usr/development/Components/If/If_AsrIfCry/base</wcroot-abspath>
            <schedule>normal</schedule>
            <depth>infinity</depth>
          </wc-info>
          <commit revision="479045">
            <author>vispescfg5genci</author>
            <date>2020-08-18T14:55:36.157375Z</date>
          </commit>
        </entry>
      </info>
      <status>
        <target path="D:\usr\development\Components\If\If_AsrIfCry\base\GenTool_GeneratorMsr\trunk"></target>
      </status>
    </repository>
    <fileversion name="If_AsrIfCry.jar" version="N/A" />
    <fileversion name="If_AsrIfCry_Debug.jar" version="N/A" />
  </testelement>
  <testelement name="Implementation" date="2020-08-25 15:41" executor="vismxe">
    <repository>
      <info>
        <entry path="." revision="481008" kind="dir">
          <url>https://vglobpessvn1.vg.vector.int/svn/CANbedded/If/If_AsrIfCry/base/Implementation/trunk</url>
          <relative-url>^/If/If_AsrIfCry/base/Implementation/trunk</relative-url>
          <repository>
            <root>https://vglobpessvn1.vg.vector.int/svn/CANbedded</root>
            <uuid>134c08b6-4c6f-da49-b378-d823a05eae69</uuid>
          </repository>
          <wc-info>
            <wcroot-abspath>D:/usr/development/Components/If/If_AsrIfCry/base</wcroot-abspath>
            <schedule>normal</schedule>
            <depth>infinity</depth>
          </wc-info>
          <commit revision="481008">
            <author>vismxe</author>
            <date>2020-08-25T13:38:44.399975Z</date>
          </commit>
        </entry>
      </info>
      <status>
        <target path="D:\usr\development\Components\If\If_AsrIfCry\base\Implementation\trunk"></target>
      </status>
    </repository>
    <fileversion name="CryIf.c" version="N/A" />
    <fileversion name="CryIf.h" version="5.01.00" />
    <fileversion name="CryIf_Cbk.h" version="N/A" />
    <fileversion name="CryIf_Compiler_Cfg.inc" version="N/A" />
    <fileversion name="CryIf_MemMap.inc" version="N/A" />
  </testelement>
  <testelement name="Make" date="2020-08-25 15:41" executor="vismxe">
    <repository>
      <info>
        <entry kind="dir" path="." revision="481008">
          <url>https://vglobpessvn1.vg.vector.int/svn/CANbedded/If/If_AsrIfCry/base/Make/trunk</url>
          <relative-url>^/If/If_AsrIfCry/base/Make/trunk</relative-url>
          <repository>
            <root>https://vglobpessvn1.vg.vector.int/svn/CANbedded</root>
            <uuid>134c08b6-4c6f-da49-b378-d823a05eae69</uuid>
          </repository>
          <wc-info>
            <wcroot-abspath>D:/usr/development/Components/If/If_AsrIfCry/base</wcroot-abspath>
            <schedule>normal</schedule>
            <depth>infinity</depth>
          </wc-info>
          <commit revision="374109">
            <author>vircbl</author>
            <date>2019-02-15T06:23:17.904953Z</date>
          </commit>
        </entry>
      </info>
      <status>
        <target path="D:\usr\development\Components\If\If_AsrIfCry\base\Make\trunk"></target>
      </status>
    </repository>
    <fileversion name="CryIf_cfg.mak" version="N/A" />
    <fileversion name="CryIf_check.mak" version="N/A" />
    <fileversion name="CryIf_defs.mak" version="N/A" />
    <fileversion name="CryIf_rules.mak" version="N/A" />
  </testelement>
  <testelement name="TscStandard EmbeddedSystem" date="2020-08-25 15:41" executor="vismxe">
    <repository>
      <info>
        <entry kind="dir" path="." revision="481008">
          <url>https://vglobpessvn1.vg.vector.int/svn/CANbedded/If/If_AsrIfCry/base/TscStandard/trunk/Embedded</url>
          <relative-url>^/If/If_AsrIfCry/base/TscStandard/trunk/Embedded</relative-url>
          <repository>
            <root>https://vglobpessvn1.vg.vector.int/svn/CANbedded</root>
            <uuid>134c08b6-4c6f-da49-b378-d823a05eae69</uuid>
          </repository>
          <wc-info>
            <wcroot-abspath>D:/usr/development/Components/If/If_AsrIfCry/base</wcroot-abspath>
            <schedule>normal</schedule>
            <depth>infinity</depth>
          </wc-info>
          <commit revision="479343">
            <author>vismxe</author>
            <date>2020-08-19T16:11:11.295114Z</date>
          </commit>
        </entry>
      </info>
      <status>
        <target path="D:\usr\development\Components\If\If_AsrIfCry\base\TscStandard\trunk\Embedded"></target>
      </status>
    </repository>
    <fileversion version="N/A" />
  </testelement>
  <testelement name="TscStandard Cfg5" date="2020-08-25 15:41" executor="vismxe">
    <repository>
      <info>
        <entry kind="dir" path="." revision="481008">
          <url>https://vglobpessvn1.vg.vector.int/svn/CANbedded/If/If_AsrIfCry/base/TscStandard/trunk/GenTool_GeneratorMsr</url>
          <relative-url>^/If/If_AsrIfCry/base/TscStandard/trunk/GenTool_GeneratorMsr</relative-url>
          <repository>
            <root>https://vglobpessvn1.vg.vector.int/svn/CANbedded</root>
            <uuid>134c08b6-4c6f-da49-b378-d823a05eae69</uuid>
          </repository>
          <wc-info>
            <wcroot-abspath>D:/usr/development/Components/If/If_AsrIfCry/base</wcroot-abspath>
            <schedule>normal</schedule>
            <depth>infinity</depth>
          </wc-info>
          <commit revision="479343">
            <author>vismxe</author>
            <date>2020-08-19T16:11:11.295114Z</date>
          </commit>
        </entry>
      </info>
      <status>
        <target path="D:\usr\development\Components\If\If_AsrIfCry\base\TscStandard\trunk\GenTool_GeneratorMsr"></target>
      </status>
    </repository>
  </testelement>
</testplan>